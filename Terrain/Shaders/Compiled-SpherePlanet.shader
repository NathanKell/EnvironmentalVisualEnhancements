Shader "Sphere/Planet" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_SpecColor ("Specular tint", Color) = (1,1,1,1)
		_Shininess ("Shininess", Float) = 10
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
	}
	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 50 to 60
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = texture2D (_LightTexture0, vec2(tmpvar_45)).w;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = texture2D (_LightTexture0, vec2(tmpvar_45)).w;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 430
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 434
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 463
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 467
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 471
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 475
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 479
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 483
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 487
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec3 i_20;
  i_20 = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_19) * 4.0), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_20 - (2.0 * (dot (normal_16, i_20) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_21));
  color_2.xyz = (color_2.xyz * tmpvar_21);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c13, c13
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
mul r1.xyz, r1.y, c13
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
rsq r1.y, r0.w
mul o4.xyz, r1.y, r0
add r0.w, r1.x, c14.y
frc r1.x, r0.w
add_sat o5.x, r0.w, -r1
dp4 r1.x, v0, v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_46;
  tmpvar_46 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_45)), 0.0, 1.0);
  light_3 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_47;
  highp vec3 i_48;
  i_48 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_49;
  tmpvar_49 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_48 - (2.0 * (dot (norm_14, i_48) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (light_3 + (main_15.w * tmpvar_49));
  light_3 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_52;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_46;
  tmpvar_46 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_45)), 0.0, 1.0);
  light_3 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_47;
  highp vec3 i_48;
  i_48 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_49;
  tmpvar_49 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_48 - (2.0 * (dot (norm_14, i_48) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (light_3 + (main_15.w * tmpvar_49));
  light_3 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_52;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 419
#line 436
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 419
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 423
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 427
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 431
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 419
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 457
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    #line 465
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 469
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 473
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 477
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 481
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c15
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  highp float tmpvar_50;
  tmpvar_50 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_15, i_54) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_16.w * tmpvar_55));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_58;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  highp float tmpvar_50;
  tmpvar_50 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_15, i_54) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_16.w * tmpvar_55));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_58;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 431
#line 460
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 439
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 443
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 431
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 472
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 476
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 480
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 484
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 488
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 492
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 496
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTextureB0, vec2(tmpvar_45)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTextureB0, vec2(tmpvar_45)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 423
#line 452
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 435
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 439
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 423
#line 452
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 443
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 447
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 456
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 460
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 464
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 468
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 472
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 476
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 480
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 484
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 488
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c18.x
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, r1, c6
dp4 r0.y, r1, c5
dp4 r0.x, r1, c4
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c17, c17
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c17
dp3 r0.w, r0, r1
add r2.x, r0.w, c18.y
frc r2.y, r2.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
add_sat o6.x, r2, -r2.y
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  tmpvar_45 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  tmpvar_45 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 430
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 434
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 463
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 467
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 471
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 475
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 479
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 483
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 487
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_23;
  if ((tmpvar_22.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_20.w) * tmpvar_21.w) * tmpvar_23);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_16, i_25) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_26));
  color_2.xyz = (color_2.xyz * tmpvar_26);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump float shadow_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_53;
  if ((tmpvar_52.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  shadow_51 = tmpvar_53;
  tmpvar_50 = shadow_51;
  highp float tmpvar_54;
  tmpvar_54 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump float shadow_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_53;
  if ((tmpvar_52.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  shadow_51 = tmpvar_53;
  tmpvar_50 = shadow_51;
  highp float tmpvar_54;
  tmpvar_54 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 438
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 446
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 450
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 438
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 480
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 484
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 488
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 492
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 496
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 500
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 504
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump float shadow_51;
  lowp float tmpvar_52;
  tmpvar_52 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (_LightShadowData.x + (shadow_51 * (1.0 - _LightShadowData.x)));
  shadow_51 = tmpvar_53;
  tmpvar_50 = shadow_51;
  highp float tmpvar_54;
  tmpvar_54 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 439
#line 469
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 447
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 451
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 456
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 439
#line 469
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 460
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 464
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 481
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 485
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 489
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 493
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 497
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 501
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 505
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20.x), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c15, c15
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r1.y, c15
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
add r1.w, r1.x, c16.y
mul r1.xyz, r0.xyww, c16.z
frc r0.z, r1.w
add_sat o6.x, r1.w, -r0.z
dp4 r0.z, v0, c2
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  mediump float lightShadowDataX_46;
  highp float dist_47;
  lowp float tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_47 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = _LightShadowData.x;
  lightShadowDataX_46 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = max (float((dist_47 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_46);
  tmpvar_45 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_14, i_54) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_15.w * tmpvar_55));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_58;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45.x), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 428
#line 457
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 436
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 440
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 444
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 428
#line 457
#line 446
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 448
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 452
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 457
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 461
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 465
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 469
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 473
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 477
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 481
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 485
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 489
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 493
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
mul r2.xyz, r1.w, r2
dp4 r1.y, c19, c19
rsq r1.y, r1.y
mul r1.xyz, r1.y, c19
dp3 r1.x, r2, r1
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r1.y, r0.w
add r0.w, r1.x, c20.y
frc r1.z, r0.w
mul o4.xyz, r1.y, r0
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.z
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  mediump float lightShadowDataX_46;
  highp float dist_47;
  lowp float tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_47 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = _LightShadowData.x;
  lightShadowDataX_46 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = max (float((dist_47 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_46);
  tmpvar_45 = tmpvar_50;
  lowp float tmpvar_51;
  tmpvar_51 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_45);
  mediump float tmpvar_52;
  tmpvar_52 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_51), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  light_3 = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_54;
  highp vec3 i_55;
  i_55 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_56;
  tmpvar_56 = (specularReflection_2 * (((tmpvar_51 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_55 - (2.0 * (dot (norm_14, i_55) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_15.w * tmpvar_56));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_59;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  tmpvar_45 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 431
#line 461
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 439
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 443
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 448
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 431
#line 461
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 452
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 456
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 473
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 477
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 481
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 485
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 489
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 493
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 497
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  tmpvar_24 = (tmpvar_20.w * tmpvar_23);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_16, i_25) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_26));
  color_2.xyz = (color_2.xyz * tmpvar_26);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_49 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_52;
  if ((tmpvar_51 < tmpvar_48)) {
    tmpvar_52 = _LightShadowData.x;
  } else {
    tmpvar_52 = 1.0;
  };
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_47.w * tmpvar_52);
  atten_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_49 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_52;
  if ((tmpvar_51 < tmpvar_48)) {
    tmpvar_52 = _LightShadowData.x;
  } else {
    tmpvar_52 = 1.0;
  };
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_47.w * tmpvar_52);
  atten_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 436
#line 466
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 444
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 448
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 453
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 436
#line 466
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 461
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 470
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 474
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 478
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 482
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 486
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 498
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 502
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_21;
  tmpvar_21 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_22;
  tmpvar_22 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_23;
  tmpvar_23 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_24;
  if ((tmpvar_23 < tmpvar_22)) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_20.w * tmpvar_21.w) * tmpvar_24);
  vec3 i_26;
  i_26 = -(xlv_TEXCOORD5);
  vec3 tmpvar_27;
  tmpvar_27 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_25), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_26 - (2.0 * (dot (normal_16, i_26) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_27));
  color_2.xyz = (color_2.xyz * tmpvar_27);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  tmpvar_49 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_53;
  if ((tmpvar_52 < tmpvar_49)) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  highp float tmpvar_54;
  tmpvar_54 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_53);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  tmpvar_49 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_53;
  if ((tmpvar_52 < tmpvar_49)) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  highp float tmpvar_54;
  tmpvar_54 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_53);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 437
#line 467
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 445
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 449
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 437
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 479
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 483
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 487
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 491
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 495
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 499
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 503
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_22;
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_22.x = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_22.y = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_22.z = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_22.w = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_22, tmpvar_23.zzzz);
  vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  float tmpvar_31;
  tmpvar_31 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_20.w) * tmpvar_21.w) * dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_16, i_32) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_33));
  color_2.xyz = (color_2.xyz * tmpvar_33);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump vec4 shadows_51;
  highp vec4 shadowVals_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_54;
  P_54 = (tmpvar_53.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_52.x = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_53.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_52.y = tmpvar_57;
  highp vec2 P_58;
  P_58 = (tmpvar_53.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_ShadowMapTexture, P_58).x;
  shadowVals_52.z = tmpvar_59;
  highp vec2 P_60;
  P_60 = (tmpvar_53.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_61;
  tmpvar_61 = texture2D (_ShadowMapTexture, P_60).x;
  shadowVals_52.w = tmpvar_61;
  bvec4 tmpvar_62;
  tmpvar_62 = lessThan (shadowVals_52, tmpvar_53.zzzz);
  highp vec4 tmpvar_63;
  tmpvar_63 = _LightShadowData.xxxx;
  highp float tmpvar_64;
  if (tmpvar_62.x) {
    tmpvar_64 = tmpvar_63.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_62.y) {
    tmpvar_65 = tmpvar_63.y;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_62.z) {
    tmpvar_66 = tmpvar_63.z;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_62.w) {
    tmpvar_67 = tmpvar_63.w;
  } else {
    tmpvar_67 = 1.0;
  };
  highp vec4 tmpvar_68;
  tmpvar_68.x = tmpvar_64;
  tmpvar_68.y = tmpvar_65;
  tmpvar_68.z = tmpvar_66;
  tmpvar_68.w = tmpvar_67;
  shadows_51 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (shadows_51, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_50 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_73;
  highp vec3 i_74;
  i_74 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_75;
  tmpvar_75 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_74 - (2.0 * (dot (norm_15, i_74) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_16.w * tmpvar_75));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_78;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump vec4 shadows_51;
  highp vec4 shadowVals_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_54;
  P_54 = (tmpvar_53.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_52.x = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_53.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_52.y = tmpvar_57;
  highp vec2 P_58;
  P_58 = (tmpvar_53.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_ShadowMapTexture, P_58).x;
  shadowVals_52.z = tmpvar_59;
  highp vec2 P_60;
  P_60 = (tmpvar_53.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_61;
  tmpvar_61 = texture2D (_ShadowMapTexture, P_60).x;
  shadowVals_52.w = tmpvar_61;
  bvec4 tmpvar_62;
  tmpvar_62 = lessThan (shadowVals_52, tmpvar_53.zzzz);
  highp vec4 tmpvar_63;
  tmpvar_63 = _LightShadowData.xxxx;
  highp float tmpvar_64;
  if (tmpvar_62.x) {
    tmpvar_64 = tmpvar_63.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_62.y) {
    tmpvar_65 = tmpvar_63.y;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_62.z) {
    tmpvar_66 = tmpvar_63.z;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_62.w) {
    tmpvar_67 = tmpvar_63.w;
  } else {
    tmpvar_67 = 1.0;
  };
  highp vec4 tmpvar_68;
  tmpvar_68.x = tmpvar_64;
  tmpvar_68.y = tmpvar_65;
  tmpvar_68.z = tmpvar_66;
  tmpvar_68.w = tmpvar_67;
  shadows_51 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (shadows_51, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_50 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_73;
  highp vec3 i_74;
  i_74 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_75;
  tmpvar_75 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_74 - (2.0 * (dot (norm_15, i_74) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_16.w * tmpvar_75));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_78;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 454
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 458
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 488
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 492
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 496
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 504
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 508
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 512
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 shadows_20;
  vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_20.x = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[0].xyz)).x;
  shadows_20.y = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[1].xyz)).x;
  shadows_20.z = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[2].xyz)).x;
  shadows_20.w = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_22;
  tmpvar_22 = (_LightShadowData.xxxx + (shadows_20 * (1.0 - _LightShadowData.xxxx)));
  shadows_20 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_24;
  i_24 = -(xlv_TEXCOORD5);
  vec3 tmpvar_25;
  tmpvar_25 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_23), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_23 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_24 - (2.0 * (dot (normal_16, i_24) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_25));
  color_2.xyz = (color_2.xyz * tmpvar_25);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump vec4 shadows_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_53;
  coord_53 = (tmpvar_52 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_54;
  tmpvar_54 = shadow2DEXT (_ShadowMapTexture, coord_53);
  shadows_51.x = tmpvar_54;
  highp vec3 coord_55;
  coord_55 = (tmpvar_52 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_56;
  tmpvar_56 = shadow2DEXT (_ShadowMapTexture, coord_55);
  shadows_51.y = tmpvar_56;
  highp vec3 coord_57;
  coord_57 = (tmpvar_52 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_58;
  tmpvar_58 = shadow2DEXT (_ShadowMapTexture, coord_57);
  shadows_51.z = tmpvar_58;
  highp vec3 coord_59;
  coord_59 = (tmpvar_52 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_60;
  tmpvar_60 = shadow2DEXT (_ShadowMapTexture, coord_59);
  shadows_51.w = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (_LightShadowData.xxxx + (shadows_51 * (1.0 - _LightShadowData.xxxx)));
  shadows_51 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = dot (shadows_51, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_50 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_15, i_67) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 + (main_16.w * tmpvar_68));
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 454
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 458
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 488
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 492
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 496
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 504
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 508
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 512
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  float tmpvar_29;
  tmpvar_29 = (tmpvar_20.w * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_30;
  i_30 = -(xlv_TEXCOORD5);
  vec3 tmpvar_31;
  tmpvar_31 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_29 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_30 - (2.0 * (dot (normal_16, i_30) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_31));
  color_2.xyz = (color_2.xyz * tmpvar_31);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  mediump vec4 shadows_49;
  highp vec4 shadowVals_50;
  highp float tmpvar_51;
  tmpvar_51 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_50.x = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_50.y = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_50.z = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_50.w = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_64;
  tmpvar_64 = lessThan (shadowVals_50, vec4(tmpvar_51));
  highp vec4 tmpvar_65;
  tmpvar_65 = _LightShadowData.xxxx;
  highp float tmpvar_66;
  if (tmpvar_64.x) {
    tmpvar_66 = tmpvar_65.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_64.y) {
    tmpvar_67 = tmpvar_65.y;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_64.z) {
    tmpvar_68 = tmpvar_65.z;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_64.w) {
    tmpvar_69 = tmpvar_65.w;
  } else {
    tmpvar_69 = 1.0;
  };
  highp vec4 tmpvar_70;
  tmpvar_70.x = tmpvar_66;
  tmpvar_70.y = tmpvar_67;
  tmpvar_70.z = tmpvar_68;
  tmpvar_70.w = tmpvar_69;
  shadows_49 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (shadows_49, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_48 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = (tmpvar_47.w * tmpvar_48);
  atten_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_15, i_76) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_16.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_80;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  mediump vec4 shadows_49;
  highp vec4 shadowVals_50;
  highp float tmpvar_51;
  tmpvar_51 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_50.x = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_50.y = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_50.z = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_50.w = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_64;
  tmpvar_64 = lessThan (shadowVals_50, vec4(tmpvar_51));
  highp vec4 tmpvar_65;
  tmpvar_65 = _LightShadowData.xxxx;
  highp float tmpvar_66;
  if (tmpvar_64.x) {
    tmpvar_66 = tmpvar_65.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_64.y) {
    tmpvar_67 = tmpvar_65.y;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_64.z) {
    tmpvar_68 = tmpvar_65.z;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_64.w) {
    tmpvar_69 = tmpvar_65.w;
  } else {
    tmpvar_69 = 1.0;
  };
  highp vec4 tmpvar_70;
  tmpvar_70.x = tmpvar_66;
  tmpvar_70.y = tmpvar_67;
  tmpvar_70.z = tmpvar_68;
  tmpvar_70.w = tmpvar_69;
  shadows_49 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (shadows_49, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_48 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = (tmpvar_47.w * tmpvar_48);
  atten_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_15, i_76) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_16.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_80;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 442
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 450
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 454
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 442
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 484
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 488
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 492
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 496
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 500
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 504
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 508
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_21;
  tmpvar_21 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_22;
  shadowVals_22.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_22.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_22.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_22.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_22, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  float tmpvar_30;
  tmpvar_30 = ((tmpvar_20.w * tmpvar_21.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_31;
  i_31 = -(xlv_TEXCOORD5);
  vec3 tmpvar_32;
  tmpvar_32 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_30), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_31 - (2.0 * (dot (normal_16, i_31) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_32));
  color_2.xyz = (color_2.xyz * tmpvar_32);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  mediump vec4 shadows_50;
  highp vec4 shadowVals_51;
  highp float tmpvar_52;
  tmpvar_52 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_53;
  vec_53 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_54;
  lowp vec4 tmpvar_55;
  tmpvar_55 = textureCube (_ShadowMapTexture, vec_53);
  packDist_54 = tmpvar_55;
  shadowVals_51.x = dot (packDist_54, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_56;
  vec_56 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_57;
  lowp vec4 tmpvar_58;
  tmpvar_58 = textureCube (_ShadowMapTexture, vec_56);
  packDist_57 = tmpvar_58;
  shadowVals_51.y = dot (packDist_57, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_59;
  vec_59 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_ShadowMapTexture, vec_59);
  packDist_60 = tmpvar_61;
  shadowVals_51.z = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_51.w = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_65;
  tmpvar_65 = lessThan (shadowVals_51, vec4(tmpvar_52));
  highp vec4 tmpvar_66;
  tmpvar_66 = _LightShadowData.xxxx;
  highp float tmpvar_67;
  if (tmpvar_65.x) {
    tmpvar_67 = tmpvar_66.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_65.y) {
    tmpvar_68 = tmpvar_66.y;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_65.z) {
    tmpvar_69 = tmpvar_66.z;
  } else {
    tmpvar_69 = 1.0;
  };
  highp float tmpvar_70;
  if (tmpvar_65.w) {
    tmpvar_70 = tmpvar_66.w;
  } else {
    tmpvar_70 = 1.0;
  };
  highp vec4 tmpvar_71;
  tmpvar_71.x = tmpvar_67;
  tmpvar_71.y = tmpvar_68;
  tmpvar_71.z = tmpvar_69;
  tmpvar_71.w = tmpvar_70;
  shadows_50 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (shadows_50, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_49 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_49);
  atten_4 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_15, i_77) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_16.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_81;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  mediump vec4 shadows_50;
  highp vec4 shadowVals_51;
  highp float tmpvar_52;
  tmpvar_52 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_53;
  vec_53 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_54;
  lowp vec4 tmpvar_55;
  tmpvar_55 = textureCube (_ShadowMapTexture, vec_53);
  packDist_54 = tmpvar_55;
  shadowVals_51.x = dot (packDist_54, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_56;
  vec_56 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_57;
  lowp vec4 tmpvar_58;
  tmpvar_58 = textureCube (_ShadowMapTexture, vec_56);
  packDist_57 = tmpvar_58;
  shadowVals_51.y = dot (packDist_57, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_59;
  vec_59 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_ShadowMapTexture, vec_59);
  packDist_60 = tmpvar_61;
  shadowVals_51.z = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_51.w = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_65;
  tmpvar_65 = lessThan (shadowVals_51, vec4(tmpvar_52));
  highp vec4 tmpvar_66;
  tmpvar_66 = _LightShadowData.xxxx;
  highp float tmpvar_67;
  if (tmpvar_65.x) {
    tmpvar_67 = tmpvar_66.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_65.y) {
    tmpvar_68 = tmpvar_66.y;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_65.z) {
    tmpvar_69 = tmpvar_66.z;
  } else {
    tmpvar_69 = 1.0;
  };
  highp float tmpvar_70;
  if (tmpvar_65.w) {
    tmpvar_70 = tmpvar_66.w;
  } else {
    tmpvar_70 = 1.0;
  };
  highp vec4 tmpvar_71;
  tmpvar_71.x = tmpvar_67;
  tmpvar_71.y = tmpvar_68;
  tmpvar_71.z = tmpvar_69;
  tmpvar_71.w = tmpvar_70;
  shadows_50 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (shadows_50, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_49 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_49);
  atten_4 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_15, i_77) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_16.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_81;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 443
#line 473
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 455
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 460
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 443
#line 473
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 464
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 468
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 477
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 481
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 485
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 489
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 493
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 505
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 509
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = texture2D (_LightTexture0, vec2(tmpvar_45)).w;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = texture2D (_LightTexture0, vec2(tmpvar_45)).w;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 430
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 434
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 463
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 467
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 471
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 475
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 479
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 483
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 487
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec3 i_20;
  i_20 = -(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_19) * 4.0), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_20 - (2.0 * (dot (normal_16, i_20) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_21));
  color_2.xyz = (color_2.xyz * tmpvar_21);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c13, c13
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
mul r1.xyz, r1.y, c13
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
rsq r1.y, r0.w
mul o4.xyz, r1.y, r0
add r0.w, r1.x, c14.y
frc r1.x, r0.w
add_sat o5.x, r0.w, -r1
dp4 r1.x, v0, v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_46;
  tmpvar_46 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_45)), 0.0, 1.0);
  light_3 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_47;
  highp vec3 i_48;
  i_48 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_49;
  tmpvar_49 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_48 - (2.0 * (dot (norm_14, i_48) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (light_3 + (main_15.w * tmpvar_49));
  light_3 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_52;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_46;
  tmpvar_46 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_45)), 0.0, 1.0);
  light_3 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_47;
  highp vec3 i_48;
  i_48 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_49;
  tmpvar_49 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_48 - (2.0 * (dot (norm_14, i_48) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (light_3 + (main_15.w * tmpvar_49));
  light_3 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_52;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 419
#line 436
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 419
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 423
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 427
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 431
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 419
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 457
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    #line 465
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 469
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 473
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 477
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 481
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c15
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  highp float tmpvar_50;
  tmpvar_50 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_15, i_54) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_16.w * tmpvar_55));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_58;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  highp float tmpvar_50;
  tmpvar_50 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_15, i_54) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_16.w * tmpvar_55));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_58;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 431
#line 460
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 439
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 443
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 431
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 472
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 476
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 480
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 484
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 488
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 492
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 496
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTextureB0, vec2(tmpvar_45)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_46;
  tmpvar_46 = (texture2D (_LightTextureB0, vec2(tmpvar_45)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_46), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_46 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_14, i_50) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 + (main_15.w * tmpvar_51));
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_54;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 423
#line 452
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 435
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 439
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 423
#line 452
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 443
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 447
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 456
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 460
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 464
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 468
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 472
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 476
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 480
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 484
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 488
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c18.x
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, r1, c6
dp4 r0.y, r1, c5
dp4 r0.x, r1, c4
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c17, c17
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c17
dp3 r0.w, r0, r1
add r2.x, r0.w, c18.y
frc r2.y, r2.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
add_sat o6.x, r2, -r2.y
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  tmpvar_45 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  tmpvar_45 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 430
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 434
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 422
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 463
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 467
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 471
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 475
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 479
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 483
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 487
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_23;
  if ((tmpvar_22.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_20.w) * tmpvar_21.w) * tmpvar_23);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_16, i_25) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_26));
  color_2.xyz = (color_2.xyz * tmpvar_26);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump float shadow_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_53;
  if ((tmpvar_52.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  shadow_51 = tmpvar_53;
  tmpvar_50 = shadow_51;
  highp float tmpvar_54;
  tmpvar_54 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump float shadow_51;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_53;
  if ((tmpvar_52.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  shadow_51 = tmpvar_53;
  tmpvar_50 = shadow_51;
  highp float tmpvar_54;
  tmpvar_54 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 438
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 446
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 450
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 438
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 480
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 484
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 488
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 492
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 496
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 500
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 504
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump float shadow_51;
  lowp float tmpvar_52;
  tmpvar_52 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (_LightShadowData.x + (shadow_51 * (1.0 - _LightShadowData.x)));
  shadow_51 = tmpvar_53;
  tmpvar_50 = shadow_51;
  highp float tmpvar_54;
  tmpvar_54 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 439
#line 469
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 447
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 451
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 456
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 439
#line 469
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 460
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 464
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 481
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 485
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 489
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 493
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 497
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 501
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 505
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20.x), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c15, c15
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r1.y, c15
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
add r1.w, r1.x, c16.y
mul r1.xyz, r0.xyww, c16.z
frc r0.z, r1.w
add_sat o6.x, r1.w, -r0.z
dp4 r0.z, v0, c2
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  mediump float lightShadowDataX_46;
  highp float dist_47;
  lowp float tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_47 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = _LightShadowData.x;
  lightShadowDataX_46 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = max (float((dist_47 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_46);
  tmpvar_45 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_14, i_54) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_15.w * tmpvar_55));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_58;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45.x), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 428
#line 457
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 436
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 440
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 444
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 428
#line 457
#line 446
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 448
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 452
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 457
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 461
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 465
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 469
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 473
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 477
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 481
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 485
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 489
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 493
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_21;
  i_21 = -(xlv_TEXCOORD5);
  vec3 tmpvar_22;
  tmpvar_22 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (normal_16, i_21) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_22));
  color_2.xyz = (color_2.xyz * tmpvar_22);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
mul r2.xyz, r1.w, r2
dp4 r1.y, c19, c19
rsq r1.y, r1.y
mul r1.xyz, r1.y, c19
dp3 r1.x, r2, r1
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r1.y, r0.w
add r0.w, r1.x, c20.y
frc r1.z, r0.w
mul o4.xyz, r1.y, r0
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.z
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).xyz * 2.0) - 1.0);
  norm_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  mediump float lightShadowDataX_46;
  highp float dist_47;
  lowp float tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_47 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = _LightShadowData.x;
  lightShadowDataX_46 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = max (float((dist_47 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_46);
  tmpvar_45 = tmpvar_50;
  lowp float tmpvar_51;
  tmpvar_51 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_45);
  mediump float tmpvar_52;
  tmpvar_52 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_51), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  light_3 = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_54;
  highp vec3 i_55;
  i_55 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_56;
  tmpvar_56 = (specularReflection_2 * (((tmpvar_51 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_55 - (2.0 * (dot (norm_14, i_55) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_15.w * tmpvar_56));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_59;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 detailZ_8;
  mediump vec4 detailY_9;
  mediump vec4 detailX_10;
  mediump vec2 detailnrmxy_11;
  mediump vec2 detailnrmzx_12;
  mediump vec2 detailnrmzy_13;
  mediump vec3 norm_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  norm_14 = normal_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_11 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_DetailTex, detailnrmzy_13);
  detailX_10 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzx_12);
  detailY_9 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmxy_11);
  detailZ_8 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_39;
  tmpvar_39 = mix (detailZ_8, detailX_10, tmpvar_38.xxxx);
  detail_7 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detail_7, detailY_9, tmpvar_38.yyyy);
  detail_7 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((main_15 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_17.w = tmpvar_42.w;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = dot (norm_14, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_44;
  lowp float tmpvar_45;
  tmpvar_45 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_46;
  tmpvar_46 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_45), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_46)), 0.0, 1.0);
  light_3 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_48;
  highp vec3 i_49;
  i_49 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_50;
  tmpvar_50 = (specularReflection_2 * (((tmpvar_45 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_49 - (2.0 * (dot (norm_14, i_49) * norm_14))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (light_3 + (main_15.w * tmpvar_50));
  light_3 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_42.xyz + (_Albedo * light_3));
  color_17.xyz = tmpvar_53;
  color_17.xyz = (color_17.xyz * light_3);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 431
#line 461
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 439
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 443
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 448
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 431
#line 461
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 452
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 456
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 473
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 477
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 481
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 485
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 489
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 493
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 497
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  tmpvar_24 = (tmpvar_20.w * tmpvar_23);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_16, i_25) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_26));
  color_2.xyz = (color_2.xyz * tmpvar_26);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_49 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_52;
  if ((tmpvar_51 < tmpvar_48)) {
    tmpvar_52 = _LightShadowData.x;
  } else {
    tmpvar_52 = 1.0;
  };
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_47.w * tmpvar_52);
  atten_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_49 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_52;
  if ((tmpvar_51 < tmpvar_48)) {
    tmpvar_52 = _LightShadowData.x;
  } else {
    tmpvar_52 = 1.0;
  };
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_47.w * tmpvar_52);
  atten_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 436
#line 466
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 444
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 448
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 453
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 436
#line 466
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 461
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 470
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 474
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 478
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 482
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 486
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 498
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 502
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_21;
  tmpvar_21 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_22;
  tmpvar_22 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_23;
  tmpvar_23 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_24;
  if ((tmpvar_23 < tmpvar_22)) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_20.w * tmpvar_21.w) * tmpvar_24);
  vec3 i_26;
  i_26 = -(xlv_TEXCOORD5);
  vec3 tmpvar_27;
  tmpvar_27 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_25), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_26 - (2.0 * (dot (normal_16, i_26) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_27));
  color_2.xyz = (color_2.xyz * tmpvar_27);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  tmpvar_49 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_53;
  if ((tmpvar_52 < tmpvar_49)) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  highp float tmpvar_54;
  tmpvar_54 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_53);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  tmpvar_49 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_53;
  if ((tmpvar_52 < tmpvar_49)) {
    tmpvar_53 = _LightShadowData.x;
  } else {
    tmpvar_53 = 1.0;
  };
  highp float tmpvar_54;
  tmpvar_54 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_53);
  atten_4 = tmpvar_54;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 437
#line 467
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 445
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 449
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 437
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 479
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 483
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 487
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 491
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 495
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 499
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 503
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_22;
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_22.x = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_22.y = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_22.z = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_22.w = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_22, tmpvar_23.zzzz);
  vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  float tmpvar_31;
  tmpvar_31 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_20.w) * tmpvar_21.w) * dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_16, i_32) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_33));
  color_2.xyz = (color_2.xyz * tmpvar_33);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump vec4 shadows_51;
  highp vec4 shadowVals_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_54;
  P_54 = (tmpvar_53.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_52.x = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_53.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_52.y = tmpvar_57;
  highp vec2 P_58;
  P_58 = (tmpvar_53.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_ShadowMapTexture, P_58).x;
  shadowVals_52.z = tmpvar_59;
  highp vec2 P_60;
  P_60 = (tmpvar_53.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_61;
  tmpvar_61 = texture2D (_ShadowMapTexture, P_60).x;
  shadowVals_52.w = tmpvar_61;
  bvec4 tmpvar_62;
  tmpvar_62 = lessThan (shadowVals_52, tmpvar_53.zzzz);
  highp vec4 tmpvar_63;
  tmpvar_63 = _LightShadowData.xxxx;
  highp float tmpvar_64;
  if (tmpvar_62.x) {
    tmpvar_64 = tmpvar_63.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_62.y) {
    tmpvar_65 = tmpvar_63.y;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_62.z) {
    tmpvar_66 = tmpvar_63.z;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_62.w) {
    tmpvar_67 = tmpvar_63.w;
  } else {
    tmpvar_67 = 1.0;
  };
  highp vec4 tmpvar_68;
  tmpvar_68.x = tmpvar_64;
  tmpvar_68.y = tmpvar_65;
  tmpvar_68.z = tmpvar_66;
  tmpvar_68.w = tmpvar_67;
  shadows_51 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (shadows_51, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_50 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_73;
  highp vec3 i_74;
  i_74 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_75;
  tmpvar_75 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_74 - (2.0 * (dot (norm_15, i_74) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_16.w * tmpvar_75));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_78;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump vec4 shadows_51;
  highp vec4 shadowVals_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_54;
  P_54 = (tmpvar_53.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_52.x = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_53.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_52.y = tmpvar_57;
  highp vec2 P_58;
  P_58 = (tmpvar_53.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_ShadowMapTexture, P_58).x;
  shadowVals_52.z = tmpvar_59;
  highp vec2 P_60;
  P_60 = (tmpvar_53.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_61;
  tmpvar_61 = texture2D (_ShadowMapTexture, P_60).x;
  shadowVals_52.w = tmpvar_61;
  bvec4 tmpvar_62;
  tmpvar_62 = lessThan (shadowVals_52, tmpvar_53.zzzz);
  highp vec4 tmpvar_63;
  tmpvar_63 = _LightShadowData.xxxx;
  highp float tmpvar_64;
  if (tmpvar_62.x) {
    tmpvar_64 = tmpvar_63.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_62.y) {
    tmpvar_65 = tmpvar_63.y;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_62.z) {
    tmpvar_66 = tmpvar_63.z;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_62.w) {
    tmpvar_67 = tmpvar_63.w;
  } else {
    tmpvar_67 = 1.0;
  };
  highp vec4 tmpvar_68;
  tmpvar_68.x = tmpvar_64;
  tmpvar_68.y = tmpvar_65;
  tmpvar_68.z = tmpvar_66;
  tmpvar_68.w = tmpvar_67;
  shadows_51 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (shadows_51, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_50 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_73;
  highp vec3 i_74;
  i_74 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_75;
  tmpvar_75 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_74 - (2.0 * (dot (norm_15, i_74) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_16.w * tmpvar_75));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_78;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 454
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 458
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 488
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 492
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 496
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 504
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 508
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 512
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_18.w;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 shadows_20;
  vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_20.x = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[0].xyz)).x;
  shadows_20.y = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[1].xyz)).x;
  shadows_20.z = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[2].xyz)).x;
  shadows_20.w = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_22;
  tmpvar_22 = (_LightShadowData.xxxx + (shadows_20 * (1.0 - _LightShadowData.xxxx)));
  shadows_20 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_24;
  i_24 = -(xlv_TEXCOORD5);
  vec3 tmpvar_25;
  tmpvar_25 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_23), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_23 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_24 - (2.0 * (dot (normal_16, i_24) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_25));
  color_2.xyz = (color_2.xyz * tmpvar_25);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18.w = tmpvar_43.w;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_46 = texture2D (_LightTexture0, P_47);
  highp float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_LightTextureB0, vec2(tmpvar_48));
  lowp float tmpvar_50;
  mediump vec4 shadows_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_53;
  coord_53 = (tmpvar_52 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_54;
  tmpvar_54 = shadow2DEXT (_ShadowMapTexture, coord_53);
  shadows_51.x = tmpvar_54;
  highp vec3 coord_55;
  coord_55 = (tmpvar_52 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_56;
  tmpvar_56 = shadow2DEXT (_ShadowMapTexture, coord_55);
  shadows_51.y = tmpvar_56;
  highp vec3 coord_57;
  coord_57 = (tmpvar_52 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_58;
  tmpvar_58 = shadow2DEXT (_ShadowMapTexture, coord_57);
  shadows_51.z = tmpvar_58;
  highp vec3 coord_59;
  coord_59 = (tmpvar_52 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_60;
  tmpvar_60 = shadow2DEXT (_ShadowMapTexture, coord_59);
  shadows_51.w = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (_LightShadowData.xxxx + (shadows_51 * (1.0 - _LightShadowData.xxxx)));
  shadows_51 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = dot (shadows_51, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_50 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_46.w) * tmpvar_49.w) * tmpvar_50);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_15, i_67) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 + (main_16.w * tmpvar_68));
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 454
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 458
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 446
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 488
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 492
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 496
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 504
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 508
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 512
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  float tmpvar_29;
  tmpvar_29 = (tmpvar_20.w * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_30;
  i_30 = -(xlv_TEXCOORD5);
  vec3 tmpvar_31;
  tmpvar_31 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_29 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_30 - (2.0 * (dot (normal_16, i_30) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_31));
  color_2.xyz = (color_2.xyz * tmpvar_31);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  mediump vec4 shadows_49;
  highp vec4 shadowVals_50;
  highp float tmpvar_51;
  tmpvar_51 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_50.x = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_50.y = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_50.z = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_50.w = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_64;
  tmpvar_64 = lessThan (shadowVals_50, vec4(tmpvar_51));
  highp vec4 tmpvar_65;
  tmpvar_65 = _LightShadowData.xxxx;
  highp float tmpvar_66;
  if (tmpvar_64.x) {
    tmpvar_66 = tmpvar_65.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_64.y) {
    tmpvar_67 = tmpvar_65.y;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_64.z) {
    tmpvar_68 = tmpvar_65.z;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_64.w) {
    tmpvar_69 = tmpvar_65.w;
  } else {
    tmpvar_69 = 1.0;
  };
  highp vec4 tmpvar_70;
  tmpvar_70.x = tmpvar_66;
  tmpvar_70.y = tmpvar_67;
  tmpvar_70.z = tmpvar_68;
  tmpvar_70.w = tmpvar_69;
  shadows_49 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (shadows_49, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_48 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = (tmpvar_47.w * tmpvar_48);
  atten_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_15, i_76) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_16.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_80;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTexture0, vec2(tmpvar_46));
  highp float tmpvar_48;
  mediump vec4 shadows_49;
  highp vec4 shadowVals_50;
  highp float tmpvar_51;
  tmpvar_51 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_50.x = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_50.y = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_50.z = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_50.w = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_64;
  tmpvar_64 = lessThan (shadowVals_50, vec4(tmpvar_51));
  highp vec4 tmpvar_65;
  tmpvar_65 = _LightShadowData.xxxx;
  highp float tmpvar_66;
  if (tmpvar_64.x) {
    tmpvar_66 = tmpvar_65.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  if (tmpvar_64.y) {
    tmpvar_67 = tmpvar_65.y;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_64.z) {
    tmpvar_68 = tmpvar_65.z;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_64.w) {
    tmpvar_69 = tmpvar_65.w;
  } else {
    tmpvar_69 = 1.0;
  };
  highp vec4 tmpvar_70;
  tmpvar_70.x = tmpvar_66;
  tmpvar_70.y = tmpvar_67;
  tmpvar_70.z = tmpvar_68;
  tmpvar_70.w = tmpvar_69;
  shadows_49 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (shadows_49, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_48 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = (tmpvar_47.w * tmpvar_48);
  atten_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_15, i_76) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_16.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_80;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 442
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 450
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 454
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 442
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 484
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 488
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 492
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 496
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 500
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 504
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 508
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_17.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_21;
  tmpvar_21 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_22;
  shadowVals_22.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_22.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_22.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_22.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_22, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  float tmpvar_30;
  tmpvar_30 = ((tmpvar_20.w * tmpvar_21.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_31;
  i_31 = -(xlv_TEXCOORD5);
  vec3 tmpvar_32;
  tmpvar_32 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_19) * 4.0) * tmpvar_30), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_31 - (2.0 * (dot (normal_16, i_31) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_2.xyz = (tmpvar_18.xyz + (_Albedo * tmpvar_32));
  color_2.xyz = (color_2.xyz * tmpvar_32);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  mediump vec4 shadows_50;
  highp vec4 shadowVals_51;
  highp float tmpvar_52;
  tmpvar_52 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_53;
  vec_53 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_54;
  lowp vec4 tmpvar_55;
  tmpvar_55 = textureCube (_ShadowMapTexture, vec_53);
  packDist_54 = tmpvar_55;
  shadowVals_51.x = dot (packDist_54, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_56;
  vec_56 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_57;
  lowp vec4 tmpvar_58;
  tmpvar_58 = textureCube (_ShadowMapTexture, vec_56);
  packDist_57 = tmpvar_58;
  shadowVals_51.y = dot (packDist_57, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_59;
  vec_59 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_ShadowMapTexture, vec_59);
  packDist_60 = tmpvar_61;
  shadowVals_51.z = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_51.w = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_65;
  tmpvar_65 = lessThan (shadowVals_51, vec4(tmpvar_52));
  highp vec4 tmpvar_66;
  tmpvar_66 = _LightShadowData.xxxx;
  highp float tmpvar_67;
  if (tmpvar_65.x) {
    tmpvar_67 = tmpvar_66.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_65.y) {
    tmpvar_68 = tmpvar_66.y;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_65.z) {
    tmpvar_69 = tmpvar_66.z;
  } else {
    tmpvar_69 = 1.0;
  };
  highp float tmpvar_70;
  if (tmpvar_65.w) {
    tmpvar_70 = tmpvar_66.w;
  } else {
    tmpvar_70 = 1.0;
  };
  highp vec4 tmpvar_71;
  tmpvar_71.x = tmpvar_67;
  tmpvar_71.y = tmpvar_68;
  tmpvar_71.z = tmpvar_69;
  tmpvar_71.w = tmpvar_70;
  shadows_50 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (shadows_50, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_49 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_49);
  atten_4 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_15, i_77) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_16.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_81;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 detailZ_9;
  mediump vec4 detailY_10;
  mediump vec4 detailX_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_DetailTex, detailnrmzy_14);
  detailX_11 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailTex, detailnrmzx_13);
  detailY_10 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, detailnrmxy_12);
  detailZ_9 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_40;
  tmpvar_40 = mix (detailZ_9, detailX_11, tmpvar_39.xxxx);
  detail_8 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (detail_8, detailY_10, tmpvar_39.yyyy);
  detail_8 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_18 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_LightTextureB0, vec2(tmpvar_46));
  lowp vec4 tmpvar_48;
  tmpvar_48 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_49;
  mediump vec4 shadows_50;
  highp vec4 shadowVals_51;
  highp float tmpvar_52;
  tmpvar_52 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_53;
  vec_53 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_54;
  lowp vec4 tmpvar_55;
  tmpvar_55 = textureCube (_ShadowMapTexture, vec_53);
  packDist_54 = tmpvar_55;
  shadowVals_51.x = dot (packDist_54, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_56;
  vec_56 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_57;
  lowp vec4 tmpvar_58;
  tmpvar_58 = textureCube (_ShadowMapTexture, vec_56);
  packDist_57 = tmpvar_58;
  shadowVals_51.y = dot (packDist_57, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_59;
  vec_59 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_ShadowMapTexture, vec_59);
  packDist_60 = tmpvar_61;
  shadowVals_51.z = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_51.w = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_65;
  tmpvar_65 = lessThan (shadowVals_51, vec4(tmpvar_52));
  highp vec4 tmpvar_66;
  tmpvar_66 = _LightShadowData.xxxx;
  highp float tmpvar_67;
  if (tmpvar_65.x) {
    tmpvar_67 = tmpvar_66.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  if (tmpvar_65.y) {
    tmpvar_68 = tmpvar_66.y;
  } else {
    tmpvar_68 = 1.0;
  };
  highp float tmpvar_69;
  if (tmpvar_65.z) {
    tmpvar_69 = tmpvar_66.z;
  } else {
    tmpvar_69 = 1.0;
  };
  highp float tmpvar_70;
  if (tmpvar_65.w) {
    tmpvar_70 = tmpvar_66.w;
  } else {
    tmpvar_70 = 1.0;
  };
  highp vec4 tmpvar_71;
  tmpvar_71.x = tmpvar_67;
  tmpvar_71.y = tmpvar_68;
  tmpvar_71.z = tmpvar_69;
  tmpvar_71.w = tmpvar_70;
  shadows_50 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (shadows_50, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_49 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = ((tmpvar_47.w * tmpvar_48.w) * tmpvar_49);
  atten_4 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_15, i_77) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_16.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_43.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_81;
  color_18.xyz = (color_18.xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 443
#line 473
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 455
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 460
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 443
#line 473
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 464
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 468
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 477
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 481
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 485
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 489
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    sphereNrm = abs(sphereNrm);
    #line 493
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 505
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 509
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_LightTexture0, vec2(tmpvar_73)).w;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_LightTexture0, vec2(tmpvar_73)).w;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 434
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 438
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 467
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 471
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 475
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 479
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 483
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 491
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 499
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 503
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 507
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec3 i_24;
  i_24 = -(xlv_TEXCOORD5);
  vec3 tmpvar_25;
  tmpvar_25 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_23) * 4.0), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_24 - (2.0 * (dot (normal_17, i_24) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_3.xyz = (color_3.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c13, c13
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
mul r1.xyz, r1.y, c13
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
rsq r1.y, r0.w
mul o4.xyz, r1.y, r0
add r0.w, r1.x, c14.y
frc r1.x, r0.w
add_sat o5.x, r0.w, -r1
dp4 r1.x, v0, v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_22, i_76) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_23.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_80;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_22, i_76) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_23.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_80;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 440
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 435
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 440
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 444
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 448
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    #line 453
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 457
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 461
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    #line 465
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    #line 469
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 473
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 477
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 481
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 485
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 489
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = 1.0;
    #line 493
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 497
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 501
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    #line 505
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c15
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  highp float tmpvar_78;
  tmpvar_78 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w);
  atten_4 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_3 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_81;
  highp vec3 i_82;
  i_82 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_83;
  tmpvar_83 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_82 - (2.0 * (dot (norm_23, i_82) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (light_3 + (main_24.w * tmpvar_83));
  light_3 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_86;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  highp float tmpvar_78;
  tmpvar_78 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w);
  atten_4 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_3 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_81;
  highp vec3 i_82;
  i_82 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_83;
  tmpvar_83 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_82 - (2.0 * (dot (norm_23, i_82) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (light_3 + (main_24.w * tmpvar_83));
  light_3 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_86;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 464
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 443
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 447
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 476
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 480
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 484
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 488
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 492
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 496
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 500
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 508
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 512
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 516
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = (texture2D (_LightTextureB0, vec2(tmpvar_73)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = (texture2D (_LightTextureB0, vec2(tmpvar_73)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 456
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 435
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 439
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 468
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 472
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 476
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 480
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 484
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 488
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 492
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 496
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 500
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 504
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 508
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c18.x
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, r1, c6
dp4 r0.y, r1, c5
dp4 r0.x, r1, c4
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c17, c17
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c17
dp3 r0.w, r0, r1
add r2.x, r0.w, c18.y
frc r2.y, r2.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
add_sat o6.x, r2, -r2.y
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 434
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 438
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 467
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 471
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 475
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 479
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 483
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 491
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 499
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 503
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 507
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_27;
  if ((tmpvar_26.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * tmpvar_27);
  vec3 i_29;
  i_29 = -(xlv_TEXCOORD5);
  vec3 tmpvar_30;
  tmpvar_30 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_28 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_29 - (2.0 * (dot (normal_17, i_29) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_30));
  color_3.xyz = (color_3.xyz * tmpvar_30);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump float shadow_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_81;
  if ((tmpvar_80.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  shadow_79 = tmpvar_81;
  tmpvar_78 = shadow_79;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump float shadow_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_81;
  if ((tmpvar_80.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  shadow_79 = tmpvar_81;
  tmpvar_78 = shadow_79;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 450
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 454
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 484
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 488
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 492
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 496
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 500
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 508
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 516
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 520
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 524
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump float shadow_79;
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_79 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (_LightShadowData.x + (shadow_79 * (1.0 - _LightShadowData.x)));
  shadow_79 = tmpvar_81;
  tmpvar_78 = shadow_79;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 473
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 455
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 460
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 473
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 464
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 468
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 473
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 477
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 481
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 485
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 489
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 493
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 501
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 505
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 509
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 517
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 521
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 525
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24.x), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24.x), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c15, c15
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r1.y, c15
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
add r1.w, r1.x, c16.y
mul r1.xyz, r0.xyww, c16.z
frc r0.z, r1.w
add_sat o6.x, r1.w, -r0.z
dp4 r0.z, v0, c2
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  mediump float lightShadowDataX_74;
  highp float dist_75;
  lowp float tmpvar_76;
  tmpvar_76 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = _LightShadowData.x;
  lightShadowDataX_74 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = max (float((dist_75 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_74);
  tmpvar_73 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_3 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_81;
  highp vec3 i_82;
  i_82 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_83;
  tmpvar_83 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_82 - (2.0 * (dot (norm_22, i_82) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (light_3 + (main_23.w * tmpvar_83));
  light_3 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_86;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73.x), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73.x), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 461
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 440
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 444
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 448
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 461
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 452
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 456
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 473
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 477
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 485
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 489
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 493
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 497
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 501
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 505
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 509
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 513
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
mul r2.xyz, r1.w, r2
dp4 r1.y, c19, c19
rsq r1.y, r1.y
mul r1.xyz, r1.y, c19
dp3 r1.x, r2, r1
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r1.y, r0.w
add r0.w, r1.x, c20.y
frc r1.z, r0.w
mul o4.xyz, r1.y, r0
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.z
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  mediump float lightShadowDataX_74;
  highp float dist_75;
  lowp float tmpvar_76;
  tmpvar_76 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = _LightShadowData.x;
  lightShadowDataX_74 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = max (float((dist_75 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_74);
  tmpvar_73 = tmpvar_78;
  lowp float tmpvar_79;
  tmpvar_79 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_73);
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_79), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_3 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_82;
  highp vec3 i_83;
  i_83 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_84;
  tmpvar_84 = (specularReflection_2 * (((tmpvar_79 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_83 - (2.0 * (dot (norm_22, i_83) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 + (main_23.w * tmpvar_84));
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_87;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_79), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  tmpvar_73 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 465
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 443
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 447
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 452
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 465
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 456
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 460
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 477
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 481
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 493
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 497
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 501
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 505
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 509
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 513
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 517
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (tmpvar_24.w * tmpvar_27);
  vec3 i_29;
  i_29 = -(xlv_TEXCOORD5);
  vec3 tmpvar_30;
  tmpvar_30 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_28 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_29 - (2.0 * (dot (normal_17, i_29) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_30));
  color_3.xyz = (color_3.xyz * tmpvar_30);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_77 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_80;
  if ((tmpvar_79 < tmpvar_76)) {
    tmpvar_80 = _LightShadowData.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_75.w * tmpvar_80);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_23, i_85) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 + (main_24.w * tmpvar_86));
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_89;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_77 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_80;
  if ((tmpvar_79 < tmpvar_76)) {
    tmpvar_80 = _LightShadowData.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_75.w * tmpvar_80);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_23, i_85) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 + (main_24.w * tmpvar_86));
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_89;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 470
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 448
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 452
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 457
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 470
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 465
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 474
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 478
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 482
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 486
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 490
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 498
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 502
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 506
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 514
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 518
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 522
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_27;
  tmpvar_27 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_28;
  if ((tmpvar_27 < tmpvar_26)) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_24.w * tmpvar_25.w) * tmpvar_28);
  vec3 i_30;
  i_30 = -(xlv_TEXCOORD5);
  vec3 tmpvar_31;
  tmpvar_31 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_29 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_30 - (2.0 * (dot (normal_17, i_30) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_31));
  color_3.xyz = (color_3.xyz * tmpvar_31);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_29), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_78 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_81;
  if ((tmpvar_80 < tmpvar_77)) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_81);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_78 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_81;
  if ((tmpvar_80 < tmpvar_77)) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_81);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 471
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 449
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 453
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 483
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 487
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 491
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 495
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 499
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 507
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 511
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 515
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 519
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 523
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_26;
  vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_26.x = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_26.y = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_26.z = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_26.w = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_26, tmpvar_27.zzzz);
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_36;
  i_36 = -(xlv_TEXCOORD5);
  vec3 tmpvar_37;
  tmpvar_37 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_35), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_35 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_36 - (2.0 * (dot (normal_17, i_36) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_37));
  color_3.xyz = (color_3.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_35), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump vec4 shadows_79;
  highp vec4 shadowVals_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_82;
  P_82 = (tmpvar_81.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_80.x = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_81.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_80.y = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_81.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_80.z = tmpvar_87;
  highp vec2 P_88;
  P_88 = (tmpvar_81.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_89;
  tmpvar_89 = texture2D (_ShadowMapTexture, P_88).x;
  shadowVals_80.w = tmpvar_89;
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_80, tmpvar_81.zzzz);
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_79 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_79, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_78 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_3 = tmpvar_100;
  mediump vec3 tmpvar_101;
  tmpvar_101 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_101;
  highp vec3 i_102;
  i_102 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_103;
  tmpvar_103 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_102 - (2.0 * (dot (norm_23, i_102) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (light_3 + (main_24.w * tmpvar_103));
  light_3 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_106;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump vec4 shadows_79;
  highp vec4 shadowVals_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_82;
  P_82 = (tmpvar_81.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_80.x = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_81.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_80.y = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_81.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_80.z = tmpvar_87;
  highp vec2 P_88;
  P_88 = (tmpvar_81.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_89;
  tmpvar_89 = texture2D (_ShadowMapTexture, P_88).x;
  shadowVals_80.w = tmpvar_89;
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_80, tmpvar_81.zzzz);
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_79 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_79, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_78 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_3 = tmpvar_100;
  mediump vec3 tmpvar_101;
  tmpvar_101 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_101;
  highp vec3 i_102;
  i_102 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_103;
  tmpvar_103 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_102 - (2.0 * (dot (norm_23, i_102) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (light_3 + (main_24.w * tmpvar_103));
  light_3 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_106;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 458
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 462
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 467
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 471
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 475
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 480
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 484
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 488
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 492
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 496
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 500
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 504
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 512
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 516
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 520
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 524
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 528
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 532
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 shadows_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_24.x = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[0].xyz)).x;
  shadows_24.y = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[1].xyz)).x;
  shadows_24.z = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[2].xyz)).x;
  shadows_24.w = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_26;
  tmpvar_26 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  shadows_24 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_26, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_17, i_28) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_29));
  color_3.xyz = (color_3.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump vec4 shadows_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_81;
  coord_81 = (tmpvar_80 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_82;
  tmpvar_82 = shadow2DEXT (_ShadowMapTexture, coord_81);
  shadows_79.x = tmpvar_82;
  highp vec3 coord_83;
  coord_83 = (tmpvar_80 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_84;
  tmpvar_84 = shadow2DEXT (_ShadowMapTexture, coord_83);
  shadows_79.y = tmpvar_84;
  highp vec3 coord_85;
  coord_85 = (tmpvar_80 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_86;
  tmpvar_86 = shadow2DEXT (_ShadowMapTexture, coord_85);
  shadows_79.z = tmpvar_86;
  highp vec3 coord_87;
  coord_87 = (tmpvar_80 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_88;
  tmpvar_88 = shadow2DEXT (_ShadowMapTexture, coord_87);
  shadows_79.w = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (_LightShadowData.xxxx + (shadows_79 * (1.0 - _LightShadowData.xxxx)));
  shadows_79 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (shadows_79, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_78 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_94;
  highp vec3 i_95;
  i_95 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_96;
  tmpvar_96 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_95 - (2.0 * (dot (norm_23, i_95) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_3 + (main_24.w * tmpvar_96));
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 458
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 462
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 467
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 471
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 475
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 480
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 484
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 488
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 492
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 496
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 500
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 504
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 512
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 516
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 520
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 524
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 528
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 532
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_24.w * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_34;
  i_34 = -(xlv_TEXCOORD5);
  vec3 tmpvar_35;
  tmpvar_35 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_33 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_34 - (2.0 * (dot (normal_17, i_34) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_35));
  color_3.xyz = (color_3.xyz * tmpvar_35);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_33), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp float tmpvar_79;
  tmpvar_79 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_78.x = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_78.y = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_78.z = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_89;
  vec_89 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, vec_89);
  packDist_90 = tmpvar_91;
  shadowVals_78.w = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_92;
  tmpvar_92 = lessThan (shadowVals_78, vec4(tmpvar_79));
  highp vec4 tmpvar_93;
  tmpvar_93 = _LightShadowData.xxxx;
  highp float tmpvar_94;
  if (tmpvar_92.x) {
    tmpvar_94 = tmpvar_93.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_92.y) {
    tmpvar_95 = tmpvar_93.y;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_92.z) {
    tmpvar_96 = tmpvar_93.z;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_92.w) {
    tmpvar_97 = tmpvar_93.w;
  } else {
    tmpvar_97 = 1.0;
  };
  highp vec4 tmpvar_98;
  tmpvar_98.x = tmpvar_94;
  tmpvar_98.y = tmpvar_95;
  tmpvar_98.z = tmpvar_96;
  tmpvar_98.w = tmpvar_97;
  shadows_77 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_99;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_75.w * tmpvar_76);
  atten_4 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_3 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_103;
  highp vec3 i_104;
  i_104 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_105;
  tmpvar_105 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_104 - (2.0 * (dot (norm_23, i_104) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (light_3 + (main_24.w * tmpvar_105));
  light_3 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_108;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp float tmpvar_79;
  tmpvar_79 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_78.x = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_78.y = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_78.z = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_89;
  vec_89 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, vec_89);
  packDist_90 = tmpvar_91;
  shadowVals_78.w = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_92;
  tmpvar_92 = lessThan (shadowVals_78, vec4(tmpvar_79));
  highp vec4 tmpvar_93;
  tmpvar_93 = _LightShadowData.xxxx;
  highp float tmpvar_94;
  if (tmpvar_92.x) {
    tmpvar_94 = tmpvar_93.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_92.y) {
    tmpvar_95 = tmpvar_93.y;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_92.z) {
    tmpvar_96 = tmpvar_93.z;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_92.w) {
    tmpvar_97 = tmpvar_93.w;
  } else {
    tmpvar_97 = 1.0;
  };
  highp vec4 tmpvar_98;
  tmpvar_98.x = tmpvar_94;
  tmpvar_98.y = tmpvar_95;
  tmpvar_98.z = tmpvar_96;
  tmpvar_98.w = tmpvar_97;
  shadows_77 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_99;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_75.w * tmpvar_76);
  atten_4 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_3 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_103;
  highp vec3 i_104;
  i_104 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_105;
  tmpvar_105 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_104 - (2.0 * (dot (norm_23, i_104) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (light_3 + (main_24.w * tmpvar_105));
  light_3 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_108;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 476
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 454
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 458
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 488
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 492
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 496
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 500
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 512
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 516
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 520
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 524
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 528
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_26;
  shadowVals_26.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_26, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_24.w * tmpvar_25.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_35;
  i_35 = -(xlv_TEXCOORD5);
  vec3 tmpvar_36;
  tmpvar_36 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_34 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_35 - (2.0 * (dot (normal_17, i_35) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_36));
  color_3.xyz = (color_3.xyz * tmpvar_36);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  mediump vec4 shadows_78;
  highp vec4 shadowVals_79;
  highp float tmpvar_80;
  tmpvar_80 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_79.x = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_79.y = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_79.z = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_90;
  vec_90 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, vec_90);
  packDist_91 = tmpvar_92;
  shadowVals_79.w = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_93;
  tmpvar_93 = lessThan (shadowVals_79, vec4(tmpvar_80));
  highp vec4 tmpvar_94;
  tmpvar_94 = _LightShadowData.xxxx;
  highp float tmpvar_95;
  if (tmpvar_93.x) {
    tmpvar_95 = tmpvar_94.x;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_93.y) {
    tmpvar_96 = tmpvar_94.y;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_93.z) {
    tmpvar_97 = tmpvar_94.z;
  } else {
    tmpvar_97 = 1.0;
  };
  highp float tmpvar_98;
  if (tmpvar_93.w) {
    tmpvar_98 = tmpvar_94.w;
  } else {
    tmpvar_98 = 1.0;
  };
  highp vec4 tmpvar_99;
  tmpvar_99.x = tmpvar_95;
  tmpvar_99.y = tmpvar_96;
  tmpvar_99.z = tmpvar_97;
  tmpvar_99.w = tmpvar_98;
  shadows_78 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = dot (shadows_78, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_77 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_77);
  atten_4 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_103;
  tmpvar_103 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_102)), 0.0, 1.0);
  light_3 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_104;
  highp vec3 i_105;
  i_105 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_106;
  tmpvar_106 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_105 - (2.0 * (dot (norm_23, i_105) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 + (main_24.w * tmpvar_106));
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_109;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  mediump vec4 shadows_78;
  highp vec4 shadowVals_79;
  highp float tmpvar_80;
  tmpvar_80 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_79.x = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_79.y = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_79.z = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_90;
  vec_90 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, vec_90);
  packDist_91 = tmpvar_92;
  shadowVals_79.w = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_93;
  tmpvar_93 = lessThan (shadowVals_79, vec4(tmpvar_80));
  highp vec4 tmpvar_94;
  tmpvar_94 = _LightShadowData.xxxx;
  highp float tmpvar_95;
  if (tmpvar_93.x) {
    tmpvar_95 = tmpvar_94.x;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_93.y) {
    tmpvar_96 = tmpvar_94.y;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_93.z) {
    tmpvar_97 = tmpvar_94.z;
  } else {
    tmpvar_97 = 1.0;
  };
  highp float tmpvar_98;
  if (tmpvar_93.w) {
    tmpvar_98 = tmpvar_94.w;
  } else {
    tmpvar_98 = 1.0;
  };
  highp vec4 tmpvar_99;
  tmpvar_99.x = tmpvar_95;
  tmpvar_99.y = tmpvar_96;
  tmpvar_99.z = tmpvar_97;
  tmpvar_99.w = tmpvar_98;
  shadows_78 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = dot (shadows_78, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_77 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_77);
  atten_4 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_103;
  tmpvar_103 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_102)), 0.0, 1.0);
  light_3 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_104;
  highp vec3 i_105;
  i_105 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_106;
  tmpvar_106 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_105 - (2.0 * (dot (norm_23, i_105) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 + (main_24.w * tmpvar_106));
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_109;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 477
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 459
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 464
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 477
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 468
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 472
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 477
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 481
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 485
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 489
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 493
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 497
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 505
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 509
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 513
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 521
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 525
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 529
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_LightTexture0, vec2(tmpvar_73)).w;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_LightTexture0, vec2(tmpvar_73)).w;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 434
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 438
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 467
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 471
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 475
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 479
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 483
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 491
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 499
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 503
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 507
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec3 i_24;
  i_24 = -(xlv_TEXCOORD5);
  vec3 tmpvar_25;
  tmpvar_25 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_23) * 4.0), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_24 - (2.0 * (dot (normal_17, i_24) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_3.xyz = (color_3.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 50 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c13, c13
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
mul r1.xyz, r1.y, c13
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
rsq r1.y, r0.w
mul o4.xyz, r1.y, r0
add r0.w, r1.x, c14.y
frc r1.x, r0.w
add_sat o5.x, r0.w, -r1
dp4 r1.x, v0, v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_22, i_76) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_23.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_80;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp (((_LightColor0.w * NdotL_4) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_22, i_76) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 + (main_23.w * tmpvar_77));
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_80;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 440
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 435
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 440
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 444
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 448
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    #line 453
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 457
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 461
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    #line 465
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    #line 469
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 473
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 477
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 481
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 485
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 489
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = 1.0;
    #line 493
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 497
    light += (main.w * specularReflection);
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 501
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    #line 505
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c15
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  highp float tmpvar_78;
  tmpvar_78 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w);
  atten_4 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_3 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_81;
  highp vec3 i_82;
  i_82 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_83;
  tmpvar_83 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_82 - (2.0 * (dot (norm_23, i_82) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (light_3 + (main_24.w * tmpvar_83));
  light_3 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_86;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  highp float tmpvar_78;
  tmpvar_78 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w);
  atten_4 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_3 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_81;
  highp vec3 i_82;
  i_82 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_83;
  tmpvar_83 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_82 - (2.0 * (dot (norm_23, i_82) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (light_3 + (main_24.w * tmpvar_83));
  light_3 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_86;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 464
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 443
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 447
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 476
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 480
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 484
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 488
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 492
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 496
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 500
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 508
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 512
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 516
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c19.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c19.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o6.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = (texture2D (_LightTextureB0, vec2(tmpvar_73)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_74;
  tmpvar_74 = (texture2D (_LightTextureB0, vec2(tmpvar_73)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_74), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_77;
  highp vec3 i_78;
  i_78 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((tmpvar_74 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_78 - (2.0 * (dot (norm_22, i_78) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_23.w * tmpvar_79));
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_82;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_74), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 456
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 435
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 439
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 468
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 472
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 476
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 480
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 484
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 488
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 492
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 496
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 500
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 504
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 508
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c18.x
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, r1, c6
dp4 r0.y, r1, c5
dp4 r0.x, r1, c4
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c17, c17
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c17
dp3 r0.w, r0, r1
add r2.x, r0.w, c18.y
frc r2.y, r2.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.y, r0, c13
rsq r1.x, r1.x
dp4 o5.x, r0, c12
mul r0.xyz, r1.x, v0
add_sat o6.x, r2, -r2.y
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 434
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 438
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 467
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 471
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 475
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 479
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 483
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 491
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 499
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 503
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 507
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_27;
  if ((tmpvar_26.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * tmpvar_27);
  vec3 i_29;
  i_29 = -(xlv_TEXCOORD5);
  vec3 tmpvar_30;
  tmpvar_30 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_28 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_29 - (2.0 * (dot (normal_17, i_29) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_30));
  color_3.xyz = (color_3.xyz * tmpvar_30);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump float shadow_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_81;
  if ((tmpvar_80.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  shadow_79 = tmpvar_81;
  tmpvar_78 = shadow_79;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump float shadow_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_81;
  if ((tmpvar_80.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  shadow_79 = tmpvar_81;
  tmpvar_78 = shadow_79;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 450
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 454
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 484
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 488
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 492
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 496
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 500
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 508
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 516
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 520
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 524
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump float shadow_79;
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_79 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (_LightShadowData.x + (shadow_79 * (1.0 - _LightShadowData.x)));
  shadow_79 = tmpvar_81;
  tmpvar_78 = shadow_79;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 473
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 455
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 460
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 473
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 464
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 468
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 473
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 477
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 481
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 485
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 489
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 493
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 501
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 505
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 509
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 517
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 521
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 525
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24.x), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24.x), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 55 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
dp4 r1.y, c15, c15
rsq r1.y, r1.y
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r1.y, c15
mul r2.xyz, r1.w, r2
dp3 r1.x, r2, r1
add r1.w, r1.x, c16.y
mul r1.xyz, r0.xyww, c16.z
frc r0.z, r1.w
add_sat o6.x, r1.w, -r0.z
dp4 r0.z, v0, c2
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  mediump float lightShadowDataX_74;
  highp float dist_75;
  lowp float tmpvar_76;
  tmpvar_76 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = _LightShadowData.x;
  lightShadowDataX_74 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = max (float((dist_75 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_74);
  tmpvar_73 = tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_80;
  tmpvar_80 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_79)), 0.0, 1.0);
  light_3 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_81;
  highp vec3 i_82;
  i_82 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_83;
  tmpvar_83 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_82 - (2.0 * (dot (norm_22, i_82) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (light_3 + (main_23.w * tmpvar_83));
  light_3 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_86;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73.x), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73.x), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 461
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 440
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 444
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 448
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 461
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 452
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 456
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 473
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 477
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 481
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 485
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 489
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 493
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 497
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 501
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 505
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 509
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 513
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 o_7;
  vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_1 * 0.5);
  vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_7;
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_25;
  i_25 = -(xlv_TEXCOORD5);
  vec3 tmpvar_26;
  tmpvar_26 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_24 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_25 - (2.0 * (dot (normal_17, i_25) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_26));
  color_3.xyz = (color_3.xyz * tmpvar_26);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
dp3 r0.y, r3, r2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
dp4 r2.x, r1, c4
dp3 r1.x, r2, r2
rsq r1.w, r1.x
mul r2.xyz, r1.w, r2
dp4 r1.y, c19, c19
rsq r1.y, r1.y
mul r1.xyz, r1.y, c19
dp3 r1.x, r2, r1
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r0.w, r0, r0
rsq r1.y, r0.w
add r0.w, r1.x, c20.y
frc r1.z, r0.w
mul o4.xyz, r1.y, r0
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c20.z
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_8.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_2.xyz;
  tmpvar_11 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_1.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_1.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_12 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).xyz * 2.0) - 1.0);
  norm_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  mediump float lightShadowDataX_74;
  highp float dist_75;
  lowp float tmpvar_76;
  tmpvar_76 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = _LightShadowData.x;
  lightShadowDataX_74 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = max (float((dist_75 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_74);
  tmpvar_73 = tmpvar_78;
  lowp float tmpvar_79;
  tmpvar_79 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_73);
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_79), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_3 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_82;
  highp vec3 i_83;
  i_83 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_84;
  tmpvar_84 = (specularReflection_2 * (((tmpvar_79 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_83 - (2.0 * (dot (norm_22, i_83) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 + (main_23.w * tmpvar_84));
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_87;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_79), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (floor((1.01 + dot (worldNormal_3, tmpvar_9.xyz))), 0.0, 1.0);
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_14;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump vec4 detailZ_16;
  mediump vec4 detailY_17;
  mediump vec4 detailX_18;
  mediump vec2 detailnrmxy_19;
  mediump vec2 detailnrmzx_20;
  mediump vec2 detailnrmzy_21;
  mediump vec3 norm_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  lowp vec3 normal_39;
  normal_39.xy = ((texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw).wy * 2.0) - 1.0);
  normal_39.z = sqrt((1.0 - clamp (dot (normal_39.xy, normal_39.xy), 0.0, 1.0)));
  norm_22 = normal_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_19 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_21);
  detailX_18 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_20);
  detailY_17 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_19);
  detailZ_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_46;
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityDarkOverlayDetailTex, P_48);
  citydarkoverlaydetailX_14 = tmpvar_47;
  lowp vec4 tmpvar_49;
  highp vec2 P_50;
  P_50 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_49 = texture2D (_CityDarkOverlayDetailTex, P_50);
  citydarkoverlaydetailY_13 = tmpvar_49;
  lowp vec4 tmpvar_51;
  highp vec2 P_52;
  P_52 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_51 = texture2D (_CityDarkOverlayDetailTex, P_52);
  citydarkoverlaydetailZ_12 = tmpvar_51;
  lowp vec4 tmpvar_53;
  highp vec2 P_54;
  P_54 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_53 = texture2D (_CityLightOverlayDetailTex, P_54);
  citylightoverlaydetailX_11 = tmpvar_53;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityLightOverlayDetailTex, P_56);
  citylightoverlaydetailY_10 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityLightOverlayDetailTex, P_58);
  citylightoverlaydetailZ_9 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detailZ_16, detailX_18, tmpvar_59.xxxx);
  detail_8 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detail_8, detailY_17, tmpvar_59.yyyy);
  detail_8 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (main_23 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_59.xxxx);
  detail_8 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_59.yyyy);
  detail_8 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_66.xyz;
  highp vec4 tmpvar_67;
  tmpvar_67 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_59.xxxx);
  detail_8 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_59.yyyy);
  detail_8 = tmpvar_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (mix (tmpvar_63, tmpvar_69, tmpvar_69.wwww) * _Color);
  color_25.w = tmpvar_70.w;
  highp vec3 tmpvar_71;
  tmpvar_71 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (norm_22, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_72;
  lowp float tmpvar_73;
  tmpvar_73 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * tmpvar_73), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  highp vec3 i_77;
  i_77 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_78;
  tmpvar_78 = (specularReflection_2 * (((tmpvar_73 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_77 - (2.0 * (dot (norm_22, i_77) * norm_22))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_23.w * tmpvar_78));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_70.xyz + (_Albedo * light_3));
  color_25.xyz = tmpvar_81;
  color_25.xyz = (color_25.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_66.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_73), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, vec4(clamp (citydarkoverlay_6.w, 0.0, 1.0))).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 465
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 443
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 447
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 452
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 435
#line 465
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 456
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 460
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 477
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 481
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 493
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 497
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 501
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 505
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 509
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 513
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 517
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (tmpvar_24.w * tmpvar_27);
  vec3 i_29;
  i_29 = -(xlv_TEXCOORD5);
  vec3 tmpvar_30;
  tmpvar_30 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_28 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_29 - (2.0 * (dot (normal_17, i_29) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_30));
  color_3.xyz = (color_3.xyz * tmpvar_30);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_77 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_80;
  if ((tmpvar_79 < tmpvar_76)) {
    tmpvar_80 = _LightShadowData.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_75.w * tmpvar_80);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_23, i_85) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 + (main_24.w * tmpvar_86));
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_89;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  tmpvar_76 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_77 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_80;
  if ((tmpvar_79 < tmpvar_76)) {
    tmpvar_80 = _LightShadowData.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_75.w * tmpvar_80);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_23, i_85) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 + (main_24.w * tmpvar_86));
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_89;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 470
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 448
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 452
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 457
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 470
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 465
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 474
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 478
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 482
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 486
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 490
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 498
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 502
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 506
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 514
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 518
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 522
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_27;
  tmpvar_27 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_28;
  if ((tmpvar_27 < tmpvar_26)) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_24.w * tmpvar_25.w) * tmpvar_28);
  vec3 i_30;
  i_30 = -(xlv_TEXCOORD5);
  vec3 tmpvar_31;
  tmpvar_31 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_29 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_30 - (2.0 * (dot (normal_17, i_30) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_31));
  color_3.xyz = (color_3.xyz * tmpvar_31);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_29), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_78 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_81;
  if ((tmpvar_80 < tmpvar_77)) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_81);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_78 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_81;
  if ((tmpvar_80 < tmpvar_77)) {
    tmpvar_81 = _LightShadowData.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_81);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_23, i_86) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_24.w * tmpvar_87));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_90;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 471
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 449
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 453
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 483
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 487
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 491
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 495
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 499
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 507
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 511
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 515
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 519
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 523
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_26;
  vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_26.x = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_26.y = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_26.z = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_26.w = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_26, tmpvar_27.zzzz);
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_36;
  i_36 = -(xlv_TEXCOORD5);
  vec3 tmpvar_37;
  tmpvar_37 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_35), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_35 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_36 - (2.0 * (dot (normal_17, i_36) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_37));
  color_3.xyz = (color_3.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_35), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump vec4 shadows_79;
  highp vec4 shadowVals_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_82;
  P_82 = (tmpvar_81.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_80.x = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_81.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_80.y = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_81.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_80.z = tmpvar_87;
  highp vec2 P_88;
  P_88 = (tmpvar_81.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_89;
  tmpvar_89 = texture2D (_ShadowMapTexture, P_88).x;
  shadowVals_80.w = tmpvar_89;
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_80, tmpvar_81.zzzz);
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_79 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_79, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_78 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_3 = tmpvar_100;
  mediump vec3 tmpvar_101;
  tmpvar_101 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_101;
  highp vec3 i_102;
  i_102 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_103;
  tmpvar_103 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_102 - (2.0 * (dot (norm_23, i_102) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (light_3 + (main_24.w * tmpvar_103));
  light_3 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_106;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump vec4 shadows_79;
  highp vec4 shadowVals_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_82;
  P_82 = (tmpvar_81.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_80.x = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_81.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_80.y = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_81.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_80.z = tmpvar_87;
  highp vec2 P_88;
  P_88 = (tmpvar_81.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_89;
  tmpvar_89 = texture2D (_ShadowMapTexture, P_88).x;
  shadowVals_80.w = tmpvar_89;
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_80, tmpvar_81.zzzz);
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_79 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_79, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_78 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_3 = tmpvar_100;
  mediump vec3 tmpvar_101;
  tmpvar_101 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_101;
  highp vec3 i_102;
  i_102 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_103;
  tmpvar_103 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_102 - (2.0 * (dot (norm_23, i_102) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (light_3 + (main_24.w * tmpvar_103));
  light_3 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_106;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 458
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 462
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 467
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 471
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 475
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 480
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 484
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 488
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 492
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 496
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 500
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 504
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 512
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 516
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 520
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 524
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 528
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 532
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 shadows_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_24.x = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[0].xyz)).x;
  shadows_24.y = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[1].xyz)).x;
  shadows_24.z = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[2].xyz)).x;
  shadows_24.w = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_26;
  tmpvar_26 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  shadows_24 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_26, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_17, i_28) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_29));
  color_3.xyz = (color_3.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 60 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
dp4 r3.x, c21, r1
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c23.x
dp4 r2.z, r0, c10
dp4 r2.y, r0, c9
dp4 r2.x, r0, c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c21, c21
rsq r0.y, r0.y
mul r0.xyz, r0.y, c21
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c23.y
frc r2.x, r1.w
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r1.xyz, -r0, c20
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
dp4 o5.w, r0, c19
dp4 o5.z, r0, c18
dp4 o5.y, r0, c17
dp4 o5.x, r0, c16
dp4 o6.w, r0, c7
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
rsq r1.x, r1.x
dp4 o6.x, r0, c4
mul r0.xyz, r1.x, v0
rcp o1.x, r1.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_67.xyz;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26.w = tmpvar_71.w;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  lowp vec4 tmpvar_74;
  highp vec2 P_75;
  P_75 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_74 = texture2D (_LightTexture0, P_75);
  highp float tmpvar_76;
  tmpvar_76 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture2D (_LightTextureB0, vec2(tmpvar_76));
  lowp float tmpvar_78;
  mediump vec4 shadows_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_81;
  coord_81 = (tmpvar_80 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_82;
  tmpvar_82 = shadow2DEXT (_ShadowMapTexture, coord_81);
  shadows_79.x = tmpvar_82;
  highp vec3 coord_83;
  coord_83 = (tmpvar_80 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_84;
  tmpvar_84 = shadow2DEXT (_ShadowMapTexture, coord_83);
  shadows_79.y = tmpvar_84;
  highp vec3 coord_85;
  coord_85 = (tmpvar_80 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_86;
  tmpvar_86 = shadow2DEXT (_ShadowMapTexture, coord_85);
  shadows_79.z = tmpvar_86;
  highp vec3 coord_87;
  coord_87 = (tmpvar_80 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_88;
  tmpvar_88 = shadow2DEXT (_ShadowMapTexture, coord_87);
  shadows_79.w = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (_LightShadowData.xxxx + (shadows_79 * (1.0 - _LightShadowData.xxxx)));
  shadows_79 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (shadows_79, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_78 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_74.w) * tmpvar_77.w) * tmpvar_78);
  atten_4 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_94;
  highp vec3 i_95;
  i_95 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_96;
  tmpvar_96 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_95 - (2.0 * (dot (norm_23, i_95) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_3 + (main_24.w * tmpvar_96));
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 458
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 462
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 467
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 480
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 471
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 475
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 480
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 484
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 488
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 492
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 496
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 500
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 504
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 512
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 516
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 520
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 524
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 528
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 532
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_24.w * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_34;
  i_34 = -(xlv_TEXCOORD5);
  vec3 tmpvar_35;
  tmpvar_35 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_33 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_34 - (2.0 * (dot (normal_17, i_34) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_35));
  color_3.xyz = (color_3.xyz * tmpvar_35);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_33), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp float tmpvar_79;
  tmpvar_79 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_78.x = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_78.y = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_78.z = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_89;
  vec_89 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, vec_89);
  packDist_90 = tmpvar_91;
  shadowVals_78.w = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_92;
  tmpvar_92 = lessThan (shadowVals_78, vec4(tmpvar_79));
  highp vec4 tmpvar_93;
  tmpvar_93 = _LightShadowData.xxxx;
  highp float tmpvar_94;
  if (tmpvar_92.x) {
    tmpvar_94 = tmpvar_93.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_92.y) {
    tmpvar_95 = tmpvar_93.y;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_92.z) {
    tmpvar_96 = tmpvar_93.z;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_92.w) {
    tmpvar_97 = tmpvar_93.w;
  } else {
    tmpvar_97 = 1.0;
  };
  highp vec4 tmpvar_98;
  tmpvar_98.x = tmpvar_94;
  tmpvar_98.y = tmpvar_95;
  tmpvar_98.z = tmpvar_96;
  tmpvar_98.w = tmpvar_97;
  shadows_77 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_99;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_75.w * tmpvar_76);
  atten_4 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_3 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_103;
  highp vec3 i_104;
  i_104 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_105;
  tmpvar_105 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_104 - (2.0 * (dot (norm_23, i_104) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (light_3 + (main_24.w * tmpvar_105));
  light_3 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_108;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTexture0, vec2(tmpvar_74));
  highp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp float tmpvar_79;
  tmpvar_79 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_78.x = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_78.y = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_86;
  vec_86 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_87;
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_ShadowMapTexture, vec_86);
  packDist_87 = tmpvar_88;
  shadowVals_78.z = dot (packDist_87, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_89;
  vec_89 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, vec_89);
  packDist_90 = tmpvar_91;
  shadowVals_78.w = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_92;
  tmpvar_92 = lessThan (shadowVals_78, vec4(tmpvar_79));
  highp vec4 tmpvar_93;
  tmpvar_93 = _LightShadowData.xxxx;
  highp float tmpvar_94;
  if (tmpvar_92.x) {
    tmpvar_94 = tmpvar_93.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_92.y) {
    tmpvar_95 = tmpvar_93.y;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_92.z) {
    tmpvar_96 = tmpvar_93.z;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_92.w) {
    tmpvar_97 = tmpvar_93.w;
  } else {
    tmpvar_97 = 1.0;
  };
  highp vec4 tmpvar_98;
  tmpvar_98.x = tmpvar_94;
  tmpvar_98.y = tmpvar_95;
  tmpvar_98.z = tmpvar_96;
  tmpvar_98.w = tmpvar_97;
  shadows_77 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_99;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_75.w * tmpvar_76);
  atten_4 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_3 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_103;
  highp vec3 i_104;
  i_104 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_105;
  tmpvar_105 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_104 - (2.0 * (dot (norm_23, i_104) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (light_3 + (main_24.w * tmpvar_105));
  light_3 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_108;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 476
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 454
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 458
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 488
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 492
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 496
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 500
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 512
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 516
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 520
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 524
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 528
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 normal_17;
  normal_17.xy = ((texture2DGradARB (_BumpMap, uv_2, tmpvar_15.xy, tmpvar_15.zw).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD2.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (texture2D (_DetailTex, (xlv_TEXCOORD2.xy * _DetailScale)), texture2D (_DetailTex, (xlv_TEXCOORD2.zy * _DetailScale)), tmpvar_19.xxxx), texture2D (_DetailTex, (xlv_TEXCOORD2.zx * _DetailScale)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = dot (normal_17, xlv_TEXCOORD5);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_26;
  shadowVals_26.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_26, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_24.w * tmpvar_25.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_35;
  i_35 = -(xlv_TEXCOORD5);
  vec3 tmpvar_36;
  tmpvar_36 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_23)), 0.0, 1.0)) * (((tmpvar_34 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_35 - (2.0 * (dot (normal_17, i_35) * normal_17))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))) * xlv_TEXCOORD8);
  color_3.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_36));
  color_3.xyz = (color_3.xyz * tmpvar_36);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, vec4(clamp (citydarkoverlay_1.w, 0.0, 1.0))).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 1.00976563, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0.xyz, v1
mov r0.w, c20.x
dp4 r2.z, r0, c6
dp4 r2.y, r0, c5
dp4 r2.x, r0, c4
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
mul r2.xyz, r0.w, r2
dp3 r0.x, r2, r0
mul o4.xyz, r1.w, r1
add r1.w, r0.x, c20.y
frc r2.x, r1.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
add_sat o7.x, r1.w, -r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o5.z, r0, c14
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
rcp o1.x, r1.w
mov o3.xyz, -r1
add o6.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 tmpvar_40;
  tmpvar_40 = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).xyz * 2.0) - 1.0);
  norm_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  mediump vec4 shadows_78;
  highp vec4 shadowVals_79;
  highp float tmpvar_80;
  tmpvar_80 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_79.x = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_79.y = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_79.z = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_90;
  vec_90 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, vec_90);
  packDist_91 = tmpvar_92;
  shadowVals_79.w = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_93;
  tmpvar_93 = lessThan (shadowVals_79, vec4(tmpvar_80));
  highp vec4 tmpvar_94;
  tmpvar_94 = _LightShadowData.xxxx;
  highp float tmpvar_95;
  if (tmpvar_93.x) {
    tmpvar_95 = tmpvar_94.x;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_93.y) {
    tmpvar_96 = tmpvar_94.y;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_93.z) {
    tmpvar_97 = tmpvar_94.z;
  } else {
    tmpvar_97 = 1.0;
  };
  highp float tmpvar_98;
  if (tmpvar_93.w) {
    tmpvar_98 = tmpvar_94.w;
  } else {
    tmpvar_98 = 1.0;
  };
  highp vec4 tmpvar_99;
  tmpvar_99.x = tmpvar_95;
  tmpvar_99.y = tmpvar_96;
  tmpvar_99.z = tmpvar_97;
  tmpvar_99.w = tmpvar_98;
  shadows_78 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = dot (shadows_78, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_77 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_77);
  atten_4 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_103;
  tmpvar_103 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_102)), 0.0, 1.0);
  light_3 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_104;
  highp vec3 i_105;
  i_105 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_106;
  tmpvar_106 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_105 - (2.0 * (dot (norm_23, i_105) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 + (main_24.w * tmpvar_106));
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_109;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_Object2World * tmpvar_5).xyz);
  worldNormal_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_2.xyz;
  tmpvar_8 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_9;
  tmpvar_9[0].x = tmpvar_7.x;
  tmpvar_9[0].y = tmpvar_8.x;
  tmpvar_9[0].z = tmpvar_1.x;
  tmpvar_9[1].x = tmpvar_7.y;
  tmpvar_9[1].y = tmpvar_8.y;
  tmpvar_9[1].z = tmpvar_1.y;
  tmpvar_9[2].x = tmpvar_7.z;
  tmpvar_9[2].y = tmpvar_8.z;
  tmpvar_9[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_9 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = clamp (floor((1.01 + dot (worldNormal_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump vec4 detailZ_17;
  mediump vec4 detailY_18;
  mediump vec4 detailX_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec3 norm_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  lowp vec3 normal_40;
  normal_40.xy = ((texture2DGradEXT (_BumpMap, uv_25, tmpvar_38.xy, tmpvar_38.zw).wy * 2.0) - 1.0);
  normal_40.z = sqrt((1.0 - clamp (dot (normal_40.xy, normal_40.xy), 0.0, 1.0)));
  norm_23 = normal_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD2.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD2.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD2.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzy_22);
  detailX_19 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmzx_21);
  detailY_18 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_20);
  detailZ_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_47;
  lowp vec4 tmpvar_48;
  highp vec2 P_49;
  P_49 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_48 = texture2D (_CityDarkOverlayDetailTex, P_49);
  citydarkoverlaydetailX_15 = tmpvar_48;
  lowp vec4 tmpvar_50;
  highp vec2 P_51;
  P_51 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_50 = texture2D (_CityDarkOverlayDetailTex, P_51);
  citydarkoverlaydetailY_14 = tmpvar_50;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_52 = texture2D (_CityDarkOverlayDetailTex, P_53);
  citydarkoverlaydetailZ_13 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = (xlv_TEXCOORD2.zy * _CityOverlayDetailScale);
  tmpvar_54 = texture2D (_CityLightOverlayDetailTex, P_55);
  citylightoverlaydetailX_12 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD2.zx * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityLightOverlayDetailTex, P_57);
  citylightoverlaydetailY_11 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD2.xy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityLightOverlayDetailTex, P_59);
  citylightoverlaydetailZ_10 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = abs(xlv_TEXCOORD2);
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (detailZ_17, detailX_19, tmpvar_60.xxxx);
  detail_9 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = mix (detail_9, detailY_18, tmpvar_60.yyyy);
  detail_9 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_60.xxxx);
  detail_9 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_60.yyyy);
  detail_9 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_60.xxxx);
  detail_9 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_60.yyyy);
  detail_9 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_71;
  tmpvar_71 = (mix (tmpvar_64, tmpvar_70, tmpvar_70.wwww) * _Color);
  color_26 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (norm_23, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_77;
  mediump vec4 shadows_78;
  highp vec4 shadowVals_79;
  highp float tmpvar_80;
  tmpvar_80 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_79.x = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_79.y = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_79.z = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_90;
  vec_90 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, vec_90);
  packDist_91 = tmpvar_92;
  shadowVals_79.w = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_93;
  tmpvar_93 = lessThan (shadowVals_79, vec4(tmpvar_80));
  highp vec4 tmpvar_94;
  tmpvar_94 = _LightShadowData.xxxx;
  highp float tmpvar_95;
  if (tmpvar_93.x) {
    tmpvar_95 = tmpvar_94.x;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_93.y) {
    tmpvar_96 = tmpvar_94.y;
  } else {
    tmpvar_96 = 1.0;
  };
  highp float tmpvar_97;
  if (tmpvar_93.z) {
    tmpvar_97 = tmpvar_94.z;
  } else {
    tmpvar_97 = 1.0;
  };
  highp float tmpvar_98;
  if (tmpvar_93.w) {
    tmpvar_98 = tmpvar_94.w;
  } else {
    tmpvar_98 = 1.0;
  };
  highp vec4 tmpvar_99;
  tmpvar_99.x = tmpvar_95;
  tmpvar_99.y = tmpvar_96;
  tmpvar_99.z = tmpvar_97;
  tmpvar_99.w = tmpvar_98;
  shadows_78 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = dot (shadows_78, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_77 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = ((tmpvar_75.w * tmpvar_76.w) * tmpvar_77);
  atten_4 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = clamp ((((_LightColor0.w * NdotL_5) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_103;
  tmpvar_103 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_102)), 0.0, 1.0);
  light_3 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_104;
  highp vec3 i_105;
  i_105 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_106;
  tmpvar_106 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_105 - (2.0 * (dot (norm_23, i_105) * norm_23))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_3 + (main_24.w * tmpvar_106));
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_71.xyz + (_Albedo * light_3));
  color_26.xyz = tmpvar_109;
  color_26.xyz = (color_26.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_67.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, vec4(clamp (citydarkoverlay_7.w, 0.0, 1.0))).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 477
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.terminator = xll_saturate_f(floor((1.01 + dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 459
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 464
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 477
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 468
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 472
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 477
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 481
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 485
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    #line 489
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    #line 493
    mediump vec4 detailX = texture( _DetailTex, detailnrmzy);
    mediump vec4 detailY = texture( _DetailTex, detailnrmzx);
    mediump vec4 detailZ = texture( _DetailTex, detailnrmxy);
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 497
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 505
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 509
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 513
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 521
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    light *= IN.terminator;
    #line 525
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 529
    color = mix( color, citydarkoverlay, vec4( xll_saturate_f(citydarkoverlay.w)));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 109 to 152, TEX: 9 to 24
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 111 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsx r2.w, r0.y
dsy r2.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c13.x
mul r2.x, r0.y, c13
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
texldd r2, r3, s0, r2.zwzw, r2
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
mov r0.z, r0.x
dp3_pp r0.y, r1, v3
add_pp r0.w, r0.y, c9.y
dp3 r0.x, v4, v4
texld r0.x, r0.x, s3
mul r1.xyz, r0.x, c1
mul r1.xyz, r1, c2
mul_pp r0.y, r0, c1.w
mul_pp r0.y, r0, r0.x
mul r1.xyz, r1, r0.z
frc_pp r1.w, r0
add_pp_sat r0.z, r0.w, -r1.w
mul r1.xyz, r0.z, r1
mul r1.xyz, r2.w, r1
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
add_pp r4.xyz, r0, r1
mul r1.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r3.z, r0, r1
mul r3.xy, v2.zxzw, c5.x
texld r1.xyz, r3, s2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r3.w, r1, r0
add_pp r1.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r1, r0
mul_pp r3.xyz, r4, v5.x
mul r1.xyz, r3, c8.x
mul_pp r0.xyz, r2, r0
mad_pp r0.xyz, r0, c3, r1
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 109 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
dsx r2.xy, v2
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
mul r2.xy, r2, r2
add r0.w, -r0.z, c12
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r3.y, r0.x, c11.x
mul r0.y, r0.w, c11.x
dsx r0.w, r0.y
add r0.x, r2, r2.y
dsy r1.xy, v2
mul r1.xy, r1, r1
add r0.z, r1.x, r1.y
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.x, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1, c13
dsy r0.y, r0
texldd r2.yw, r3, s1, r0.zwzw, r0
mad_pp r4.xy, r2.wyzw, c13.z, c13.w
mul_pp r1.xy, r4, r4
add_pp_sat r1.x, r1, r1.y
add_pp r1.x, -r1, c9.y
rsq_pp r1.x, r1.x
rcp_pp r4.z, r1.x
dp3 r1.x, r4, -v3
mul r2.xyz, r4, r1.x
mad r2.xyz, -r2, c10.z, -v3
dp3_sat r1.x, r2, v1
pow r2, r1.x, c4.x
dp3_pp r1.x, r4, v3
add_pp r2.w, r1.x, c9.y
mov r3.z, r2.x
mov r2.xyz, c1
frc_pp r1.y, r2.w
mul r2.xyz, c2, r2
mul_pp r1.x, r1, c1.w
texldd r0, r3, s0, r0.zwzw, r0
mul r2.xyz, r2, r3.z
add_pp_sat r1.y, r2.w, -r1
mul r2.xyz, r1.y, r2
mul r3.xyz, r0.w, r2
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.x, r1, c14
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c6.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v4.x
mul r2.xyz, r1, c8.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 116 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c10.z, r1
mad r0.z, -r0.w, c10, r0
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c13.x
mul r1.x, r0.y, c13
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c9
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c4.x
mov r2.w, r0.x
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c13.y
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.y, -v4.z, c9.x, c9
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c1.w
mul_pp r1.w, r2.x, r0
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.w, r1, c14.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c5.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v5.x
mul r2.xyz, r3, c8.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 112 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c10.z, r1
mad r0.z, -r0.w, c10, r0
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c13.x
mul r1.x, r0.y, c13
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c9
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c4.x
mov r2.w, r0.x
dp3 r0.x, v4, v4
texld r0.x, r0.x, s3
texld r0.w, v4, s4
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c1.w
mul_pp r1.w, r2.x, r0
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.w, r1, c14.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c5.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v5.x
mul r2.xyz, r3, c8.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 110 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
dsx r2.xy, v2
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
mul r2.xy, r2, r2
add r0.w, -r0.z, c12
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r3.y, r0.x, c11.x
mul r0.y, r0.w, c11.x
dsx r0.w, r0.y
add r0.x, r2, r2.y
dsy r1.xy, v2
mul r1.xy, r1, r1
add r0.z, r1.x, r1.y
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.x, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1, c13
dsy r0.y, r0
texldd r2.yw, r3, s1, r0.zwzw, r0
mad_pp r2.xy, r2.wyzw, c13.z, c13.w
mul_pp r1.xy, r2, r2
add_pp_sat r1.x, r1, r1.y
add_pp r1.x, -r1, c9.y
rsq_pp r1.x, r1.x
rcp_pp r2.z, r1.x
dp3 r1.x, r2, -v3
mul r4.xyz, r2, r1.x
mad r4.xyz, -r4, c10.z, -v3
dp3_sat r1.x, r4, v1
pow r4, r1.x, c4.x
dp3_pp r1.x, r2, v3
add_pp r3.z, r1.x, c9.y
texld r2.w, v4, s3
frc_pp r1.y, r3.z
mul r2.xyz, r2.w, c1
mul_pp r1.x, r1, c1.w
mul_pp r1.x, r1, r2.w
texldd r0, r3, s0, r0.zwzw, r0
add_pp_sat r1.y, r3.z, -r1
mov r3.w, r4.x
mul r2.xyz, r2, c2
mul r2.xyz, r2, r3.w
mul r2.xyz, r1.y, r2
mul r3.xyz, r0.w, r2
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.x, r1, c14
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c6.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v5.x
mul r2.xyz, r1, c8.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 121 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
mad r0.x, r0, r0.y, c11.y
abs r0.y, v2
add r0.w, -r0.y, c10.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c10, c10.w
mad r0.z, r0, r0.y, c11.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c11
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c10.x, c10
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c11.z, r1
mad r0.z, -r0.w, c11, r0
mad r0.w, r0.x, c11, r1.x
mad r0.x, r0.y, c11.w, r0.z
mul r0.y, r0.w, c12.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c12.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c10.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c10
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c5.x
mov r2.w, r0.x
texldp r0.x, v5, s5
rcp r0.y, v5.w
mad r0.y, -v5.z, r0, r0.x
mov r0.z, c1.x
cmp r0.y, r0, c10, r0.z
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c14.y
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.z, -v4, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c2.w
mul_pp r1.w, r2.x, r0
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c6.x
mul r0.xy, v2.zyzw, c6.x
mul r0.w, v0.x, c7.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c6.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c9.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c4, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 120 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
mad r0.x, r0, r0.y, c11.y
abs r0.y, v2
add r0.w, -r0.y, c10.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c10, c10.w
mad r0.z, r0, r0.y, c11.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c11
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c10.x, c10
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c11.z, r1
mad r0.z, -r0.w, c11, r0
mad r0.w, r0.x, c11, r1.x
mad r0.x, r0.y, c11.w, r0.z
mul r0.y, r0.w, c12.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c12.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c10.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c10
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c5.x
mov r2.w, r0.x
mov r0.x, c1
rcp r0.z, v4.w
mad r4.xy, v4, r0.z, c14.y
add r0.y, c10, -r0.x
texldp r0.x, v5, s5
mad r0.y, r0.x, r0, c1.x
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.z, -v4, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c2.w
mul_pp r1.w, r2.x, r0
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c6.x
mul r0.xy, v2.zyzw, c6.x
mul r0.w, v0.x, c7.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c6.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c9.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c4, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 110 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
dsx r2.xy, v2
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
mul r2.xy, r2, r2
add r0.w, -r0.z, c12
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r3.y, r0.x, c11.x
mul r0.y, r0.w, c11.x
dsx r0.w, r0.y
add r0.x, r2, r2.y
dsy r1.xy, v2
mul r1.xy, r1, r1
add r0.z, r1.x, r1.y
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.x, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1, c13
dsy r0.y, r0
texldd r2.yw, r3, s1, r0.zwzw, r0
mad_pp r2.xy, r2.wyzw, c13.z, c13.w
mul_pp r1.xy, r2, r2
add_pp_sat r1.x, r1, r1.y
add_pp r1.x, -r1, c9.y
rsq_pp r1.x, r1.x
rcp_pp r2.z, r1.x
dp3 r1.x, r2, -v3
mul r4.xyz, r2, r1.x
dp3_pp r1.y, r2, v3
add_pp r3.z, r1.y, c9.y
mad r4.xyz, -r4, c10.z, -v3
dp3_sat r1.x, r4, v1
pow r4, r1.x, c4.x
texldp r1.x, v4, s3
mul r2.xyz, r1.x, c1
frc_pp r2.w, r3.z
mul_pp r1.y, r1, c1.w
mul_pp r1.x, r1.y, r1
texldd r0, r3, s0, r0.zwzw, r0
mov r3.w, r4.x
mul r2.xyz, r2, c2
add_pp_sat r2.w, r3.z, -r2
mul r2.xyz, r2, r3.w
mul r2.xyz, r2.w, r2
mul r3.xyz, r0.w, r2
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.x, r1, c14
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c6.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v5.x
mul r2.xyz, r1, c8.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 111 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsy r2.y, r0
dsx r2.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c13.x
mul r2.x, r0.y, c13
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
dp3_pp r1.x, r1, v3
add_pp r1.y, r1.x, c9
frc_pp r1.z, r1.y
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
mov r1.w, r0.x
mul_pp r4.x, r1, c1.w
texldp r0.x, v5, s3
texld r0.w, v4, s4
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r1.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
texldd r1, r3, s0, r2.zwzw, r2
mul r0.xyz, r1.w, r0
mul_pp r1.w, r4.x, r0
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.w, r1, c14.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c5.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c8.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r0.w, -r0.z, c14
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
mad r0.x, r0, r0.y, c12.y
abs r0.y, v2
add r0.w, -r0.y, c11.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c11, c11.w
mad r0.z, r0, r0.y, c12.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c12
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c12, r0
mad r1.x, -r1.y, c12.z, r1
mad r0.w, r0.x, c12, r1.x
mad r0.x, r0.y, c12.w, r0.z
mul r0.y, r0.w, c13.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c13.x
dsy r2.y, r0
dsx r2.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c15.x
mul r2.x, r0.y, c15
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
dp3_pp r1.x, r1, v3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c6.x
mov r1.w, r0.x
dp3 r0.x, v5, v5
rsq r1.y, r0.x
texld r0, v5, s3
dp4 r0.y, r0, c16
rcp r1.y, r1.y
mul r0.x, r1.y, c1.w
add_pp r1.y, r1.x, c11
frc_pp r1.z, r1.y
mad r0.y, -r0.x, c17.x, r0
mov r0.z, c2.x
dp3 r0.x, v4, v4
mul_pp r4.x, r1, c3.w
cmp r0.y, r0, c11, r0.z
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r1.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
texldd r1, r3, s0, r2.zwzw, r2
mul r0.xyz, r1.w, r0
mul_pp r1.w, r4.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c17.y
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c7.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 121 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r0.w, -r0.z, c14
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
mad r0.x, r0, r0.y, c12.y
abs r0.y, v2
add r0.w, -r0.y, c11.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c11, c11.w
mad r0.z, r0, r0.y, c12.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c12
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c11.x, c11
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c12.z, r1
mad r0.z, -r0.w, c12, r0
mad r0.w, r0.x, c12, r1.x
mad r0.x, r0.y, c12.w, r0.z
mul r0.y, r0.w, c13.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c13.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c15.x
mul r1.x, r0.y, c15
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c6.x
mov r2.w, r0.x
texld r0, v5, s3
dp4 r0.y, r0, c16
dp3 r2.y, v5, v5
rsq r2.y, r2.y
rcp r0.x, r2.y
add_pp r2.y, r2.x, c11
frc_pp r2.z, r2.y
mul r0.x, r0, c1.w
mad r0.x, -r0, c17, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c11, r0.z
dp3 r0.x, v4, v4
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c3.w
mul_pp r1.w, r2.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c17.y
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c7.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
rcp r4.z, v5.w
abs r0.x, v2.z
abs r2.zw, v2.xyxy
max r0.y, r2.z, r0.x
rcp r0.z, r0.y
min r0.y, r2.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c16.y, c16.z
mad r0.w, r0, r0.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.w, r0, r0.z, c17.y
mad r0.z, r0.w, r0, c17
mul r0.z, r0, r0.y
add r0.w, -r0.z, c17
add r0.y, r2.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c15.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r2.x, r0.y, c18, c18.y
add r0.z, -r0.x, c14.y
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0.x, r0, c15.x
mad r0.x, r0, r0.y, c15.y
abs r0.y, v2
add r0.w, -r0.y, c14.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c14, c14.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c14, c14.w
mad r0.z, r0, r0.y, c15.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c15
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c14.x, c14
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c15.z, r1
mad r0.z, -r0.w, c15, r0
mad r0.w, r0.x, c15, r1.x
mad r0.x, r0.y, c15.w, r0.z
mul r0.y, r0.w, c16.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r2.y, r0.x, c16.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c18.x
mul r1.x, r0.y, c18
texldd r0.yw, r2, s1, r1.zwzw, r1
mad_pp r3.xy, r0.wyzw, c18.z, c18.w
mul_pp r0.xy, r3, r3
texldd r1, r2, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c14.y
rsq_pp r0.x, r0.x
rcp_pp r3.z, r0.x
dp3 r0.x, r3, -v3
mul r0.xyz, r3, r0.x
dp3_pp r3.x, r3, v3
mad r0.xyz, -r0, c15.z, -v3
dp3_sat r3.w, r0, v1
pow r0, r3.w, c9.x
mov r3.w, r0.x
mad r0.xy, v5, r4.z, c5
texld r0.x, r0, s5
mad r4.xy, v5, r4.z, c4
mov r0.w, r0.x
texld r0.x, r4, s5
mad r4.xy, v5, r4.z, c3
mov r0.z, r0.x
texld r0.x, r4, s5
mad r4.xy, v5, r4.z, c2
mov r0.y, r0.x
texld r0.x, r4, s5
mov r3.y, c1.x
mad r0, -v5.z, r4.z, r0
cmp r0, r0, c14.y, r3.y
dp4_pp r0.y, r0, c19.x
rcp r3.y, v4.w
mad r4.xy, v4, r3.y, c18.y
add_pp r3.y, r3.x, c14
frc_pp r3.z, r3.y
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.z, -v4, c14.x, c14.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
add_pp_sat r3.y, r3, -r3.z
mul r0.xyz, r0, r3.w
mul r0.xyz, r3.y, r0
mul r0.xyz, r1.w, r0
mul_pp r3.x, r3, c6.w
mul_pp r1.w, r3.x, r0
mov r0.w, c12.x
add r3.xyz, c6, r0.w
mul_pp_sat r1.w, r1, c19.y
mad_sat r3.xyz, r3, r1.w, c0
add_pp r4.xyz, r3, r0
mul r2.xy, v2, c10.x
texld r3.xyz, r2, s2
mul r0.xy, v2.zyzw, c10.x
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r2.z, r0, r3
mul r2.xy, v2.zxzw, c10.x
texld r2.xyz, r2, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r2.w, r2, r0
mul r0.w, v0.x, c11.x
add_pp r2.xyz, -r0, c14.y
mul_sat r0.w, r0, c15.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c13.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c8, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
dsx r2.zw, v2.xyxy
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c16.y, c16.z
mad r0.w, r0, r0.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.w, r0, r0.z, c17.y
mad r0.z, r0.w, r0, c17
mul r0.z, r0, r0.y
mul r2.zw, r2, r2
add r0.w, -r0.z, c17
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c15.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r0.z, r0.y, c18.x, c18.y
add r0.w, -r0.x, c14.y
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0.x, r0, c15.x
rsq r0.w, r0.w
mad r0.x, r0, r0.y, c15.y
rcp r0.w, r0.w
mul r1.y, r0.x, r0.w
abs r0.x, v2.y
cmp r1.x, v2.z, c14, c14.y
mul r2.x, r1, r1.y
mad r1.y, -r2.x, c15.z, r1
add r0.w, -r0.x, c14.y
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0, r0.x, c15.x
rsq r0.w, r0.w
dsy r2.xy, v2
mul r2.xy, r2, r2
mad r0.x, r0.y, r0, c15.y
rcp r0.w, r0.w
mul r0.y, r0.x, r0.w
cmp r0.x, v2.y, c14, c14.y
mul r0.w, r0.x, r0.y
mad r0.y, -r0.w, c15.z, r0
mad r0.w, r1.x, c15, r1.y
mad r0.x, r0, c15.w, r0.y
mul r0.y, r0.w, c16.x
dsx r1.y, r0
mul r0.w, r0.x, c16.x
add r0.x, r2.z, r2.w
add r1.x, r2, r2.y
rsq r1.x, r1.x
rsq r0.x, r0.x
rcp r2.x, r1.x
rcp r0.x, r0.x
mul r1.x, r0, c18
mul r0.x, r2, c18
dsy r0.y, r0
texldd r2.yw, r0.zwzw, s1, r1, r0
mad_pp r4.xy, r2.wyzw, c18.z, c18.w
mul_pp r2.xy, r4, r4
add_pp_sat r2.x, r2, r2.y
add_pp r2.x, -r2, c14.y
rsq_pp r2.x, r2.x
rcp_pp r4.z, r2.x
dp3 r2.x, r4, -v3
mul r2.xyz, r4, r2.x
mad r2.xyz, -r2, c15.z, -v3
dp3_sat r2.x, r2, v1
pow r3, r2.x, c9.x
rcp r3.y, v5.w
mad r2.xyz, v5, r3.y, c5
mov r3.w, r3.x
dp3_pp r3.x, r4, v3
mad r4.xyz, v5, r3.y, c4
texld r2.x, r2, s5
mov_pp r2.w, r2.x
mad r2.xyz, v5, r3.y, c3
texld r2.x, r2, s5
texld r4.x, r4, s5
mov_pp r2.z, r4.x
mov_pp r2.y, r2.x
texldd r0, r0.zwzw, s0, r1, r0
mad r4.xyz, v5, r3.y, c2
mov r2.x, c1
add r3.y, c14, -r2.x
texld r2.x, r4, s5
mad r2, r2, r3.y, c1.x
dp4_pp r2.z, r2, c19.x
rcp r3.y, v4.w
mad r4.xy, v4, r3.y, c18.y
add_pp r3.z, r3.x, c14.y
frc_pp r3.y, r3.z
dp3 r2.x, v4, v4
texld r2.w, r4, s3
cmp r2.y, -v4.z, c14.x, c14
mul_pp r2.y, r2, r2.w
texld r2.x, r2.x, s4
mul_pp r2.x, r2.y, r2
mul_pp r2.w, r2.x, r2.z
mul r2.xyz, r2.w, c6
mul r2.xyz, r2, c7
mul r2.xyz, r2, r3.w
add_pp_sat r3.y, r3.z, -r3
mul_pp r3.w, r3.x, c6
mul r2.xyz, r3.y, r2
mul r3.xyz, r0.w, r2
mov r0.w, c12.x
add r2.xyz, c6, r0.w
mul_pp r1.x, r3.w, r2.w
mul_pp_sat r1.x, r1, c19.y
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c10.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c10.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c11.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c10.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c14.y
mul_sat r0.w, r0, c15.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v6.x
mul r2.xyz, r1, c13.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c8, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 128 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r4.xyz, v5, c16.xyyw
add r0.w, -r0.z, c14
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.x, -r1.y, c12.z, r1
mad r0.z, r0.w, c12.w, r1.x
mul r0.y, r0.z, c13.x
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c13.x
dsy r2.y, r0
dsx r2.w, r0.y
dsy r0.xy, v2
mul r1.xy, r0, r0
add r0.x, r0.z, r0.w
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c15.x
mul r2.x, r0.y, c15
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
dp3_pp r5.y, r1, v3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c6.x
mov r5.x, r0
texld r0, r4, s3
dp4 r4.w, r0, c17
add r0.xyz, v5, c16.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c17
add r1.xyz, v5, c16.yyxw
texld r1, r1, s3
dp4 r4.y, r1, c17
add r0.xyz, v5, c16.x
texld r0, r0, s3
dp3 r1.x, v5, v5
dp4 r4.x, r0, c17
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c16.z, r4
mov r1.x, c2
cmp r1, r0, c11.y, r1.x
dp4_pp r0.y, r1, c16.w
add_pp r1.x, r5.y, c11.y
frc_pp r1.y, r1.x
dp3 r0.x, v4, v4
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r0, r5.x
mul r0.xyz, r1.x, r0
texldd r1, r3, s0, r2.zwzw, r2
mul r0.xyz, r1.w, r0
mul_pp r4.x, r5.y, c3.w
mul_pp r1.w, r4.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c18.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c7.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 129 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r5.zw, v2.xyxy
max r0.y, r5.z, r0.x
rcp r0.z, r0.y
min r0.y, r5.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r0.w, -r0.z, c14
add r0.y, r5.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.x, -r1.y, c12.z, r1
mad r0.z, r0.w, c12.w, r1.x
mul r0.y, r0.z, c13.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r4.y, r0
mul r5.y, r0.x, c13.x
dsx r4.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.x, r0.y, c15
mul r4.z, r0.x, c15.x
texldd r0.yw, r5, s1, r4.zwzw, r4
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r1.x, r0, v1
pow r0, r1.x, c6.x
mov r2.w, r0.x
add r1.xyz, v5, c16.xyyw
texld r1, r1, s3
dp4 r3.w, r1, c17
add r0.xyz, v5, c16.yxyw
texld r0, r0, s3
dp4 r3.z, r0, c17
add r1.xyz, v5, c16.yyxw
texld r1, r1, s3
dp4 r3.y, r1, c17
add r0.xyz, v5, c16.x
texld r0, r0, s3
dp3 r1.x, v5, v5
dp4 r3.x, r0, c17
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c16.z, r3
mov r1.x, c2
cmp r0, r0, c11.y, r1.x
dp3_pp r1.x, r2, v3
dp4_pp r0.y, r0, c16.w
add_pp r1.y, r1.x, c11
frc_pp r1.z, r1.y
dp3 r0.x, v4, v4
mul_pp r2.x, r1, c3.w
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r1.y, r0
texldd r1, r5, s0, r4.zwzw, r4
mul r0.xyz, r1.w, r0
mul_pp r1.w, r2.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c18.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r3.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r5.z, r0, r2
mul r4.xy, v2.zxzw, c7.x
texld r2.xyz, r4, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r5.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r3, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 111 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsx r2.w, r0.y
dsy r2.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c13.x
mul r2.x, r0.y, c13
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
texldd r2, r3, s0, r2.zwzw, r2
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
mov r0.z, r0.x
dp3_pp r0.y, r1, v3
add_pp r0.w, r0.y, c9.y
dp3 r0.x, v4, v4
texld r0.x, r0.x, s3
mul r1.xyz, r0.x, c1
mul r1.xyz, r1, c2
mul_pp r0.y, r0, c1.w
mul_pp r0.y, r0, r0.x
mul r1.xyz, r1, r0.z
frc_pp r1.w, r0
add_pp_sat r0.z, r0.w, -r1.w
mul r1.xyz, r0.z, r1
mul r1.xyz, r2.w, r1
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
add_pp r4.xyz, r0, r1
mul r1.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r3.z, r0, r1
mul r3.xy, v2.zxzw, c5.x
texld r1.xyz, r3, s2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r3.w, r1, r0
add_pp r1.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r1, r0
mul_pp r3.xyz, r4, v5.x
mul r1.xyz, r3, c8.x
mul_pp r0.xyz, r2, r0
mad_pp r0.xyz, r0, c3, r1
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 109 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
dsx r2.xy, v2
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
mul r2.xy, r2, r2
add r0.w, -r0.z, c12
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r3.y, r0.x, c11.x
mul r0.y, r0.w, c11.x
dsx r0.w, r0.y
add r0.x, r2, r2.y
dsy r1.xy, v2
mul r1.xy, r1, r1
add r0.z, r1.x, r1.y
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.x, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1, c13
dsy r0.y, r0
texldd r2.yw, r3, s1, r0.zwzw, r0
mad_pp r4.xy, r2.wyzw, c13.z, c13.w
mul_pp r1.xy, r4, r4
add_pp_sat r1.x, r1, r1.y
add_pp r1.x, -r1, c9.y
rsq_pp r1.x, r1.x
rcp_pp r4.z, r1.x
dp3 r1.x, r4, -v3
mul r2.xyz, r4, r1.x
mad r2.xyz, -r2, c10.z, -v3
dp3_sat r1.x, r2, v1
pow r2, r1.x, c4.x
dp3_pp r1.x, r4, v3
add_pp r2.w, r1.x, c9.y
mov r3.z, r2.x
mov r2.xyz, c1
frc_pp r1.y, r2.w
mul r2.xyz, c2, r2
mul_pp r1.x, r1, c1.w
texldd r0, r3, s0, r0.zwzw, r0
mul r2.xyz, r2, r3.z
add_pp_sat r1.y, r2.w, -r1
mul r2.xyz, r1.y, r2
mul r3.xyz, r0.w, r2
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.x, r1, c14
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c6.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v4.x
mul r2.xyz, r1, c8.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 116 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c10.z, r1
mad r0.z, -r0.w, c10, r0
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c13.x
mul r1.x, r0.y, c13
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c9
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c4.x
mov r2.w, r0.x
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c13.y
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.y, -v4.z, c9.x, c9
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c1.w
mul_pp r1.w, r2.x, r0
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.w, r1, c14.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c5.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v5.x
mul r2.xyz, r3, c8.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 112 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c10.z, r1
mad r0.z, -r0.w, c10, r0
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c13.x
mul r1.x, r0.y, c13
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c9
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c4.x
mov r2.w, r0.x
dp3 r0.x, v4, v4
texld r0.x, r0.x, s3
texld r0.w, v4, s4
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c1.w
mul_pp r1.w, r2.x, r0
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.w, r1, c14.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c5.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v5.x
mul r2.xyz, r3, c8.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 110 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
dsx r2.xy, v2
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
mul r2.xy, r2, r2
add r0.w, -r0.z, c12
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r3.y, r0.x, c11.x
mul r0.y, r0.w, c11.x
dsx r0.w, r0.y
add r0.x, r2, r2.y
dsy r1.xy, v2
mul r1.xy, r1, r1
add r0.z, r1.x, r1.y
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.x, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1, c13
dsy r0.y, r0
texldd r2.yw, r3, s1, r0.zwzw, r0
mad_pp r2.xy, r2.wyzw, c13.z, c13.w
mul_pp r1.xy, r2, r2
add_pp_sat r1.x, r1, r1.y
add_pp r1.x, -r1, c9.y
rsq_pp r1.x, r1.x
rcp_pp r2.z, r1.x
dp3 r1.x, r2, -v3
mul r4.xyz, r2, r1.x
mad r4.xyz, -r4, c10.z, -v3
dp3_sat r1.x, r4, v1
pow r4, r1.x, c4.x
dp3_pp r1.x, r2, v3
add_pp r3.z, r1.x, c9.y
texld r2.w, v4, s3
frc_pp r1.y, r3.z
mul r2.xyz, r2.w, c1
mul_pp r1.x, r1, c1.w
mul_pp r1.x, r1, r2.w
texldd r0, r3, s0, r0.zwzw, r0
add_pp_sat r1.y, r3.z, -r1
mov r3.w, r4.x
mul r2.xyz, r2, c2
mul r2.xyz, r2, r3.w
mul r2.xyz, r1.y, r2
mul r3.xyz, r0.w, r2
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.x, r1, c14
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c6.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v5.x
mul r2.xyz, r1, c8.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 121 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
mad r0.x, r0, r0.y, c11.y
abs r0.y, v2
add r0.w, -r0.y, c10.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c10, c10.w
mad r0.z, r0, r0.y, c11.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c11
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c10.x, c10
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c11.z, r1
mad r0.z, -r0.w, c11, r0
mad r0.w, r0.x, c11, r1.x
mad r0.x, r0.y, c11.w, r0.z
mul r0.y, r0.w, c12.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c12.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c10.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c10
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c5.x
mov r2.w, r0.x
texldp r0.x, v5, s5
rcp r0.y, v5.w
mad r0.y, -v5.z, r0, r0.x
mov r0.z, c1.x
cmp r0.y, r0, c10, r0.z
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c14.y
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.z, -v4, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c2.w
mul_pp r1.w, r2.x, r0
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c6.x
mul r0.xy, v2.zyzw, c6.x
mul r0.w, v0.x, c7.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c6.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c9.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c4, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 120 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
mad r0.x, r0, r0.y, c11.y
abs r0.y, v2
add r0.w, -r0.y, c10.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c10, c10.w
mad r0.z, r0, r0.y, c11.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c11
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c10.x, c10
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c11.z, r1
mad r0.z, -r0.w, c11, r0
mad r0.w, r0.x, c11, r1.x
mad r0.x, r0.y, c11.w, r0.z
mul r0.y, r0.w, c12.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c12.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c10.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
add_pp r2.y, r2.x, c10
frc_pp r2.z, r2.y
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c5.x
mov r2.w, r0.x
mov r0.x, c1
rcp r0.z, v4.w
mad r4.xy, v4, r0.z, c14.y
add r0.y, c10, -r0.x
texldp r0.x, v5, s5
mad r0.y, r0.x, r0, c1.x
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.z, -v4, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c2.w
mul_pp r1.w, r2.x, r0
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c6.x
mul r0.xy, v2.zyzw, c6.x
mul r0.w, v0.x, c7.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c6.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c9.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c4, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 110 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
dsx r2.xy, v2
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
mul r2.xy, r2, r2
add r0.w, -r0.z, c12
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r3.y, r0.x, c11.x
mul r0.y, r0.w, c11.x
dsx r0.w, r0.y
add r0.x, r2, r2.y
dsy r1.xy, v2
mul r1.xy, r1, r1
add r0.z, r1.x, r1.y
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.x, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1, c13
dsy r0.y, r0
texldd r2.yw, r3, s1, r0.zwzw, r0
mad_pp r2.xy, r2.wyzw, c13.z, c13.w
mul_pp r1.xy, r2, r2
add_pp_sat r1.x, r1, r1.y
add_pp r1.x, -r1, c9.y
rsq_pp r1.x, r1.x
rcp_pp r2.z, r1.x
dp3 r1.x, r2, -v3
mul r4.xyz, r2, r1.x
dp3_pp r1.y, r2, v3
add_pp r3.z, r1.y, c9.y
mad r4.xyz, -r4, c10.z, -v3
dp3_sat r1.x, r4, v1
pow r4, r1.x, c4.x
texldp r1.x, v4, s3
mul r2.xyz, r1.x, c1
frc_pp r2.w, r3.z
mul_pp r1.y, r1, c1.w
mul_pp r1.x, r1.y, r1
texldd r0, r3, s0, r0.zwzw, r0
mov r3.w, r4.x
mul r2.xyz, r2, c2
add_pp_sat r2.w, r3.z, -r2
mul r2.xyz, r2, r3.w
mul r2.xyz, r2.w, r2
mul r3.xyz, r0.w, r2
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.x, r1, c14
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c6.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v5.x
mul r2.xyz, r1, c8.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 111 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c11.y, c11.z
mad r0.w, r0, r0.z, c11
mad r0.w, r0, r0.z, c12.x
mad r0.w, r0, r0.z, c12.y
mad r0.z, r0.w, r0, c12
mul r0.z, r0, r0.y
add r0.w, -r0.z, c12
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c10.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c13, c13.y
add r0.z, -r0.x, c9.y
mad r0.y, r0.x, c9.z, c9.w
mad r0.y, r0.x, r0, c10.x
mad r0.x, r0, r0.y, c10.y
abs r0.y, v2
add r0.w, -r0.y, c9.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c9, c9.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c9, c9.w
mad r0.z, r0, r0.y, c10.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c10
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c9.x, c9
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c10, r0
mad r1.x, -r1.y, c10.z, r1
mad r0.w, r0.x, c10, r1.x
mad r0.x, r0.y, c10.w, r0.z
mul r0.y, r0.w, c11.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c11.x
dsy r2.y, r0
dsx r2.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c13.x
mul r2.x, r0.y, c13
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c9.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
dp3_pp r1.x, r1, v3
add_pp r1.y, r1.x, c9
frc_pp r1.z, r1.y
mad r0.xyz, -r0, c10.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
mov r1.w, r0.x
mul_pp r4.x, r1, c1.w
texldp r0.x, v5, s3
texld r0.w, v4, s4
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r1.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
texldd r1, r3, s0, r2.zwzw, r2
mul r0.xyz, r1.w, r0
mul_pp r1.w, r4.x, r0
mov r0.w, c7.x
add r2.xyz, c1, r0.w
mul_pp_sat r1.w, r1, c14.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c5.x
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c5.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c9.y
mul_sat r0.w, r0, c10.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c8.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r0.w, -r0.z, c14
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
mad r0.x, r0, r0.y, c12.y
abs r0.y, v2
add r0.w, -r0.y, c11.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c11, c11.w
mad r0.z, r0, r0.y, c12.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c12
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c12, r0
mad r1.x, -r1.y, c12.z, r1
mad r0.w, r0.x, c12, r1.x
mad r0.x, r0.y, c12.w, r0.z
mul r0.y, r0.w, c13.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c13.x
dsy r2.y, r0
dsx r2.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c15.x
mul r2.x, r0.y, c15
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
dp3_pp r1.x, r1, v3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c6.x
mov r1.w, r0.x
dp3 r0.x, v5, v5
rsq r1.y, r0.x
texld r0, v5, s3
dp4 r0.y, r0, c16
rcp r1.y, r1.y
mul r0.x, r1.y, c1.w
add_pp r1.y, r1.x, c11
frc_pp r1.z, r1.y
mad r0.y, -r0.x, c17.x, r0
mov r0.z, c2.x
dp3 r0.x, v4, v4
mul_pp r4.x, r1, c3.w
cmp r0.y, r0, c11, r0.z
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r1.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
texldd r1, r3, s0, r2.zwzw, r2
mul r0.xyz, r1.w, r0
mul_pp r1.w, r4.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c17.y
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c7.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 121 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r0.w, -r0.z, c14
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
mad r0.x, r0, r0.y, c12.y
abs r0.y, v2
add r0.w, -r0.y, c11.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c11, c11.w
mad r0.z, r0, r0.y, c12.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c12
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c11.x, c11
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c12.z, r1
mad r0.z, -r0.w, c12, r0
mad r0.w, r0.x, c12, r1.x
mad r0.x, r0.y, c12.w, r0.z
mul r0.y, r0.w, c13.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c13.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c15.x
mul r1.x, r0.y, c15
texldd r0.yw, r3, s1, r1.zwzw, r1
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
texldd r1, r3, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r2.x, r2, v3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r2.w, r0, v1
pow r0, r2.w, c6.x
mov r2.w, r0.x
texld r0, v5, s3
dp4 r0.y, r0, c16
dp3 r2.y, v5, v5
rsq r2.y, r2.y
rcp r0.x, r2.y
add_pp r2.y, r2.x, c11
frc_pp r2.z, r2.y
mul r0.x, r0, c1.w
mad r0.x, -r0, c17, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c11, r0.z
dp3 r0.x, v4, v4
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp_sat r2.y, r2, -r2.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.y, r0
mul r0.xyz, r1.w, r0
mul_pp r2.x, r2, c3.w
mul_pp r1.w, r2.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c17.y
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c7.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
rcp r4.z, v5.w
abs r0.x, v2.z
abs r2.zw, v2.xyxy
max r0.y, r2.z, r0.x
rcp r0.z, r0.y
min r0.y, r2.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c16.y, c16.z
mad r0.w, r0, r0.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.w, r0, r0.z, c17.y
mad r0.z, r0.w, r0, c17
mul r0.z, r0, r0.y
add r0.w, -r0.z, c17
add r0.y, r2.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c15.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r2.x, r0.y, c18, c18.y
add r0.z, -r0.x, c14.y
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0.x, r0, c15.x
mad r0.x, r0, r0.y, c15.y
abs r0.y, v2
add r0.w, -r0.y, c14.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.x, r0, r0.z
cmp r0.x, v2.z, c14, c14.y
mul r1.y, r0.x, r1.x
mad r0.z, r0.y, c14, c14.w
mad r0.z, r0, r0.y, c15.x
rsq r0.w, r0.w
mad r0.y, r0.z, r0, c15
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c14.x, c14
mul r0.w, r0.y, r0.z
mad r1.x, -r1.y, c15.z, r1
mad r0.z, -r0.w, c15, r0
mad r0.w, r0.x, c15, r1.x
mad r0.x, r0.y, c15.w, r0.z
mul r0.y, r0.w, c16.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r2.y, r0.x, c16.x
dsx r1.w, r0.y
dsy r1.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, c18.x
mul r1.x, r0.y, c18
texldd r0.yw, r2, s1, r1.zwzw, r1
mad_pp r3.xy, r0.wyzw, c18.z, c18.w
mul_pp r0.xy, r3, r3
texldd r1, r2, s0, r1.zwzw, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c14.y
rsq_pp r0.x, r0.x
rcp_pp r3.z, r0.x
dp3 r0.x, r3, -v3
mul r0.xyz, r3, r0.x
dp3_pp r3.x, r3, v3
mad r0.xyz, -r0, c15.z, -v3
dp3_sat r3.w, r0, v1
pow r0, r3.w, c9.x
mov r3.w, r0.x
mad r0.xy, v5, r4.z, c5
texld r0.x, r0, s5
mad r4.xy, v5, r4.z, c4
mov r0.w, r0.x
texld r0.x, r4, s5
mad r4.xy, v5, r4.z, c3
mov r0.z, r0.x
texld r0.x, r4, s5
mad r4.xy, v5, r4.z, c2
mov r0.y, r0.x
texld r0.x, r4, s5
mov r3.y, c1.x
mad r0, -v5.z, r4.z, r0
cmp r0, r0, c14.y, r3.y
dp4_pp r0.y, r0, c19.x
rcp r3.y, v4.w
mad r4.xy, v4, r3.y, c18.y
add_pp r3.y, r3.x, c14
frc_pp r3.z, r3.y
dp3 r0.x, v4, v4
texld r0.w, r4, s3
cmp r0.z, -v4, c14.x, c14.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
add_pp_sat r3.y, r3, -r3.z
mul r0.xyz, r0, r3.w
mul r0.xyz, r3.y, r0
mul r0.xyz, r1.w, r0
mul_pp r3.x, r3, c6.w
mul_pp r1.w, r3.x, r0
mov r0.w, c12.x
add r3.xyz, c6, r0.w
mul_pp_sat r1.w, r1, c19.y
mad_sat r3.xyz, r3, r1.w, c0
add_pp r4.xyz, r3, r0
mul r2.xy, v2, c10.x
texld r3.xyz, r2, s2
mul r0.xy, v2.zyzw, c10.x
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r2.z, r0, r3
mul r2.xy, v2.zxzw, c10.x
texld r2.xyz, r2, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r2.w, r2, r0
mul r0.w, v0.x, c11.x
add_pp r2.xyz, -r0, c14.y
mul_sat r0.w, r0, c15.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c13.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c8, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
dsx r2.zw, v2.xyxy
abs r0.x, v2.z
abs r1.zw, v2.xyxy
max r0.y, r1.z, r0.x
rcp r0.z, r0.y
min r0.y, r1.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c16.y, c16.z
mad r0.w, r0, r0.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.w, r0, r0.z, c17.y
mad r0.z, r0.w, r0, c17
mul r0.z, r0, r0.y
mul r2.zw, r2, r2
add r0.w, -r0.z, c17
add r0.y, r1.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c15.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r0.z, r0.y, c18.x, c18.y
add r0.w, -r0.x, c14.y
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0.x, r0, c15.x
rsq r0.w, r0.w
mad r0.x, r0, r0.y, c15.y
rcp r0.w, r0.w
mul r1.y, r0.x, r0.w
abs r0.x, v2.y
cmp r1.x, v2.z, c14, c14.y
mul r2.x, r1, r1.y
mad r1.y, -r2.x, c15.z, r1
add r0.w, -r0.x, c14.y
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0, r0.x, c15.x
rsq r0.w, r0.w
dsy r2.xy, v2
mul r2.xy, r2, r2
mad r0.x, r0.y, r0, c15.y
rcp r0.w, r0.w
mul r0.y, r0.x, r0.w
cmp r0.x, v2.y, c14, c14.y
mul r0.w, r0.x, r0.y
mad r0.y, -r0.w, c15.z, r0
mad r0.w, r1.x, c15, r1.y
mad r0.x, r0, c15.w, r0.y
mul r0.y, r0.w, c16.x
dsx r1.y, r0
mul r0.w, r0.x, c16.x
add r0.x, r2.z, r2.w
add r1.x, r2, r2.y
rsq r1.x, r1.x
rsq r0.x, r0.x
rcp r2.x, r1.x
rcp r0.x, r0.x
mul r1.x, r0, c18
mul r0.x, r2, c18
dsy r0.y, r0
texldd r2.yw, r0.zwzw, s1, r1, r0
mad_pp r4.xy, r2.wyzw, c18.z, c18.w
mul_pp r2.xy, r4, r4
add_pp_sat r2.x, r2, r2.y
add_pp r2.x, -r2, c14.y
rsq_pp r2.x, r2.x
rcp_pp r4.z, r2.x
dp3 r2.x, r4, -v3
mul r2.xyz, r4, r2.x
mad r2.xyz, -r2, c15.z, -v3
dp3_sat r2.x, r2, v1
pow r3, r2.x, c9.x
rcp r3.y, v5.w
mad r2.xyz, v5, r3.y, c5
mov r3.w, r3.x
dp3_pp r3.x, r4, v3
mad r4.xyz, v5, r3.y, c4
texld r2.x, r2, s5
mov_pp r2.w, r2.x
mad r2.xyz, v5, r3.y, c3
texld r2.x, r2, s5
texld r4.x, r4, s5
mov_pp r2.z, r4.x
mov_pp r2.y, r2.x
texldd r0, r0.zwzw, s0, r1, r0
mad r4.xyz, v5, r3.y, c2
mov r2.x, c1
add r3.y, c14, -r2.x
texld r2.x, r4, s5
mad r2, r2, r3.y, c1.x
dp4_pp r2.z, r2, c19.x
rcp r3.y, v4.w
mad r4.xy, v4, r3.y, c18.y
add_pp r3.z, r3.x, c14.y
frc_pp r3.y, r3.z
dp3 r2.x, v4, v4
texld r2.w, r4, s3
cmp r2.y, -v4.z, c14.x, c14
mul_pp r2.y, r2, r2.w
texld r2.x, r2.x, s4
mul_pp r2.x, r2.y, r2
mul_pp r2.w, r2.x, r2.z
mul r2.xyz, r2.w, c6
mul r2.xyz, r2, c7
mul r2.xyz, r2, r3.w
add_pp_sat r3.y, r3.z, -r3
mul_pp r3.w, r3.x, c6
mul r2.xyz, r3.y, r2
mul r3.xyz, r0.w, r2
mov r0.w, c12.x
add r2.xyz, c6, r0.w
mul_pp r1.x, r3.w, r2.w
mul_pp_sat r1.x, r1, c19.y
mad_sat r2.xyz, r2, r1.x, c0
add_pp r4.xyz, r2, r3
mul r1.xy, v2.zyzw, c10.x
texld r3.xyz, r1, s2
mul r2.xy, v2, c10.x
texld r2.xyz, r2, s2
add_pp r3.xyz, r3, -r2
mul r0.w, v0.x, c11.x
mad_pp r3.xyz, r1.z, r3, r2
mul r1.xy, v2.zxzw, c10.x
texld r1.xyz, r1, s2
add_pp r2.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r2, r3
add_pp r2.xyz, -r3, c14.y
mul_sat r0.w, r0, c15.z
mad_pp r3.xyz, r0.w, r2, r3
mul_pp r1.xyz, r4, v6.x
mul r2.xyz, r1, c13.x
mul_pp r0.xyz, r0, r3
mad_pp r0.xyz, r0, c8, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 128 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r3.zw, v2.xyxy
max r0.y, r3.z, r0.x
rcp r0.z, r0.y
min r0.y, r3.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r4.xyz, v5, c16.xyyw
add r0.w, -r0.z, c14
add r0.y, r3.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r3.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.x, -r1.y, c12.z, r1
mad r0.z, r0.w, c12.w, r1.x
mul r0.y, r0.z, c13.x
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r3.y, r0.x, c13.x
dsy r2.y, r0
dsx r2.w, r0.y
dsy r0.xy, v2
mul r1.xy, r0, r0
add r0.x, r0.z, r0.w
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c15.x
mul r2.x, r0.y, c15
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r1.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r1, r1
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r1.z, r0.x
dp3 r0.x, r1, -v3
mul r0.xyz, r1, r0.x
dp3_pp r5.y, r1, v3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c6.x
mov r5.x, r0
texld r0, r4, s3
dp4 r4.w, r0, c17
add r0.xyz, v5, c16.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c17
add r1.xyz, v5, c16.yyxw
texld r1, r1, s3
dp4 r4.y, r1, c17
add r0.xyz, v5, c16.x
texld r0, r0, s3
dp3 r1.x, v5, v5
dp4 r4.x, r0, c17
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c16.z, r4
mov r1.x, c2
cmp r1, r0, c11.y, r1.x
dp4_pp r0.y, r1, c16.w
add_pp r1.x, r5.y, c11.y
frc_pp r1.y, r1.x
dp3 r0.x, v4, v4
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r0, r5.x
mul r0.xyz, r1.x, r0
texldd r1, r3, s0, r2.zwzw, r2
mul r0.xyz, r1.w, r0
mul_pp r4.x, r5.y, c3.w
mul_pp r1.w, r4.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c18.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r4.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.z, r0, r2
mul r3.xy, v2.zxzw, c7.x
texld r2.xyz, r3, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r3.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r4, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 129 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.x, v2.z
abs r5.zw, v2.xyxy
max r0.y, r5.z, r0.x
rcp r0.z, r0.y
min r0.y, r5.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r0.w, -r0.z, c14
add r0.y, r5.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.x, -r1.y, c12.z, r1
mad r0.z, r0.w, c12.w, r1.x
mul r0.y, r0.z, c13.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r4.y, r0
mul r5.y, r0.x, c13.x
dsx r4.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.x, r0.y, c15
mul r4.z, r0.x, c15.x
texldd r0.yw, r5, s1, r4.zwzw, r4
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c11.y
rsq_pp r0.x, r0.x
rcp_pp r2.z, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r1.x, r0, v1
pow r0, r1.x, c6.x
mov r2.w, r0.x
add r1.xyz, v5, c16.xyyw
texld r1, r1, s3
dp4 r3.w, r1, c17
add r0.xyz, v5, c16.yxyw
texld r0, r0, s3
dp4 r3.z, r0, c17
add r1.xyz, v5, c16.yyxw
texld r1, r1, s3
dp4 r3.y, r1, c17
add r0.xyz, v5, c16.x
texld r0, r0, s3
dp3 r1.x, v5, v5
dp4 r3.x, r0, c17
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c16.z, r3
mov r1.x, c2
cmp r0, r0, c11.y, r1.x
dp3_pp r1.x, r2, v3
dp4_pp r0.y, r0, c16.w
add_pp r1.y, r1.x, c11
frc_pp r1.z, r1.y
dp3 r0.x, v4, v4
mul_pp r2.x, r1, c3.w
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r0, r2.w
mul r0.xyz, r1.y, r0
texldd r1, r5, s0, r4.zwzw, r4
mul r0.xyz, r1.w, r0
mul_pp r1.w, r2.x, r0
mov r0.w, c9.x
add r2.xyz, c3, r0.w
mul_pp_sat r1.w, r1, c18.x
mad_sat r2.xyz, r2, r1.w, c0
add_pp r3.xyz, r2, r0
mul r2.xy, v2, c7.x
mul r0.xy, v2.zyzw, c7.x
mul r0.w, v0.x, c8.x
texld r2.xyz, r2, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r5.z, r0, r2
mul r4.xy, v2.zxzw, c7.x
texld r2.xyz, r4, s2
add_pp r2.xyz, r2, -r0
mad_pp r0.xyz, r5.w, r2, r0
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r0.xyz, r0.w, r2, r0
mul_pp r3.xyz, r3, v6.x
mul r2.xyz, r3, c10.x
mul_pp r0.xyz, r1, r0
mad_pp r0.xyz, r0, c5, r2
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 134 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r5.zw, v2.xyxy
abs r0.x, v2.z
max r0.y, r5.z, r0.x
rcp r0.z, r0.y
min r0.y, r5.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r5.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r8.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.x, -r1.y, c11.z, r1
mad r0.z, r0.w, c11.w, r1.x
mul r0.y, r0.z, c12.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c5.x
mul r0.zw, r0, r0
mul r8.y, r0.x, c12.x
dsx r7.w, r0.y
dsy r6.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.y, c14.x
mul r7.z, r0.x, c14.x
texldd r0.yw, r8, s1, r7.zwzw, r6.zwzw
mad_pp r3.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r3, r3
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
mul r6.xy, v2.zyzw, c9.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r5.z, r0, r1
mul r2.xy, v2.zxzw, c5.x
texld r0.xyz, r2, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r5.w, r0, r1
dp3 r0.x, r3, -v3
mul r0.xyz, r3, r0.x
mad r4.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r4, v1
pow r4, r2.w, c4.x
dp3_pp r4.w, r3, v3
add_pp r2.xyz, -r1, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r2.xyz, r0.w, r2, r1
mul r7.xy, v2, c9.x
texld r0, r7, s5
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r1, r5.z, r1, r0
mul r5.xy, v2.zxzw, c9.x
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r0, r5.w, r0, r1
texldd r1, r8, s3, r7.zwzw, r6.zwzw
mul_pp r0, r1, r0
texldd r8, r8, s0, r7.zwzw, r6.zwzw
mad_pp r9.xyz, -r8, r2, r0
add_pp r0.z, r4.w, c10.y
mul_pp r2.xyz, r8, r2
dp3 r0.x, v4, v4
texld r0.x, r0.x, s6
mul r3.xyz, r0.x, c1
mov r0.y, r4.x
mul r3.xyz, r3, c2
frc_pp r2.w, r0.z
mul r3.xyz, r3, r0.y
add_pp_sat r0.y, r0.z, -r2.w
mul r3.xyz, r0.y, r3
mad_pp r8.xyz, r0.w, r9, r2
mul_pp r0.y, r4.w, c1.w
mul_pp r0.z, r0.x, r0.y
mul r4.xyz, r8.w, r3
mov r0.y, c7.x
mul_pp_sat r0.z, r0, c15
add r3.xyz, c1, r0.y
mad_sat r3.xyz, r3, r0.z, c0
add_pp r3.xyz, r3, r4
mul_pp r4.xyz, r3, v5.x
mul r0.yzw, r4.xxyz, c8.x
texld r3, r6, s4
mad_pp r6.xyz, r8, c3, r0.yzww
texld r2, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r5.z, r3, r2
add_pp r0.y, r4.w, c15.x
texld r3, r5, s4
add_pp r3, r3, -r2
mad_pp r2, r5.w, r3, r2
mul_pp r0.y, r0, c1.w
mul_pp r3.x, r0.y, r0
mul_pp r0, r1, r2
mul_pp_sat r1.x, r3, c15.y
add_pp r1.x, -r1, c10.y
mad_pp r0.xyz, -r6, r4, r0
mul_pp r2.xyz, r6, r4
mul_pp_sat r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 131 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
abs r8.xy, v2
abs r0.x, v2.z
max r0.y, r8.x, r0.x
rcp r0.z, r0.y
min r0.y, r8.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r8.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r7.z, r0.y, c14.x, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.x, -r1.y, c11.z, r1
mad r0.z, r0.w, c11.w, r1.x
mul r0.y, r0.z, c12.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c5.x
mul r0.zw, r0, r0
mul r7.w, r0.x, c12.x
dsx r6.w, r0.y
dsy r5.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.x, c14.x
mul r5.z, r0.y, c14.x
texldd r0.yw, r7.zwzw, s1, r6.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r8.x, r0, r1
mul r3.xy, v2.zxzw, c5.x
texld r0.xyz, r3, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r8.y, r0, r1
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r4.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r4, v1
add_pp r3.xyz, -r1, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r3, r1
mul r7.xy, v2, c9.x
mul r6.xy, v2.zyzw, c9.x
texld r0, r7, s5
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r1, r8.x, r1, r0
mul r5.xy, v2.zxzw, c9.x
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r8.y, r0, r1
pow r0, r2.w, c4.x
texldd r4, r7.zwzw, s3, r6.zwzw, r5.zwzw
dp3_pp r2.w, r2, v3
mov r2.y, r0.x
add_pp r0.w, r2, c10.y
frc_pp r2.x, r0.w
mov r0.xyz, c1
mul r0.xyz, c2, r0
mul_pp r1, r4, r1
mul r0.xyz, r0, r2.y
add_pp_sat r0.w, r0, -r2.x
mul r2.xyz, r0.w, r0
texldd r0, r7.zwzw, s0, r6.zwzw, r5.zwzw
mul r9.xyz, r0.w, r2
mul_pp r2.x, r2.w, c1.w
mad_pp r1.xyz, -r0, r3, r1
mul_pp r0.xyz, r0, r3
mad_pp r3.xyz, r1.w, r1, r0
mov r0.w, c7.x
mul_pp_sat r3.w, r2.x, c15.z
add r2.xyz, c1, r0.w
mad_sat r2.xyz, r2, r3.w, c0
add_pp r2.xyz, r2, r9
mul_pp r2.xyz, r2, v4.x
mul r9.xyz, r2, c8.x
texld r0, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r8.x, r1, r0
texld r1, r5, s4
add_pp r1, r1, -r0
mad_pp r0, r8.y, r1, r0
add_pp r2.w, r2, c15.x
mul_pp r1.x, r2.w, c1.w
mul_pp_sat r1.x, r1, c15.y
mul_pp r0, r4, r0
mad_pp r3.xyz, r3, c3, r9
mad_pp r0.xyz, -r3, r2, r0
add_pp r1.x, -r1, c10.y
mul_pp r2.xyz, r3, r2
mul_pp_sat r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 139 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c11.z, -v3
dp3 r2.x, v4, v4
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
rcp r2.w, v4.w
mad r8.xy, v4, r2.w, c14.y
texld r2.w, r8, s6
cmp r2.y, -v4.z, c10.x, c10
mul_pp r2.y, r2, r2.w
texld r2.x, r2.x, s7
mul_pp r2.w, r2.y, r2.x
mul r2.xyz, r2.w, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 135 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c11.z, -v3
dp3 r2.x, v4, v4
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
texld r2.x, r2.x, s6
texld r2.w, v4, s7
mul r2.w, r2.x, r2
mul r2.xyz, r2.w, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 133 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c11.z, -v3
dp3_pp r3.w, r2, v3
texld r2.w, v4, s6
mul r2.xyz, r2.w, c1
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 144 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c11.z, c11.w
mad r1.x, r1, r1.y, c12
mul r5.xy, v2.zyzw, c10.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c13.y, c13.z
mad r0.x, r0, r0.y, c13.w
mad r0.x, r0, r0.y, c14
mad r0.x, r0, r0.y, c14.y
mad r0.x, r0, r0.y, c14.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c14.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c12.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c15, c15.y
add r0.x, -r0.w, c11.y
mad r0.y, r0.w, c11.z, c11.w
mad r0.y, r0.w, r0, c12.x
mad r0.y, r0.w, r0, c12
add r0.w, -r1.y, c11.y
mad r1.x, r1, r1.y, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c11.x, c11.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c12.z, r0.y
mad r0.x, r0.z, c12.w, r0
mul r0.x, r0, c13
mul r1.x, r1, r0.w
cmp r1.y, v2, c11.x, c11
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c12.z, r1.x
mad r0.y, r1, c12.w, r0
mul r1.xy, v2.zyzw, c6.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c13.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c15.x
mul r4.z, r0.y, c15.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c11.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c6.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c7.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c6.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c12.z, -v3
add_pp r6.xyz, -r3, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c10.x
mul r1.xy, v2.zxzw, c10.x
add_pp r6.z, r3.w, c11.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c5.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
rcp r2.z, v4.w
mad r8.xy, v4, r2.z, c15.y
texld r2.w, r8, s6
cmp r2.z, -v4, c11.x, c11.y
mul_pp r2.z, r2, r2.w
texldp r2.x, v5, s8
rcp r2.y, v5.w
mad r2.y, -v5.z, r2, r2.x
mov r2.x, c1
cmp r2.y, r2, c11, r2.x
dp3 r2.x, v4, v4
texld r2.x, r2.x, s7
mul_pp r2.x, r2.z, r2
mul_pp r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c2
mul r2.xyz, r2, c3
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c2.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c8.x
add r8.xyz, c2, r5.z
mul_pp_sat r4.w, r4, c16.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c9.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c16.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c2
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c4, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c16.y
add_pp r1.w, -r1.x, c11.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 143 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c11.z, c11.w
mad r1.x, r1, r1.y, c12
mul r5.xy, v2.zyzw, c10.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c13.y, c13.z
mad r0.x, r0, r0.y, c13.w
mad r0.x, r0, r0.y, c14
mad r0.x, r0, r0.y, c14.y
mad r0.x, r0, r0.y, c14.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c14.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c12.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c15, c15.y
add r0.x, -r0.w, c11.y
mad r0.y, r0.w, c11.z, c11.w
mad r0.y, r0.w, r0, c12.x
mad r0.y, r0.w, r0, c12
add r0.w, -r1.y, c11.y
mad r1.x, r1, r1.y, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c11.x, c11.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c12.z, r0.y
mad r0.x, r0.z, c12.w, r0
mul r0.x, r0, c13
mul r1.x, r1, r0.w
cmp r1.y, v2, c11.x, c11
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c12.z, r1.x
mad r0.y, r1, c12.w, r0
mul r1.xy, v2.zyzw, c6.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c13.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c15.x
mul r4.z, r0.y, c15.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c11.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c6.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c7.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c6.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c12.z, -v3
mov r2.x, c1
add r2.y, c11, -r2.x
texldp r2.x, v5, s8
mad r2.y, r2.x, r2, c1.x
dp3 r2.x, v4, v4
add_pp r6.xyz, -r3, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c10.x
mul r1.xy, v2.zxzw, c10.x
add_pp r6.z, r3.w, c11.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c5.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
rcp r2.z, v4.w
mad r8.xy, v4, r2.z, c15.y
texld r2.w, r8, s6
cmp r2.z, -v4, c11.x, c11.y
mul_pp r2.z, r2, r2.w
texld r2.x, r2.x, s7
mul_pp r2.x, r2.z, r2
mul_pp r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c2
mul r2.xyz, r2, c3
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c2.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c8.x
add r8.xyz, c2, r5.z
mul_pp_sat r4.w, r4, c16.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c9.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c16.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c2
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c4, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c16.y
add_pp r1.w, -r1.x, c11.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 133 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c11.z, -v3
dp3_pp r2.w, r2, v3
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
add_pp r5.w, r2, c10.y
mad_pp r7.xyz, -r4, r3, r7
mov r3.w, r8.x
texldp r8.x, v4, s6
mul_pp r3.xyz, r4, r3
mul r2.xyz, r8.x, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r3.w
frc_pp r5.z, r5.w
add_pp_sat r3.w, r5, -r5.z
mul r2.xyz, r3.w, r2
mul_pp r3.w, r2, c1
mul r2.xyz, r4.w, r2
mov r4.w, c7.x
add r8.yzw, c1.xxyz, r4.w
mul_pp r3.w, r8.x, r3
mul_pp_sat r3.w, r3, c15.z
mad_sat r8.yzw, r8, r3.w, c0.xxyz
add_pp r2.xyz, r8.yzww, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r2.w, c15.x
texld r5, r1, s4
mul_pp r2.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r2, r8.x
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 134 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c11.z, -v3
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
texldp r2.x, v5, s6
texld r2.w, v4, s7
mul r2.w, r2, r2.x
mul r2.xyz, r2.w, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 143 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 4.00000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
mul r5.xy, v2.zyzw, c11.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c14.y, c14.z
mad r0.x, r0, r0.y, c14.w
mad r0.x, r0, r0.y, c15
mad r0.x, r0, r0.y, c15.y
mad r0.x, r0, r0.y, c15.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c15.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c13.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c16, c16.y
add r0.x, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
mad r0.y, r0.w, r0, c13
add r0.w, -r1.y, c12.y
mad r1.x, r1, r1.y, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c12.x, c12.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r0.x, r0.z, c13.w, r0
mul r0.x, r0, c14
mul r1.x, r1, r0.w
cmp r1.y, v2, c12.x, c12
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c13.z, r1.x
mad r0.y, r1, c13.w, r0
mul r1.xy, v2.zyzw, c7.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c14.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c16.x
mul r4.z, r0.y, c16.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c12.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c7.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c8.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c7.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c13.z, -v3
dp3_pp r3.w, r2, v3
add_pp r6.xyz, -r3, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c11.x
mul r1.xy, v2.zxzw, c11.x
add_pp r6.z, r3.w, c12.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c6.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
dp3 r2.w, v5, v5
rsq r5.w, r2.w
texld r2, v5, s6
dp4 r2.x, r2, c18
rcp r5.w, r5.w
mul r2.y, r5.w, c1.w
mad r2.z, -r2.y, c17.y, r2.x
mov r2.y, c2.x
dp3 r2.x, v4, v4
mov r5.z, r8.x
cmp r2.y, r2.z, c12, r2
texld r2.x, r2.x, s7
mul r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c3
mul r2.xyz, r2, c4
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c3.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c9.x
add r8.xyz, c3, r5.z
mul_pp_sat r4.w, r4, c17
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c10.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c17.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c3
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c5, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c17.z
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 144 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 4.00000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
mul r5.xy, v2.zyzw, c11.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c14.y, c14.z
mad r0.x, r0, r0.y, c14.w
mad r0.x, r0, r0.y, c15
mad r0.x, r0, r0.y, c15.y
mad r0.x, r0, r0.y, c15.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c15.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c13.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c16, c16.y
add r0.x, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
mad r0.y, r0.w, r0, c13
add r0.w, -r1.y, c12.y
mad r1.x, r1, r1.y, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c12.x, c12.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r0.x, r0.z, c13.w, r0
mul r0.x, r0, c14
mul r1.x, r1, r0.w
cmp r1.y, v2, c12.x, c12
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c13.z, r1.x
mad r0.y, r1, c13.w, r0
mul r1.xy, v2.zyzw, c7.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c14.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c16.x
mul r4.z, r0.y, c16.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c12.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c7.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c8.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c7.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
texld r2, v5, s6
dp4 r2.y, r2, c18
mad r0.xyz, -r0, c13.z, -v3
add_pp r6.xyz, -r3, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c11.x
mul r1.xy, v2.zxzw, c11.x
add_pp r6.z, r3.w, c12.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c6.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
dp3 r5.w, v5, v5
rsq r5.w, r5.w
rcp r2.z, r5.w
mul r2.z, r2, c1.w
mov r5.z, r8.x
mov r2.x, c2
mad r2.y, -r2.z, c17, r2
cmp r2.y, r2, c12, r2.x
dp3 r2.x, v4, v4
texld r2.w, v4, s8
texld r2.x, r2.x, s7
mul r2.x, r2, r2.w
mul r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c3
mul r2.xyz, r2, c4
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c3.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c9.x
add r8.xyz, c3, r5.z
mul_pp_sat r4.w, r4, c17
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c10.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c17.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c3
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c5, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c17.z
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 152 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 4.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r6.zw, v2.xyxy
abs r0.x, v2.z
max r0.y, r6.z, r0.x
rcp r0.z, r0.y
min r0.y, r6.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c17.y, c17.z
mad r0.w, r0, r0.z, c17
mad r0.w, r0, r0.z, c18.x
mad r0.w, r0, r0.z, c18.y
mad r0.z, r0.w, r0, c18
mul r0.z, r0, r0.y
add r0.w, -r0.z, c18
add r0.y, r6.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c16.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r9.x, r0.y, c19, c19.y
add r0.z, -r0.x, c15.y
mad r0.y, r0.x, c15.z, c15.w
mad r0.y, r0.x, r0, c16.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c16.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c15.x, c15.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c15.y
mad r0.y, r0.x, c15.z, c15.w
mad r0.y, r0, r0.x, c16.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c16.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c15, c15.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c16.z, r0
mad r0.x, r0, c16.w, r0.y
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0.w, c16.w, r1.x
mul r0.y, r0.z, c17.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c10.x
mul r0.zw, r0, r0
mul r9.y, r0.x, c17.x
dsx r8.w, r0.y
dsy r7.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r7.z, r0.y, c19.x
mul r8.z, r0.x, c19.x
texldd r0.yw, r9, s1, r8.zwzw, r7.zwzw
mad_pp r5.xy, r0.wyzw, c19.z, c19.w
mul_pp r0.xy, r5, r5
add_pp_sat r0.w, r0.x, r0.y
mul r0.xy, v2.zyzw, c10.x
add_pp r0.w, -r0, c15.y
rsq_pp r0.w, r0.w
rcp_pp r5.z, r0.w
mul r0.w, v0.x, c11.x
dp3_pp r5.w, r5, v3
dp3 r1.w, r5, -v3
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r6.z, r0, r1
mul r2.xy, v2.zxzw, c10.x
texld r0.xyz, r2, s2
mul r2.xyz, r5, r1.w
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r6.w, r0, r1
mad r2.xyz, -r2, c16.z, -v3
add_pp r1.xyz, -r0, c15.y
mul_sat r0.w, r0, c16.z
mad_pp r3.xyz, r0.w, r1, r0
mul r8.xy, v2, c14.x
mul r7.xy, v2.zyzw, c14.x
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
mul r6.xy, v2.zxzw, c14.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r0, r6.w, r0, r1
texldd r1, r9, s3, r8.zwzw, r7.zwzw
mul_pp r4, r1, r0
dp3_sat r2.x, r2, v1
pow r0, r2.x, c9.x
texldd r2, r9, s0, r8.zwzw, r7.zwzw
rcp r7.z, v5.w
mad_pp r4.xyz, -r2, r3, r4
mul_pp r2.xyz, r2, r3
mad_pp r4.xyz, r4.w, r4, r2
mov r3.w, r0.x
mad r0.xy, v5, r7.z, c5
texld r0.x, r0, s8
add_pp r4.w, r5, c20.x
mad r5.xy, v5, r7.z, c4
mov r0.w, r0.x
texld r0.x, r5, s8
mad r5.xy, v5, r7.z, c3
mov r0.z, r0.x
texld r0.x, r5, s8
mad r5.xy, v5, r7.z, c2
mov r0.y, r0.x
texld r0.x, r5, s8
mov r5.x, c1
mad r0, -v5.z, r7.z, r0
cmp r0, r0, c15.y, r5.x
dp4_pp r0.y, r0, c20.y
rcp r5.x, v4.w
mad r5.xy, v4, r5.x, c19.y
texld r0.w, r5, s6
add_pp r5.x, r5.w, c15.y
dp3 r0.x, v4, v4
cmp r0.z, -v4, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r3.w
frc_pp r5.y, r5.x
add_pp_sat r3.w, r5.x, -r5.y
mul r0.xyz, r3.w, r0
mul r5.xyz, r2.w, r0
mul_pp r3.w, r5, c6
mul_pp r0.y, r0.w, r3.w
mul_pp r4.w, r4, c6
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.z
mul_pp_sat r2.w, r0.y, c20
mov r0.x, c12
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r2.w, c0
add_pp r0.xyz, r0, r5
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c13.x
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c8, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c15.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 152 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 4.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
mul r1.xy, v2, c10.x
abs r6.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r6.z, r0.w
rcp r0.y, r0.x
min r0.x, r6.z, r0.w
mul r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.z, r0.y, c17.y, c17
mad r0.z, r0, r0.y, c17.w
mad r0.z, r0, r0.y, c18.x
mad r0.z, r0, r0.y, c18.y
mad r0.y, r0.z, r0, c18.z
mul r0.y, r0, r0.x
texld r1.xyz, r1, s2
add r0.z, -r0.y, c18.w
add r0.x, r6.z, -r0.w
cmp r1.w, -r0.x, r0.y, r0.z
mul r0.xy, v2.zyzw, c10.x
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r6.z, r0, r1
add r2.x, -r1.w, c16.w
cmp r1.z, v2, r1.w, r2.x
cmp r1.w, v2.x, r1.z, -r1.z
mad r9.x, r1.w, c19, c19.y
add r2.x, -r0.w, c15.y
mad r1.w, r0, c15.z, c15
mad r1.w, r0, r1, c16.x
mul r1.xy, v2.zxzw, c10.x
texld r1.xyz, r1, s2
add_pp r1.xyz, r1, -r0
rsq r2.x, r2.x
mad_pp r0.xyz, r6.w, r1, r0
mad r0.w, r0, r1, c16.y
rcp r2.x, r2.x
mul r2.z, r0.w, r2.x
abs r0.w, v2.y
cmp r2.y, v2.z, c15.x, c15
mul r2.w, r2.y, r2.z
add r2.x, -r0.w, c15.y
mad r1.w, r0, c15.z, c15
mad r1.w, r1, r0, c16.x
rsq r2.x, r2.x
mad r0.w, r1, r0, c16.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v2.y, c15.x, c15.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c16.z, r1
mad r0.w, r0, c16, r1
mad r2.z, -r2.w, c16, r2
mad r2.x, r2.y, c16.w, r2.z
mul r1.w, r2.x, c17.x
dsx r2.xy, v2
dsy r2.zw, v2.xyxy
mul r2.xy, r2, r2
mul r9.y, r0.w, c17.x
add r0.w, r2.x, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.zw, r2, r2
dsx r8.w, r1
dsy r7.w, r1
add r1.w, r2.z, r2
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r7.z, r1.w, c19.x
mul r8.z, r0.w, c19.x
texldd r2.yw, r9, s1, r8.zwzw, r7.zwzw
mad_pp r1.xy, r2.wyzw, c19.z, c19.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
mul r2.w, v0.x, c11.x
add_pp r2.xyz, -r0, c15.y
mul_sat r1.z, r2.w, c16
mad_pp r4.xyz, r1.z, r2, r0
add_pp r1.z, -r0.w, c15.y
mul r8.xy, v2, c14.x
mul r7.xy, v2.zyzw, c14.x
rsq_pp r1.z, r1.z
rcp_pp r1.z, r1.z
dp3 r1.w, r1, -v3
mul r3.xyz, r1, r1.w
mad r3.xyz, -r3, c16.z, -v3
dp3_sat r1.w, r3, v1
texldd r3, r9, s0, r8.zwzw, r7.zwzw
dp3_pp r4.w, r1, v3
texld r2, r8, s5
texld r0, r7, s5
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
mul r6.xy, v2.zxzw, c14.x
texld r2, r6, s5
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
texldd r2, r9, s3, r8.zwzw, r7.zwzw
rcp r7.z, v5.w
mul_pp r5, r2, r0
pow r0, r1.w, c9.x
mad r1.xyz, v5, r7.z, c3
mad_pp r5.xyz, -r3, r4, r5
mov r1.w, r0.x
mad r9.xyz, v5, r7.z, c5
texld r0.x, r9, s8
mov_pp r0.w, r0.x
mad r0.xyz, v5, r7.z, c4
texld r0.x, r0, s8
texld r1.x, r1, s8
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mad r1.xyz, v5, r7.z, c2
mov r0.x, c1
add r7.z, c15.y, -r0.x
texld r0.x, r1, s8
mad r0, r0, r7.z, c1.x
dp4_pp r0.z, r0, c20.y
rcp r1.x, v4.w
mad r1.xy, v4, r1.x, c19.y
texld r0.w, r1, s6
add_pp r1.x, r4.w, c15.y
frc_pp r1.y, r1.x
dp3 r0.x, v4, v4
cmp r0.y, -v4.z, c15.x, c15
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r1.w
mul_pp r1.w, r4, c6
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r1.x, r0
mul r1.xyz, r3.w, r0
mul_pp r0.y, r0.w, r1.w
add_pp r4.w, r4, c20.x
mul_pp r4.w, r4, c6
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.z
mul_pp_sat r1.w, r0.y, c20
mov r0.x, c12
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r1.w, c0
add_pp r0.xyz, r0, r1
mul_pp r1.xyz, r3, r4
mad_pp r4.xyz, r5.w, r5, r1
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c13.x
texld r1, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r1
mad_pp r1, r6.z, r3, r1
texld r3, r6, s4
add_pp r3, r3, -r1
mad_pp r1, r6.w, r3, r1
mul_pp r1, r2, r1
mad_pp r4.xyz, r4, c8, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c15.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 151 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r7.zw, v2.xyxy
abs r0.x, v2.z
max r0.y, r7.z, r0.x
rcp r0.z, r0.y
min r0.y, r7.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c14.y, c14.z
mad r0.w, r0, r0.z, c14
mad r0.w, r0, r0.z, c15.x
mad r0.w, r0, r0.z, c15.y
mad r0.z, r0.w, r0, c15
mul r0.z, r0, r0.y
add r0.w, -r0.z, c15
add r0.y, r7.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c13.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r8.z, r0.y, c16.x, c16.y
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0.x, r0, c13.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c13.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c12.x, c12.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.x, -r1.y, c13.z, r1
mad r0.z, r0.w, c13.w, r1.x
mul r0.y, r0.z, c14.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c7.x
mul r0.zw, r0, r0
dsx r6.w, r0.y
dsy r6.y, r0
mul r8.w, r0.x, c14.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.x, c16.x
mul r6.x, r0.y, c16
texldd r0.yw, r8.zwzw, s1, r6.zwzw, r6
mad_pp r3.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.xy, r3, r3
add_pp_sat r0.w, r0.x, r0.y
mul r0.xy, v2.zyzw, c7.x
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
mul r0.w, v0.x, c8.x
dp3_pp r4.w, r3, v3
dp3 r1.w, r3, -v3
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r7.z, r0, r1
mul r2.xy, v2.zxzw, c7.x
texld r0.xyz, r2, s2
mul r2.xyz, r3, r1.w
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r7.w, r0, r1
mad r2.xyz, -r2, c13.z, -v3
add r3.xyz, v5, c17.zzyw
texld r3, r3, s6
add_pp r1.xyz, -r0, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r4.xyz, r0.w, r1, r0
mul r9.xy, v2, c11.x
mul r8.xy, v2.zyzw, c11.x
texld r0, r9, s5
texld r1, r8, s5
add_pp r1, r1, -r0
mad_pp r1, r7.z, r1, r0
mul r7.xy, v2.zxzw, c11.x
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r0, r7.w, r0, r1
texldd r1, r8.zwzw, s3, r6.zwzw, r6
mul_pp r5, r1, r0
dp3_sat r2.x, r2, v1
pow r0, r2.x, c6.x
texldd r2, r8.zwzw, s0, r6.zwzw, r6
mad_pp r5.xyz, -r2, r4, r5
mul_pp r2.xyz, r2, r4
add r6.xyz, v5, c17.yzzw
mov r8.z, r0.x
texld r0, r6, s6
dp4 r6.w, r0, c18
dp4 r6.y, r3, c18
add r0.xyz, v5, c17.zyzw
texld r0, r0, s6
dp4 r6.z, r0, c18
add r0.xyz, v5, c17.y
texld r0, r0, s6
dp3 r3.x, v5, v5
mad_pp r4.xyz, r5.w, r5, r2
rsq r3.x, r3.x
dp4 r6.x, r0, c18
rcp r0.x, r3.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c17.w, r6
mov r3.x, c2
cmp r3, r0, c12.y, r3.x
dp4_pp r0.y, r3, c19.x
add_pp r3.x, r4.w, c12.y
frc_pp r3.y, r3.x
mul_pp r3.w, r4, c3
dp3 r0.x, v4, v4
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp r4.w, r4, c17.x
add_pp_sat r3.x, r3, -r3.y
mul r0.xyz, r0, r8.z
mul r0.xyz, r3.x, r0
mul r3.xyz, r2.w, r0
mul_pp r0.y, r0.w, r3.w
mul_pp r4.w, r4, c3
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c19.y
mul_pp_sat r2.w, r0.y, c19.z
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.w, c0
add_pp r0.xyz, r0, r3
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c10.x
texld r2, r9, s4
texld r3, r8, s4
add_pp r3, r3, -r2
mad_pp r2, r7.z, r3, r2
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r7.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c12.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 152 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
mul r1.xy, v2, c7.x
abs r8.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r8.z, r0.w
rcp r0.y, r0.x
min r0.x, r8.z, r0.w
mul r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.z, r0.y, c14.y, c14
mad r0.z, r0, r0.y, c14.w
mad r0.z, r0, r0.y, c15.x
mad r0.z, r0, r0.y, c15.y
mad r0.y, r0.z, r0, c15.z
mul r0.y, r0, r0.x
texld r1.xyz, r1, s2
add r0.z, -r0.y, c15.w
add r0.x, r8.z, -r0.w
cmp r1.w, -r0.x, r0.y, r0.z
mul r0.xy, v2.zyzw, c7.x
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r8.z, r0, r1
add r2.x, -r1.w, c13.w
cmp r1.z, v2, r1.w, r2.x
cmp r1.w, v2.x, r1.z, -r1.z
mad r6.x, r1.w, c16, c16.y
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
mad r1.w, r0, r1, c13.x
mul r1.xy, v2.zxzw, c7.x
texld r1.xyz, r1, s2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r8.w, r1, r0
rsq r2.x, r2.x
mad r0.w, r0, r1, c13.y
rcp r2.x, r2.x
mul r2.z, r0.w, r2.x
abs r0.w, v2.y
cmp r2.y, v2.z, c12.x, c12
mul r2.w, r2.y, r2.z
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
mad r1.w, r1, r0, c13.x
rsq r2.x, r2.x
mad r0.w, r1, r0, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v2.y, c12.x, c12.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c13.z, r1
mad r0.w, r0, c13, r1
mad r2.z, -r2.w, c13, r2
mad r2.x, r2.y, c13.w, r2.z
mul r1.w, r2.x, c14.x
dsx r2.xy, v2
dsy r2.zw, v2.xyxy
mul r2.xy, r2, r2
mul r6.y, r0.w, c14.x
add r0.w, r2.x, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.zw, r2, r2
dsx r3.w, r1
dsy r3.y, r1.w
add r1.w, r2.z, r2
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c16
mul r3.z, r0.w, c16.x
texldd r2.yw, r6, s1, r3.zwzw, r3
mad_pp r7.xy, r2.wyzw, c16.z, c16.w
mul_pp r2.xy, r7, r7
add_pp_sat r0.w, r2.x, r2.y
add_pp r2.x, -r0.w, c12.y
rsq_pp r2.x, r2.x
rcp_pp r7.z, r2.x
mul r1.w, v0.x, c8.x
dp3 r2.x, r7, -v3
mul r2.xyz, r7, r2.x
mad r2.xyz, -r2, c13.z, -v3
dp3_sat r4.w, r2, v1
texldd r2, r6, s0, r3.zwzw, r3
add_pp r1.xyz, -r0, c12.y
mul_sat r1.w, r1, c13.z
mad_pp r4.xyz, r1.w, r1, r0
mul r10.xy, v2, c11.x
mul r9.xy, v2.zyzw, c11.x
texld r1, r10, s5
texld r0, r9, s5
add_pp r0, r0, -r1
mad_pp r0, r8.z, r0, r1
mul r8.xy, v2.zxzw, c11.x
texld r1, r8, s5
add_pp r1, r1, -r0
mad_pp r0, r8.w, r1, r0
texldd r1, r6, s3, r3.zwzw, r3
mul_pp r5, r1, r0
mad_pp r5.xyz, -r2, r4, r5
pow r0, r4.w, c6.x
mul_pp r2.xyz, r2, r4
mov r4.w, r0.x
add r3.xyz, v5, c17.yzzw
texld r3, r3, s6
dp4 r6.w, r3, c18
add r0.xyz, v5, c17.zyzw
texld r0, r0, s6
dp4 r6.z, r0, c18
add r3.xyz, v5, c17.zzyw
texld r3, r3, s6
dp4 r6.y, r3, c18
add r0.xyz, v5, c17.y
texld r0, r0, s6
dp3 r3.x, v5, v5
dp4 r6.x, r0, c18
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c17.w, r6
dp3_pp r6.x, r7, v3
mov r3.x, c2
cmp r0, r0, c12.y, r3.x
dp4_pp r0.y, r0, c19.x
add_pp r3.x, r6, c12.y
frc_pp r3.y, r3.x
dp3 r0.x, v4, v4
mad_pp r4.xyz, r5.w, r5, r2
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r4.w
add_pp_sat r3.x, r3, -r3.y
mul r0.xyz, r3.x, r0
mul r3.xyz, r2.w, r0
mul_pp r3.w, r6.x, c3
mul_pp r0.y, r0.w, r3.w
add_pp r4.w, r6.x, c17.x
mul_pp r4.w, r4, c3
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c19.y
mul_pp_sat r2.w, r0.y, c19.z
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.w, c0
add_pp r0.xyz, r0, r3
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c10.x
texld r2, r10, s4
texld r3, r9, s4
add_pp r3, r3, -r2
mad_pp r2, r8.z, r3, r2
texld r3, r8, s4
add_pp r3, r3, -r2
mad_pp r2, r8.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c12.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 134 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r5.zw, v2.xyxy
abs r0.x, v2.z
max r0.y, r5.z, r0.x
rcp r0.z, r0.y
min r0.y, r5.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r5.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r8.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.x, -r1.y, c11.z, r1
mad r0.z, r0.w, c11.w, r1.x
mul r0.y, r0.z, c12.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c5.x
mul r0.zw, r0, r0
mul r8.y, r0.x, c12.x
dsx r7.w, r0.y
dsy r6.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.y, c14.x
mul r7.z, r0.x, c14.x
texldd r0.yw, r8, s1, r7.zwzw, r6.zwzw
mad_pp r3.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r3, r3
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
mul r6.xy, v2.zyzw, c9.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r5.z, r0, r1
mul r2.xy, v2.zxzw, c5.x
texld r0.xyz, r2, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r5.w, r0, r1
dp3 r0.x, r3, -v3
mul r0.xyz, r3, r0.x
mad r4.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r4, v1
pow r4, r2.w, c4.x
dp3_pp r4.w, r3, v3
add_pp r2.xyz, -r1, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r2.xyz, r0.w, r2, r1
mul r7.xy, v2, c9.x
texld r0, r7, s5
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r1, r5.z, r1, r0
mul r5.xy, v2.zxzw, c9.x
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r0, r5.w, r0, r1
texldd r1, r8, s3, r7.zwzw, r6.zwzw
mul_pp r0, r1, r0
texldd r8, r8, s0, r7.zwzw, r6.zwzw
mad_pp r9.xyz, -r8, r2, r0
add_pp r0.z, r4.w, c10.y
mul_pp r2.xyz, r8, r2
dp3 r0.x, v4, v4
texld r0.x, r0.x, s6
mul r3.xyz, r0.x, c1
mov r0.y, r4.x
mul r3.xyz, r3, c2
frc_pp r2.w, r0.z
mul r3.xyz, r3, r0.y
add_pp_sat r0.y, r0.z, -r2.w
mul r3.xyz, r0.y, r3
mad_pp r8.xyz, r0.w, r9, r2
mul_pp r0.y, r4.w, c1.w
mul_pp r0.z, r0.x, r0.y
mul r4.xyz, r8.w, r3
mov r0.y, c7.x
mul_pp_sat r0.z, r0, c15
add r3.xyz, c1, r0.y
mad_sat r3.xyz, r3, r0.z, c0
add_pp r3.xyz, r3, r4
mul_pp r4.xyz, r3, v5.x
mul r0.yzw, r4.xxyz, c8.x
texld r3, r6, s4
mad_pp r6.xyz, r8, c3, r0.yzww
texld r2, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r5.z, r3, r2
add_pp r0.y, r4.w, c15.x
texld r3, r5, s4
add_pp r3, r3, -r2
mad_pp r2, r5.w, r3, r2
mul_pp r0.y, r0, c1.w
mul_pp r3.x, r0.y, r0
mul_pp r0, r1, r2
mul_pp_sat r1.x, r3, c15.y
add_pp r1.x, -r1, c10.y
mad_pp r0.xyz, -r6, r4, r0
mul_pp r2.xyz, r6, r4
mul_pp_sat r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 131 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
abs r8.xy, v2
abs r0.x, v2.z
max r0.y, r8.x, r0.x
rcp r0.z, r0.y
min r0.y, r8.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r0.w, -r0.z, c13
add r0.y, r8.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r7.z, r0.y, c14.x, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.x, -r1.y, c11.z, r1
mad r0.z, r0.w, c11.w, r1.x
mul r0.y, r0.z, c12.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c5.x
mul r0.zw, r0, r0
mul r7.w, r0.x, c12.x
dsx r6.w, r0.y
dsy r5.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.x, c14.x
mul r5.z, r0.y, c14.x
texldd r0.yw, r7.zwzw, s1, r6.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2.zyzw, c5.x
mul r0.w, v0.x, c6.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r8.x, r0, r1
mul r3.xy, v2.zxzw, c5.x
texld r0.xyz, r3, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r8.y, r0, r1
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r4.xyz, -r0, c11.z, -v3
dp3_sat r2.w, r4, v1
add_pp r3.xyz, -r1, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r3, r1
mul r7.xy, v2, c9.x
mul r6.xy, v2.zyzw, c9.x
texld r0, r7, s5
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r1, r8.x, r1, r0
mul r5.xy, v2.zxzw, c9.x
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r8.y, r0, r1
pow r0, r2.w, c4.x
texldd r4, r7.zwzw, s3, r6.zwzw, r5.zwzw
dp3_pp r2.w, r2, v3
mov r2.y, r0.x
add_pp r0.w, r2, c10.y
frc_pp r2.x, r0.w
mov r0.xyz, c1
mul r0.xyz, c2, r0
mul_pp r1, r4, r1
mul r0.xyz, r0, r2.y
add_pp_sat r0.w, r0, -r2.x
mul r2.xyz, r0.w, r0
texldd r0, r7.zwzw, s0, r6.zwzw, r5.zwzw
mul r9.xyz, r0.w, r2
mul_pp r2.x, r2.w, c1.w
mad_pp r1.xyz, -r0, r3, r1
mul_pp r0.xyz, r0, r3
mad_pp r3.xyz, r1.w, r1, r0
mov r0.w, c7.x
mul_pp_sat r3.w, r2.x, c15.z
add r2.xyz, c1, r0.w
mad_sat r2.xyz, r2, r3.w, c0
add_pp r2.xyz, r2, r9
mul_pp r2.xyz, r2, v4.x
mul r9.xyz, r2, c8.x
texld r0, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r8.x, r1, r0
texld r1, r5, s4
add_pp r1, r1, -r0
mad_pp r0, r8.y, r1, r0
add_pp r2.w, r2, c15.x
mul_pp r1.x, r2.w, c1.w
mul_pp_sat r1.x, r1, c15.y
mul_pp r0, r4, r0
mad_pp r3.xyz, r3, c3, r9
mad_pp r0.xyz, -r3, r2, r0
add_pp r1.x, -r1, c10.y
mul_pp r2.xyz, r3, r2
mul_pp_sat r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 139 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c11.z, -v3
dp3 r2.x, v4, v4
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
rcp r2.w, v4.w
mad r8.xy, v4, r2.w, c14.y
texld r2.w, r8, s6
cmp r2.y, -v4.z, c10.x, c10
mul_pp r2.y, r2, r2.w
texld r2.x, r2.x, s7
mul_pp r2.w, r2.y, r2.x
mul r2.xyz, r2.w, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 135 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c11.z, -v3
dp3 r2.x, v4, v4
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
texld r2.x, r2.x, s6
texld r2.w, v4, s7
mul r2.w, r2.x, r2
mul r2.xyz, r2.w, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 133 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c11.z, -v3
dp3_pp r3.w, r2, v3
texld r2.w, v4, s6
mul r2.xyz, r2.w, c1
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 144 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c11.z, c11.w
mad r1.x, r1, r1.y, c12
mul r5.xy, v2.zyzw, c10.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c13.y, c13.z
mad r0.x, r0, r0.y, c13.w
mad r0.x, r0, r0.y, c14
mad r0.x, r0, r0.y, c14.y
mad r0.x, r0, r0.y, c14.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c14.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c12.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c15, c15.y
add r0.x, -r0.w, c11.y
mad r0.y, r0.w, c11.z, c11.w
mad r0.y, r0.w, r0, c12.x
mad r0.y, r0.w, r0, c12
add r0.w, -r1.y, c11.y
mad r1.x, r1, r1.y, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c11.x, c11.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c12.z, r0.y
mad r0.x, r0.z, c12.w, r0
mul r0.x, r0, c13
mul r1.x, r1, r0.w
cmp r1.y, v2, c11.x, c11
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c12.z, r1.x
mad r0.y, r1, c12.w, r0
mul r1.xy, v2.zyzw, c6.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c13.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c15.x
mul r4.z, r0.y, c15.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c11.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c6.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c7.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c6.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c12.z, -v3
add_pp r6.xyz, -r3, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c10.x
mul r1.xy, v2.zxzw, c10.x
add_pp r6.z, r3.w, c11.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c5.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
rcp r2.z, v4.w
mad r8.xy, v4, r2.z, c15.y
texld r2.w, r8, s6
cmp r2.z, -v4, c11.x, c11.y
mul_pp r2.z, r2, r2.w
texldp r2.x, v5, s8
rcp r2.y, v5.w
mad r2.y, -v5.z, r2, r2.x
mov r2.x, c1
cmp r2.y, r2, c11, r2.x
dp3 r2.x, v4, v4
texld r2.x, r2.x, s7
mul_pp r2.x, r2.z, r2
mul_pp r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c2
mul r2.xyz, r2, c3
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c2.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c8.x
add r8.xyz, c2, r5.z
mul_pp_sat r4.w, r4, c16.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c9.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c16.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c2
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c4, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c16.y
add_pp r1.w, -r1.x, c11.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 143 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c11.z, c11.w
mad r1.x, r1, r1.y, c12
mul r5.xy, v2.zyzw, c10.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c13.y, c13.z
mad r0.x, r0, r0.y, c13.w
mad r0.x, r0, r0.y, c14
mad r0.x, r0, r0.y, c14.y
mad r0.x, r0, r0.y, c14.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c14.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c12.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c15, c15.y
add r0.x, -r0.w, c11.y
mad r0.y, r0.w, c11.z, c11.w
mad r0.y, r0.w, r0, c12.x
mad r0.y, r0.w, r0, c12
add r0.w, -r1.y, c11.y
mad r1.x, r1, r1.y, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c11.x, c11.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c12.z, r0.y
mad r0.x, r0.z, c12.w, r0
mul r0.x, r0, c13
mul r1.x, r1, r0.w
cmp r1.y, v2, c11.x, c11
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c12.z, r1.x
mad r0.y, r1, c12.w, r0
mul r1.xy, v2.zyzw, c6.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c13.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c15.x
mul r4.z, r0.y, c15.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c11.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c6.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c7.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c6.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c12.z, -v3
mov r2.x, c1
add r2.y, c11, -r2.x
texldp r2.x, v5, s8
mad r2.y, r2.x, r2, c1.x
dp3 r2.x, v4, v4
add_pp r6.xyz, -r3, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c10.x
mul r1.xy, v2.zxzw, c10.x
add_pp r6.z, r3.w, c11.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c5.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
rcp r2.z, v4.w
mad r8.xy, v4, r2.z, c15.y
texld r2.w, r8, s6
cmp r2.z, -v4, c11.x, c11.y
mul_pp r2.z, r2, r2.w
texld r2.x, r2.x, s7
mul_pp r2.x, r2.z, r2
mul_pp r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c2
mul r2.xyz, r2, c3
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c2.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c8.x
add r8.xyz, c2, r5.z
mul_pp_sat r4.w, r4, c16.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c9.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c16.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c2
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c4, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c16.y
add_pp r1.w, -r1.x, c11.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 133 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c11.z, -v3
dp3_pp r2.w, r2, v3
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
add_pp r5.w, r2, c10.y
mad_pp r7.xyz, -r4, r3, r7
mov r3.w, r8.x
texldp r8.x, v4, s6
mul_pp r3.xyz, r4, r3
mul r2.xyz, r8.x, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r3.w
frc_pp r5.z, r5.w
add_pp_sat r3.w, r5, -r5.z
mul r2.xyz, r3.w, r2
mul_pp r3.w, r2, c1
mul r2.xyz, r4.w, r2
mov r4.w, c7.x
add r8.yzw, c1.xxyz, r4.w
mul_pp r3.w, r8.x, r3
mul_pp_sat r3.w, r3, c15.z
mad_sat r8.yzw, r8, r3.w, c0.xxyz
add_pp r2.xyz, r8.yzww, r2
mul_pp r2.xyz, r2, v5.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r2.w, c15.x
texld r5, r1, s4
mul_pp r2.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r2, r8.x
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 134 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c15, -0.01000214, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c10.z, c10.w
mad r1.x, r1, r1.y, c11
mul r5.xy, v2.zyzw, c9.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c12.y, c12.z
mad r0.x, r0, r0.y, c12.w
mad r0.x, r0, r0.y, c13
mad r0.x, r0, r0.y, c13.y
mad r0.x, r0, r0.y, c13.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c13.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c11.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c14, c14.y
add r0.x, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
mad r0.y, r0.w, r0, c11
add r0.w, -r1.y, c10.y
mad r1.x, r1, r1.y, c11.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c10.x, c10.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c11.z, r0.y
mad r0.x, r0.z, c11.w, r0
mul r0.x, r0, c12
mul r1.x, r1, r0.w
cmp r1.y, v2, c10.x, c10
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c11.z, r1.x
mad r0.y, r1, c11.w, r0
mul r1.xy, v2.zyzw, c5.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c12.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c14.x
mul r4.z, r0.y, c14.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c10.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c5.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c6.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c5.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c11.z, -v3
add_pp r6.xyz, -r3, c10.y
mul_sat r0.w, r0, c11.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c9.x
mul r1.xy, v2.zxzw, c9.x
add_pp r6.z, r3.w, c10.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c4.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
mov r5.z, r8.x
texldp r2.x, v5, s6
texld r2.w, v4, s7
mul r2.w, r2, r2.x
mul r2.xyz, r2.w, c1
mul r2.xyz, r2, c2
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c1.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c7.x
add r8.xyz, c1, r5.z
mul_pp_sat r4.w, r4, c15.z
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c8.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c15.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c1
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c3, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c15.y
add_pp r1.w, -r1.x, c10.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 143 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 4.00000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
mul r5.xy, v2.zyzw, c11.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c14.y, c14.z
mad r0.x, r0, r0.y, c14.w
mad r0.x, r0, r0.y, c15
mad r0.x, r0, r0.y, c15.y
mad r0.x, r0, r0.y, c15.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c15.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c13.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c16, c16.y
add r0.x, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
mad r0.y, r0.w, r0, c13
add r0.w, -r1.y, c12.y
mad r1.x, r1, r1.y, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c12.x, c12.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r0.x, r0.z, c13.w, r0
mul r0.x, r0, c14
mul r1.x, r1, r0.w
cmp r1.y, v2, c12.x, c12
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c13.z, r1.x
mad r0.y, r1, c13.w, r0
mul r1.xy, v2.zyzw, c7.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c14.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c16.x
mul r4.z, r0.y, c16.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c12.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c7.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c8.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c7.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mad r0.xyz, -r0, c13.z, -v3
dp3_pp r3.w, r2, v3
add_pp r6.xyz, -r3, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c11.x
mul r1.xy, v2.zxzw, c11.x
add_pp r6.z, r3.w, c12.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c6.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
dp3 r2.w, v5, v5
rsq r5.w, r2.w
texld r2, v5, s6
dp4 r2.x, r2, c18
rcp r5.w, r5.w
mul r2.y, r5.w, c1.w
mad r2.z, -r2.y, c17.y, r2.x
mov r2.y, c2.x
dp3 r2.x, v4, v4
mov r5.z, r8.x
cmp r2.y, r2.z, c12, r2
texld r2.x, r2.x, s7
mul r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c3
mul r2.xyz, r2, c4
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c3.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c9.x
add r8.xyz, c3, r5.z
mul_pp_sat r4.w, r4, c17
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c10.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c17.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c3
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c5, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c17.z
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 144 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 4.00000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.y, v2
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
mul r5.xy, v2.zyzw, c11.x
abs r1.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r1.z, r0.w
min r0.y, r1.z, r0.w
rcp r0.x, r0.x
mul r0.z, r0.y, r0.x
mul r0.y, r0.z, r0.z
mad r0.x, r0.y, c14.y, c14.z
mad r0.x, r0, r0.y, c14.w
mad r0.x, r0, r0.y, c15
mad r0.x, r0, r0.y, c15.y
mad r0.x, r0, r0.y, c15.z
mul r0.y, r0.x, r0.z
add r0.z, r1, -r0.w
add r0.x, -r0.y, c15.w
cmp r0.y, -r0.z, r0, r0.x
add r0.x, -r0.y, c13.w
cmp r0.x, v2.z, r0.y, r0
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c16, c16.y
add r0.x, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
mad r0.y, r0.w, r0, c13
add r0.w, -r1.y, c12.y
mad r1.x, r1, r1.y, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.y, r0, r0.x
cmp r0.z, v2, c12.x, c12.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r0.x, r0.z, c13.w, r0
mul r0.x, r0, c14
mul r1.x, r1, r0.w
cmp r1.y, v2, c12.x, c12
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c13.z, r1.x
mad r0.y, r1, c13.w, r0
mul r1.xy, v2.zyzw, c7.x
texld r3.xyz, r1, s2
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r5.w, r0.x
mul r4.y, r0, c14.x
dsx r4.w, r0.x
dsy r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.z, r0, r0.w
rsq r0.y, r0.z
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.x, c16.x
mul r4.z, r0.y, c16.x
texldd r0.yw, r4, s1, r4.zwzw, r5.zwzw
mad_pp r2.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.w, -r0.x, c12.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
mul r0.xy, v2, c7.x
texld r0.xyz, r0, s2
add_pp r3.xyz, r3, -r0
mul r0.w, v0.x, c8.x
mad_pp r0.xyz, r1.z, r3, r0
mul r1.xy, v2.zxzw, c7.x
texld r3.xyz, r1, s2
add_pp r3.xyz, r3, -r0
mad_pp r3.xyz, r1.w, r3, r0
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
texld r2, v5, s6
dp4 r2.y, r2, c18
mad r0.xyz, -r0, c13.z, -v3
add_pp r6.xyz, -r3, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r3.xyz, r0.w, r6, r3
mul r6.xy, v2, c11.x
mul r1.xy, v2.zxzw, c11.x
add_pp r6.z, r3.w, c12.y
texld r7, r6, s5
texld r8, r5, s5
add_pp r8, r8, -r7
mad_pp r7, r1.z, r8, r7
texld r8, r1, s5
add_pp r8, r8, -r7
mad_pp r7, r1.w, r8, r7
dp3_sat r0.x, r0, v1
pow r8, r0.x, c6.x
texldd r0, r4, s3, r4.zwzw, r5.zwzw
texldd r4, r4, s0, r4.zwzw, r5.zwzw
mul_pp r7, r0, r7
mad_pp r7.xyz, -r4, r3, r7
mul_pp r3.xyz, r4, r3
dp3 r5.w, v5, v5
rsq r5.w, r5.w
rcp r2.z, r5.w
mul r2.z, r2, c1.w
mov r5.z, r8.x
mov r2.x, c2
mad r2.y, -r2.z, c17, r2
cmp r2.y, r2, c12, r2.x
dp3 r2.x, v4, v4
texld r2.w, v4, s8
texld r2.x, r2.x, s7
mul r2.x, r2, r2.w
mul r2.w, r2.x, r2.y
mul r2.xyz, r2.w, c3
mul r2.xyz, r2, c4
mul r2.xyz, r2, r5.z
frc_pp r5.w, r6.z
add_pp_sat r5.z, r6, -r5.w
mul r2.xyz, r5.z, r2
mul_pp r5.z, r3.w, c3.w
mul r2.xyz, r4.w, r2
mul_pp r4.w, r2, r5.z
mov r5.z, c9.x
add r8.xyz, c3, r5.z
mul_pp_sat r4.w, r4, c17
mad_sat r8.xyz, r8, r4.w, c0
add_pp r2.xyz, r8, r2
mul_pp r2.xyz, r2, v6.x
mad_pp r7.xyz, r7.w, r7, r3
mul r3.xyz, r2, c10.x
texld r4, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r4
mad_pp r4, r1.z, r5, r4
add_pp r1.z, r3.w, c17.x
texld r5, r1, s4
mul_pp r3.w, r1.z, c3
add_pp r5, r5, -r4
mad_pp r1, r1.w, r5, r4
mul_pp r0, r0, r1
mad_pp r3.xyz, r7, c5, r3
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c17.z
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r2, r0
mul_pp r1.xyz, r3, r2
mul_pp_sat r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 152 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 4.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r6.zw, v2.xyxy
abs r0.x, v2.z
max r0.y, r6.z, r0.x
rcp r0.z, r0.y
min r0.y, r6.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c17.y, c17.z
mad r0.w, r0, r0.z, c17
mad r0.w, r0, r0.z, c18.x
mad r0.w, r0, r0.z, c18.y
mad r0.z, r0.w, r0, c18
mul r0.z, r0, r0.y
add r0.w, -r0.z, c18
add r0.y, r6.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c16.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r9.x, r0.y, c19, c19.y
add r0.z, -r0.x, c15.y
mad r0.y, r0.x, c15.z, c15.w
mad r0.y, r0.x, r0, c16.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c16.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c15.x, c15.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c15.y
mad r0.y, r0.x, c15.z, c15.w
mad r0.y, r0, r0.x, c16.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c16.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c15, c15.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c16.z, r0
mad r0.x, r0, c16.w, r0.y
mad r1.x, -r1.y, c16.z, r1
mad r0.z, r0.w, c16.w, r1.x
mul r0.y, r0.z, c17.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c10.x
mul r0.zw, r0, r0
mul r9.y, r0.x, c17.x
dsx r8.w, r0.y
dsy r7.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r7.z, r0.y, c19.x
mul r8.z, r0.x, c19.x
texldd r0.yw, r9, s1, r8.zwzw, r7.zwzw
mad_pp r5.xy, r0.wyzw, c19.z, c19.w
mul_pp r0.xy, r5, r5
add_pp_sat r0.w, r0.x, r0.y
mul r0.xy, v2.zyzw, c10.x
add_pp r0.w, -r0, c15.y
rsq_pp r0.w, r0.w
rcp_pp r5.z, r0.w
mul r0.w, v0.x, c11.x
dp3_pp r5.w, r5, v3
dp3 r1.w, r5, -v3
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r6.z, r0, r1
mul r2.xy, v2.zxzw, c10.x
texld r0.xyz, r2, s2
mul r2.xyz, r5, r1.w
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r6.w, r0, r1
mad r2.xyz, -r2, c16.z, -v3
add_pp r1.xyz, -r0, c15.y
mul_sat r0.w, r0, c16.z
mad_pp r3.xyz, r0.w, r1, r0
mul r8.xy, v2, c14.x
mul r7.xy, v2.zyzw, c14.x
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
mul r6.xy, v2.zxzw, c14.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r0, r6.w, r0, r1
texldd r1, r9, s3, r8.zwzw, r7.zwzw
mul_pp r4, r1, r0
dp3_sat r2.x, r2, v1
pow r0, r2.x, c9.x
texldd r2, r9, s0, r8.zwzw, r7.zwzw
rcp r7.z, v5.w
mad_pp r4.xyz, -r2, r3, r4
mul_pp r2.xyz, r2, r3
mad_pp r4.xyz, r4.w, r4, r2
mov r3.w, r0.x
mad r0.xy, v5, r7.z, c5
texld r0.x, r0, s8
add_pp r4.w, r5, c20.x
mad r5.xy, v5, r7.z, c4
mov r0.w, r0.x
texld r0.x, r5, s8
mad r5.xy, v5, r7.z, c3
mov r0.z, r0.x
texld r0.x, r5, s8
mad r5.xy, v5, r7.z, c2
mov r0.y, r0.x
texld r0.x, r5, s8
mov r5.x, c1
mad r0, -v5.z, r7.z, r0
cmp r0, r0, c15.y, r5.x
dp4_pp r0.y, r0, c20.y
rcp r5.x, v4.w
mad r5.xy, v4, r5.x, c19.y
texld r0.w, r5, s6
add_pp r5.x, r5.w, c15.y
dp3 r0.x, v4, v4
cmp r0.z, -v4, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r3.w
frc_pp r5.y, r5.x
add_pp_sat r3.w, r5.x, -r5.y
mul r0.xyz, r3.w, r0
mul r5.xyz, r2.w, r0
mul_pp r3.w, r5, c6
mul_pp r0.y, r0.w, r3.w
mul_pp r4.w, r4, c6
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.z
mul_pp_sat r2.w, r0.y, c20
mov r0.x, c12
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r2.w, c0
add_pp r0.xyz, r0, r5
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c13.x
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c8, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c15.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 152 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 4.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
mul r1.xy, v2, c10.x
abs r6.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r6.z, r0.w
rcp r0.y, r0.x
min r0.x, r6.z, r0.w
mul r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.z, r0.y, c17.y, c17
mad r0.z, r0, r0.y, c17.w
mad r0.z, r0, r0.y, c18.x
mad r0.z, r0, r0.y, c18.y
mad r0.y, r0.z, r0, c18.z
mul r0.y, r0, r0.x
texld r1.xyz, r1, s2
add r0.z, -r0.y, c18.w
add r0.x, r6.z, -r0.w
cmp r1.w, -r0.x, r0.y, r0.z
mul r0.xy, v2.zyzw, c10.x
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r6.z, r0, r1
add r2.x, -r1.w, c16.w
cmp r1.z, v2, r1.w, r2.x
cmp r1.w, v2.x, r1.z, -r1.z
mad r9.x, r1.w, c19, c19.y
add r2.x, -r0.w, c15.y
mad r1.w, r0, c15.z, c15
mad r1.w, r0, r1, c16.x
mul r1.xy, v2.zxzw, c10.x
texld r1.xyz, r1, s2
add_pp r1.xyz, r1, -r0
rsq r2.x, r2.x
mad_pp r0.xyz, r6.w, r1, r0
mad r0.w, r0, r1, c16.y
rcp r2.x, r2.x
mul r2.z, r0.w, r2.x
abs r0.w, v2.y
cmp r2.y, v2.z, c15.x, c15
mul r2.w, r2.y, r2.z
add r2.x, -r0.w, c15.y
mad r1.w, r0, c15.z, c15
mad r1.w, r1, r0, c16.x
rsq r2.x, r2.x
mad r0.w, r1, r0, c16.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v2.y, c15.x, c15.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c16.z, r1
mad r0.w, r0, c16, r1
mad r2.z, -r2.w, c16, r2
mad r2.x, r2.y, c16.w, r2.z
mul r1.w, r2.x, c17.x
dsx r2.xy, v2
dsy r2.zw, v2.xyxy
mul r2.xy, r2, r2
mul r9.y, r0.w, c17.x
add r0.w, r2.x, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.zw, r2, r2
dsx r8.w, r1
dsy r7.w, r1
add r1.w, r2.z, r2
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r7.z, r1.w, c19.x
mul r8.z, r0.w, c19.x
texldd r2.yw, r9, s1, r8.zwzw, r7.zwzw
mad_pp r1.xy, r2.wyzw, c19.z, c19.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
mul r2.w, v0.x, c11.x
add_pp r2.xyz, -r0, c15.y
mul_sat r1.z, r2.w, c16
mad_pp r4.xyz, r1.z, r2, r0
add_pp r1.z, -r0.w, c15.y
mul r8.xy, v2, c14.x
mul r7.xy, v2.zyzw, c14.x
rsq_pp r1.z, r1.z
rcp_pp r1.z, r1.z
dp3 r1.w, r1, -v3
mul r3.xyz, r1, r1.w
mad r3.xyz, -r3, c16.z, -v3
dp3_sat r1.w, r3, v1
texldd r3, r9, s0, r8.zwzw, r7.zwzw
dp3_pp r4.w, r1, v3
texld r2, r8, s5
texld r0, r7, s5
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
mul r6.xy, v2.zxzw, c14.x
texld r2, r6, s5
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
texldd r2, r9, s3, r8.zwzw, r7.zwzw
rcp r7.z, v5.w
mul_pp r5, r2, r0
pow r0, r1.w, c9.x
mad r1.xyz, v5, r7.z, c3
mad_pp r5.xyz, -r3, r4, r5
mov r1.w, r0.x
mad r9.xyz, v5, r7.z, c5
texld r0.x, r9, s8
mov_pp r0.w, r0.x
mad r0.xyz, v5, r7.z, c4
texld r0.x, r0, s8
texld r1.x, r1, s8
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mad r1.xyz, v5, r7.z, c2
mov r0.x, c1
add r7.z, c15.y, -r0.x
texld r0.x, r1, s8
mad r0, r0, r7.z, c1.x
dp4_pp r0.z, r0, c20.y
rcp r1.x, v4.w
mad r1.xy, v4, r1.x, c19.y
texld r0.w, r1, s6
add_pp r1.x, r4.w, c15.y
frc_pp r1.y, r1.x
dp3 r0.x, v4, v4
cmp r0.y, -v4.z, c15.x, c15
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r1.w
mul_pp r1.w, r4, c6
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r1.x, r0
mul r1.xyz, r3.w, r0
mul_pp r0.y, r0.w, r1.w
add_pp r4.w, r4, c20.x
mul_pp r4.w, r4, c6
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.z
mul_pp_sat r1.w, r0.y, c20
mov r0.x, c12
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r1.w, c0
add_pp r0.xyz, r0, r1
mul_pp r1.xyz, r3, r4
mad_pp r4.xyz, r5.w, r5, r1
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c13.x
texld r1, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r1
mad_pp r1, r6.z, r3, r1
texld r3, r6, s4
add_pp r3, r3, -r1
mad_pp r1, r6.w, r3, r1
mul_pp r1, r2, r1
mad_pp r4.xyz, r4, c8, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c15.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 151 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r7.zw, v2.xyxy
abs r0.x, v2.z
max r0.y, r7.z, r0.x
rcp r0.z, r0.y
min r0.y, r7.z, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c14.y, c14.z
mad r0.w, r0, r0.z, c14
mad r0.w, r0, r0.z, c15.x
mad r0.w, r0, r0.z, c15.y
mad r0.z, r0.w, r0, c15
mul r0.z, r0, r0.y
add r0.w, -r0.z, c15
add r0.y, r7.z, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c13.w
cmp r0.y, v2.z, r0, r0.z
cmp r0.y, v2.x, r0, -r0
mad r8.z, r0.y, c16.x, c16.y
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0.x, r0, c13.x
rsq r0.z, r0.z
mad r0.x, r0, r0.y, c13.y
rcp r0.z, r0.z
mul r1.x, r0, r0.z
abs r0.x, v2.y
cmp r0.w, v2.z, c12.x, c12.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.x, -r1.y, c13.z, r1
mad r0.z, r0.w, c13.w, r1.x
mul r0.y, r0.z, c14.x
dsy r0.zw, v2.xyxy
mul r1.xy, v2, c7.x
mul r0.zw, r0, r0
dsx r6.w, r0.y
dsy r6.y, r0
mul r8.w, r0.x, c14.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.x, c16.x
mul r6.x, r0.y, c16
texldd r0.yw, r8.zwzw, s1, r6.zwzw, r6
mad_pp r3.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.xy, r3, r3
add_pp_sat r0.w, r0.x, r0.y
mul r0.xy, v2.zyzw, c7.x
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
mul r0.w, v0.x, c8.x
dp3_pp r4.w, r3, v3
dp3 r1.w, r3, -v3
texld r1.xyz, r1, s2
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r1.xyz, r7.z, r0, r1
mul r2.xy, v2.zxzw, c7.x
texld r0.xyz, r2, s2
mul r2.xyz, r3, r1.w
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r7.w, r0, r1
mad r2.xyz, -r2, c13.z, -v3
add r3.xyz, v5, c17.zzyw
texld r3, r3, s6
add_pp r1.xyz, -r0, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r4.xyz, r0.w, r1, r0
mul r9.xy, v2, c11.x
mul r8.xy, v2.zyzw, c11.x
texld r0, r9, s5
texld r1, r8, s5
add_pp r1, r1, -r0
mad_pp r1, r7.z, r1, r0
mul r7.xy, v2.zxzw, c11.x
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r0, r7.w, r0, r1
texldd r1, r8.zwzw, s3, r6.zwzw, r6
mul_pp r5, r1, r0
dp3_sat r2.x, r2, v1
pow r0, r2.x, c6.x
texldd r2, r8.zwzw, s0, r6.zwzw, r6
mad_pp r5.xyz, -r2, r4, r5
mul_pp r2.xyz, r2, r4
add r6.xyz, v5, c17.yzzw
mov r8.z, r0.x
texld r0, r6, s6
dp4 r6.w, r0, c18
dp4 r6.y, r3, c18
add r0.xyz, v5, c17.zyzw
texld r0, r0, s6
dp4 r6.z, r0, c18
add r0.xyz, v5, c17.y
texld r0, r0, s6
dp3 r3.x, v5, v5
mad_pp r4.xyz, r5.w, r5, r2
rsq r3.x, r3.x
dp4 r6.x, r0, c18
rcp r0.x, r3.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c17.w, r6
mov r3.x, c2
cmp r3, r0, c12.y, r3.x
dp4_pp r0.y, r3, c19.x
add_pp r3.x, r4.w, c12.y
frc_pp r3.y, r3.x
mul_pp r3.w, r4, c3
dp3 r0.x, v4, v4
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp r4.w, r4, c17.x
add_pp_sat r3.x, r3, -r3.y
mul r0.xyz, r0, r8.z
mul r0.xyz, r3.x, r0
mul r3.xyz, r2.w, r0
mul_pp r0.y, r0.w, r3.w
mul_pp r4.w, r4, c3
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c19.y
mul_pp_sat r2.w, r0.y, c19.z
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.w, c0
add_pp r0.xyz, r0, r3
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c10.x
texld r2, r9, s4
texld r3, r8, s4
add_pp r3, r3, -r2
mad_pp r2, r7.z, r3, r2
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r7.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c12.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 152 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 4.00000000, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
mul r1.xy, v2, c7.x
abs r8.zw, v2.xyxy
abs r0.w, v2.z
max r0.x, r8.z, r0.w
rcp r0.y, r0.x
min r0.x, r8.z, r0.w
mul r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.z, r0.y, c14.y, c14
mad r0.z, r0, r0.y, c14.w
mad r0.z, r0, r0.y, c15.x
mad r0.z, r0, r0.y, c15.y
mad r0.y, r0.z, r0, c15.z
mul r0.y, r0, r0.x
texld r1.xyz, r1, s2
add r0.z, -r0.y, c15.w
add r0.x, r8.z, -r0.w
cmp r1.w, -r0.x, r0.y, r0.z
mul r0.xy, v2.zyzw, c7.x
texld r0.xyz, r0, s2
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r8.z, r0, r1
add r2.x, -r1.w, c13.w
cmp r1.z, v2, r1.w, r2.x
cmp r1.w, v2.x, r1.z, -r1.z
mad r6.x, r1.w, c16, c16.y
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
mad r1.w, r0, r1, c13.x
mul r1.xy, v2.zxzw, c7.x
texld r1.xyz, r1, s2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r8.w, r1, r0
rsq r2.x, r2.x
mad r0.w, r0, r1, c13.y
rcp r2.x, r2.x
mul r2.z, r0.w, r2.x
abs r0.w, v2.y
cmp r2.y, v2.z, c12.x, c12
mul r2.w, r2.y, r2.z
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
mad r1.w, r1, r0, c13.x
rsq r2.x, r2.x
mad r0.w, r1, r0, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v2.y, c12.x, c12.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c13.z, r1
mad r0.w, r0, c13, r1
mad r2.z, -r2.w, c13, r2
mad r2.x, r2.y, c13.w, r2.z
mul r1.w, r2.x, c14.x
dsx r2.xy, v2
dsy r2.zw, v2.xyxy
mul r2.xy, r2, r2
mul r6.y, r0.w, c14.x
add r0.w, r2.x, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.zw, r2, r2
dsx r3.w, r1
dsy r3.y, r1.w
add r1.w, r2.z, r2
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c16
mul r3.z, r0.w, c16.x
texldd r2.yw, r6, s1, r3.zwzw, r3
mad_pp r7.xy, r2.wyzw, c16.z, c16.w
mul_pp r2.xy, r7, r7
add_pp_sat r0.w, r2.x, r2.y
add_pp r2.x, -r0.w, c12.y
rsq_pp r2.x, r2.x
rcp_pp r7.z, r2.x
mul r1.w, v0.x, c8.x
dp3 r2.x, r7, -v3
mul r2.xyz, r7, r2.x
mad r2.xyz, -r2, c13.z, -v3
dp3_sat r4.w, r2, v1
texldd r2, r6, s0, r3.zwzw, r3
add_pp r1.xyz, -r0, c12.y
mul_sat r1.w, r1, c13.z
mad_pp r4.xyz, r1.w, r1, r0
mul r10.xy, v2, c11.x
mul r9.xy, v2.zyzw, c11.x
texld r1, r10, s5
texld r0, r9, s5
add_pp r0, r0, -r1
mad_pp r0, r8.z, r0, r1
mul r8.xy, v2.zxzw, c11.x
texld r1, r8, s5
add_pp r1, r1, -r0
mad_pp r0, r8.w, r1, r0
texldd r1, r6, s3, r3.zwzw, r3
mul_pp r5, r1, r0
mad_pp r5.xyz, -r2, r4, r5
pow r0, r4.w, c6.x
mul_pp r2.xyz, r2, r4
mov r4.w, r0.x
add r3.xyz, v5, c17.yzzw
texld r3, r3, s6
dp4 r6.w, r3, c18
add r0.xyz, v5, c17.zyzw
texld r0, r0, s6
dp4 r6.z, r0, c18
add r3.xyz, v5, c17.zzyw
texld r3, r3, s6
dp4 r6.y, r3, c18
add r0.xyz, v5, c17.y
texld r0, r0, s6
dp3 r3.x, v5, v5
dp4 r6.x, r0, c18
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c17.w, r6
dp3_pp r6.x, r7, v3
mov r3.x, c2
cmp r0, r0, c12.y, r3.x
dp4_pp r0.y, r0, c19.x
add_pp r3.x, r6, c12.y
frc_pp r3.y, r3.x
dp3 r0.x, v4, v4
mad_pp r4.xyz, r5.w, r5, r2
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r4.w
add_pp_sat r3.x, r3, -r3.y
mul r0.xyz, r3.x, r0
mul r3.xyz, r2.w, r0
mul_pp r3.w, r6.x, c3
mul_pp r0.y, r0.w, r3.w
add_pp r4.w, r6.x, c17.x
mul_pp r4.w, r4, c3
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c19.y
mul_pp_sat r2.w, r0.y, c19.z
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.w, c0
add_pp r0.xyz, r0, r3
mul_pp r0.xyz, r0, v6.x
mul r5.xyz, r0, c10.x
texld r2, r10, s4
texld r3, r9, s4
add_pp r3, r3, -r2
mad_pp r2, r8.z, r3, r2
texld r3, r8, s4
add_pp r3, r3, -r2
mad_pp r2, r8.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c12.y
mul_pp_sat r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 201

	
		}
		
	} 
	
	FallBack "VertexLit"
}