Shader "Sphere/Terrain" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_MainTexHandoverDist ("Handover Distance", Float) = 1
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
	}


	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 34 to 43
//   d3d11 - ALU: 26 to 38, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58)).w;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58)).w;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 432
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 470
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 474
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 486
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c10, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c10.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r0.w, r0.x
mul o4.xyz, r0.w, r1
dp4 r0.y, c9, c9
rsq r0.y, r0.y
dp3 r0.x, v3, v3
mul r2.xyz, r0.y, c9
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
dp3 r1.w, -r0, r2
add r1.w, r1, c10.y
frc r2.x, r1.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
rsq r0.w, r0.w
add_sat o6.x, r1.w, -r2
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 30 instructions, 2 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcooemjhdoldjnncehbggjoemfokjfbmhabaaaaaaneafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefceaaeaaaaeaaaabaabaabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndpebcaaaaf
iccabaaaadaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_61;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_61;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 421
#line 446
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 429
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    #line 433
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 421
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 466
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 470
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 474
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 478
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 482
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddjohejfinhoakphnjegkgoclkfagnccgabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadiccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
abaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndp
ebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  highp float tmpvar_63;
  tmpvar_63 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w);
  atten_3 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_67;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  highp float tmpvar_63;
  tmpvar_63 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w);
  atten_3 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_67;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 433
#line 459
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 441
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 446
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 433
#line 459
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 450
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 454
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 459
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 463
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 467
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 471
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 475
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 479
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 483
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 487
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 491
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 495
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = (texture2D (_LightTextureB0, vec2(tmpvar_58)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = (texture2D (_LightTextureB0, vec2(tmpvar_58)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 425
#line 451
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 425
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 463
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 467
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 471
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 475
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 479
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 483
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 487
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinehblneocckjkgcbhbjdmankiikgbpcabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaa
adaaaaaagfaaaaadeccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaak
dcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaa
aaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaabaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaafeccabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 432
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 470
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 474
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 486
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_22;
  if ((tmpvar_21.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  vec3 tmpvar_23;
  tmpvar_23 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_23));
  color_2.xyz = (color_2.xyz * tmpvar_23);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump float shadow_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_66;
  if ((tmpvar_65.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  shadow_64 = tmpvar_66;
  tmpvar_63 = shadow_64;
  highp float tmpvar_67;
  tmpvar_67 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump float shadow_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_66;
  if ((tmpvar_65.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  shadow_64 = tmpvar_66;
  tmpvar_63 = shadow_64;
  highp float tmpvar_67;
  tmpvar_67 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 440
#line 456
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 448
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 452
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 440
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 493
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 497
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 501
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump float shadow_64;
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (_LightShadowData.x + (shadow_64 * (1.0 - _LightShadowData.x)));
  shadow_64 = tmpvar_66;
  tmpvar_63 = shadow_64;
  highp float tmpvar_67;
  tmpvar_67 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 441
#line 457
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 449
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 453
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 441
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 490
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 494
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 498
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 502
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c12, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c12.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c11, c11
rsq r1.y, r1.y
mul r1.xyz, r1.y, c11
dp3 r1.y, -r2, r1
dp3 r0.w, r0, r0
rsq r1.x, r0.w
add r0.w, r1.y, c12.y
mul o5.xyz, r1.x, r0
frc r1.z, r0.w
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c12.z
mul r0.y, r0, c9.x
mad o4.xy, r0.z, c10.zwzw, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
mov o0, r1
mov o2, v1
mov o4.zw, r1
rcp o1.x, r0.x
mov o3.xyz, v2
mov o6.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgnhpldfondkmkkpjfioldgpcpkaflacaabaaaaaaieagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcniaeaaaaeaaaabaadgabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadiccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
aaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaaaaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaah
dccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
afaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  mediump float lightShadowDataX_59;
  highp float dist_60;
  lowp float tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = _LightShadowData.x;
  lightShadowDataX_59 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = max (float((dist_60 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_59);
  tmpvar_58 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_67;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58.x), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 430
#line 456
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 438
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 430
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 468
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 472
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 476
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 480
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 484
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 488
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 492
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c16, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c15, c15
rsq r1.y, r1.y
mul r1.xyz, r1.y, c15
dp3 r0.w, r0, r0
dp3 r1.y, -r2, r1
rsq r1.x, r0.w
add r0.w, r1.y, c16.y
mul o6.xyz, r1.x, r0
frc r1.x, r0.w
add_sat o8.x, r0.w, -r1
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r0.xyz, r3.xyww, c16.z
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r3
mov o2, v1
mov o5.zw, r3
rcp o1.x, r0.x
mov o3.xyz, v2
mov o7.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 43 instructions, 3 temp regs, 0 temp arrays:
// ALU 37 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkinkcfgihjpappomodhboebcehgmpgpeabaaaaaaoiahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
ceagaaaaeaaaabaaijabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
eccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaa
egiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
afaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaak
dccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaacaaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
egacbaaaabaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaacaaaaaa
aaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaakehahndpebcaaaaf
eccabaaaadaaaaaaakaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  mediump float lightShadowDataX_59;
  highp float dist_60;
  lowp float tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = _LightShadowData.x;
  lightShadowDataX_59 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = max (float((dist_60 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_59);
  tmpvar_58 = tmpvar_63;
  lowp float tmpvar_64;
  tmpvar_64 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_58);
  mediump float tmpvar_65;
  tmpvar_65 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_64), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_68;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  tmpvar_58 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 433
#line 449
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 441
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 445
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 433
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 470
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 474
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 478
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 486
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 490
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 494
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_20;
  tmpvar_20 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_21;
  tmpvar_21 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_22;
  if ((tmpvar_21 < tmpvar_20)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  vec3 tmpvar_23;
  tmpvar_23 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_23));
  color_2.xyz = (color_2.xyz * tmpvar_23);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = (tmpvar_60.w * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_70;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = (tmpvar_60.w * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_70;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 438
#line 454
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 446
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 450
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 438
#line 454
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 458
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 462
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 465
lowp vec4 frag( in v2f IN ) {
    #line 467
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 471
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 475
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 479
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 483
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 487
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 491
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 495
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 499
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  vec3 tmpvar_24;
  tmpvar_24 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * tmpvar_23)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_66);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_66);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 439
#line 455
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 447
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 451
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 439
#line 455
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 459
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 463
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    #line 468
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 472
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 476
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 480
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 484
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 488
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 492
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 496
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 500
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_21;
  vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_30));
  color_2.xyz = (color_2.xyz * tmpvar_30);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_67;
  P_67 = (tmpvar_66.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_65.x = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_66.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_65.y = tmpvar_70;
  highp vec2 P_71;
  P_71 = (tmpvar_66.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_72;
  tmpvar_72 = texture2D (_ShadowMapTexture, P_71).x;
  shadowVals_65.z = tmpvar_72;
  highp vec2 P_73;
  P_73 = (tmpvar_66.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_ShadowMapTexture, P_73).x;
  shadowVals_65.w = tmpvar_74;
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_65, tmpvar_66.zzzz);
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  highp vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  shadows_64 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_87;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_67;
  P_67 = (tmpvar_66.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_65.x = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_66.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_65.y = tmpvar_70;
  highp vec2 P_71;
  P_71 = (tmpvar_66.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_72;
  tmpvar_72 = texture2D (_ShadowMapTexture, P_71).x;
  shadowVals_65.z = tmpvar_72;
  highp vec2 P_73;
  P_73 = (tmpvar_66.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_ShadowMapTexture, P_73).x;
  shadowVals_65.w = tmpvar_74;
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_65, tmpvar_66.zzzz);
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  highp vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  shadows_64 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_87;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 456
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 460
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 501
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 505
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 509
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec4 shadows_18;
  vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_18.x = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[0].xyz)).x;
  shadows_18.y = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[1].xyz)).x;
  shadows_18.z = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[2].xyz)).x;
  shadows_18.w = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_20;
  tmpvar_20 = (_LightShadowData.xxxx + (shadows_18 * (1.0 - _LightShadowData.xxxx)));
  shadows_18 = tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_21 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_20, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_21));
  color_2.xyz = (color_2.xyz * tmpvar_21);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_66;
  coord_66 = (tmpvar_65 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_64.x = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_65 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_64.y = tmpvar_69;
  highp vec3 coord_70;
  coord_70 = (tmpvar_65 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_71;
  tmpvar_71 = shadow2DEXT (_ShadowMapTexture, coord_70);
  shadows_64.z = tmpvar_71;
  highp vec3 coord_72;
  coord_72 = (tmpvar_65 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_73;
  tmpvar_73 = shadow2DEXT (_ShadowMapTexture, coord_72);
  shadows_64.w = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (_LightShadowData.xxxx + (shadows_64 * (1.0 - _LightShadowData.xxxx)));
  shadows_64 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_76;
  mediump float tmpvar_77;
  tmpvar_77 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_78;
  tmpvar_78 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_77)), 0.0, 1.0);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_80;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 456
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 460
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 501
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 505
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 509
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_20;
  shadowVals_20.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_21;
  tmpvar_21 = lessThan (shadowVals_20, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_22;
  tmpvar_22 = _LightShadowData.xxxx;
  float tmpvar_23;
  if (tmpvar_21.x) {
    tmpvar_23 = tmpvar_22.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_21.y) {
    tmpvar_24 = tmpvar_22.y;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_21.z) {
    tmpvar_25 = tmpvar_22.z;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_21.w) {
    tmpvar_26 = tmpvar_22.w;
  } else {
    tmpvar_26 = 1.0;
  };
  vec4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  vec3 tmpvar_28;
  tmpvar_28 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_28));
  color_2.xyz = (color_2.xyz * tmpvar_28);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_60.w * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_89;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_60.w * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_89;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 444
#line 460
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 452
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 456
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 444
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 497
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 505
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  vec3 tmpvar_29;
  tmpvar_29 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_29));
  color_2.xyz = (color_2.xyz * tmpvar_29);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_90;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_90;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 445
#line 461
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 457
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 445
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 494
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 498
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 502
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 506
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58)).w;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58)).w;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 432
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 470
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 474
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 486
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c10, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c10.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r0.w, r0.x
mul o4.xyz, r0.w, r1
dp4 r0.y, c9, c9
rsq r0.y, r0.y
dp3 r0.x, v3, v3
mul r2.xyz, r0.y, c9
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
dp3 r1.w, -r0, r2
add r1.w, r1, c10.y
frc r2.x, r1.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
rsq r0.w, r0.w
add_sat o6.x, r1.w, -r2
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 30 instructions, 2 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcooemjhdoldjnncehbggjoemfokjfbmhabaaaaaaneafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefceaaeaaaaeaaaabaabaabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndpebcaaaaf
iccabaaaadaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_61;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_61;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 421
#line 446
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 429
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    #line 433
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
#line 421
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 466
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 470
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 474
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 478
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 482
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddjohejfinhoakphnjegkgoclkfagnccgabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadiccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
abaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndp
ebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  highp float tmpvar_63;
  tmpvar_63 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w);
  atten_3 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_67;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  highp float tmpvar_63;
  tmpvar_63 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w);
  atten_3 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_67;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 433
#line 459
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 441
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 446
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
#line 433
#line 459
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 450
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 454
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 459
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 463
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 467
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 471
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 475
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 479
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 483
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 487
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 491
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 495
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = (texture2D (_LightTextureB0, vec2(tmpvar_58)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_59;
  tmpvar_59 = (texture2D (_LightTextureB0, vec2(tmpvar_58)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_59), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_63;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 425
#line 451
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
#line 425
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 463
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 467
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 471
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 475
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 479
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 483
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 487
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinehblneocckjkgcbhbjdmankiikgbpcabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaa
adaaaaaagfaaaaadeccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaak
dcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaa
aaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaabaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaafeccabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 432
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
#line 424
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 470
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 474
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 486
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_22;
  if ((tmpvar_21.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  vec3 tmpvar_23;
  tmpvar_23 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_23));
  color_2.xyz = (color_2.xyz * tmpvar_23);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump float shadow_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_66;
  if ((tmpvar_65.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  shadow_64 = tmpvar_66;
  tmpvar_63 = shadow_64;
  highp float tmpvar_67;
  tmpvar_67 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump float shadow_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_66;
  if ((tmpvar_65.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  shadow_64 = tmpvar_66;
  tmpvar_63 = shadow_64;
  highp float tmpvar_67;
  tmpvar_67 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 440
#line 456
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 448
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 452
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
#line 440
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 493
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 497
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 501
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump float shadow_64;
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (_LightShadowData.x + (shadow_64 * (1.0 - _LightShadowData.x)));
  shadow_64 = tmpvar_66;
  tmpvar_63 = shadow_64;
  highp float tmpvar_67;
  tmpvar_67 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 441
#line 457
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 449
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 453
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
#line 441
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 490
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 494
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 498
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 502
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c12, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c12.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c11, c11
rsq r1.y, r1.y
mul r1.xyz, r1.y, c11
dp3 r1.y, -r2, r1
dp3 r0.w, r0, r0
rsq r1.x, r0.w
add r0.w, r1.y, c12.y
mul o5.xyz, r1.x, r0
frc r1.z, r0.w
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c12.z
mul r0.y, r0, c9.x
mad o4.xy, r0.z, c10.zwzw, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
mov o0, r1
mov o2, v1
mov o4.zw, r1
rcp o1.x, r0.x
mov o3.xyz, v2
mov o6.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgnhpldfondkmkkpjfioldgpcpkaflacaabaaaaaaieagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcniaeaaaaeaaaabaadgabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadiccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
aaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaaaaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaah
dccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
afaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  mediump float lightShadowDataX_59;
  highp float dist_60;
  lowp float tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = _LightShadowData.x;
  lightShadowDataX_59 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = max (float((dist_60 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_59);
  tmpvar_58 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_67;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58.x), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 430
#line 456
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 438
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
#line 430
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 468
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 472
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 476
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    #line 480
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 484
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 488
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 492
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec3 tmpvar_18;
  tmpvar_18 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_18));
  color_2.xyz = (color_2.xyz * tmpvar_18);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c16, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c15, c15
rsq r1.y, r1.y
mul r1.xyz, r1.y, c15
dp3 r0.w, r0, r0
dp3 r1.y, -r2, r1
rsq r1.x, r0.w
add r0.w, r1.y, c16.y
mul o6.xyz, r1.x, r0
frc r1.x, r0.w
add_sat o8.x, r0.w, -r1
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r0.xyz, r3.xyww, c16.z
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r3
mov o2, v1
mov o5.zw, r3
rcp o1.x, r0.x
mov o3.xyz, v2
mov o7.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 43 instructions, 3 temp regs, 0 temp arrays:
// ALU 37 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkinkcfgihjpappomodhboebcehgmpgpeabaaaaaaoiahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
ceagaaaaeaaaabaaijabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
eccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaa
egiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
afaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaak
dccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaacaaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
egacbaaaabaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaacaaaaaa
aaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaakehahndpebcaaaaf
eccabaaaadaaaaaaakaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  mediump float lightShadowDataX_59;
  highp float dist_60;
  lowp float tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = _LightShadowData.x;
  lightShadowDataX_59 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = max (float((dist_60 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_59);
  tmpvar_58 = tmpvar_63;
  lowp float tmpvar_64;
  tmpvar_64 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_58);
  mediump float tmpvar_65;
  tmpvar_65 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_64), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_68;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_51 * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (mix (color_17, main_15, vec4(tmpvar_53)) * _Color);
  color_17.w = tmpvar_54.w;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_57;
  lowp float tmpvar_58;
  tmpvar_58 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_54.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_62;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 433
#line 449
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 441
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 445
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
#line 433
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 470
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 474
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 478
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 486
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 490
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 494
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_20;
  tmpvar_20 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_21;
  tmpvar_21 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_22;
  if ((tmpvar_21 < tmpvar_20)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  vec3 tmpvar_23;
  tmpvar_23 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_23));
  color_2.xyz = (color_2.xyz * tmpvar_23);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = (tmpvar_60.w * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_70;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = (tmpvar_60.w * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_70;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 438
#line 454
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 446
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 450
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
#line 438
#line 454
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 458
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 462
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 465
lowp vec4 frag( in v2f IN ) {
    #line 467
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 471
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 475
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 479
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 483
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 487
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 491
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 495
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 499
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  vec3 tmpvar_24;
  tmpvar_24 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * tmpvar_23)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_66);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_66);
  atten_3 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_2 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_71;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 439
#line 455
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 447
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 451
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
#line 439
#line 455
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 459
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 463
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    #line 468
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 472
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 476
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 480
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 484
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 488
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 492
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 496
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 500
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_21;
  vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_30));
  color_2.xyz = (color_2.xyz * tmpvar_30);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_67;
  P_67 = (tmpvar_66.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_65.x = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_66.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_65.y = tmpvar_70;
  highp vec2 P_71;
  P_71 = (tmpvar_66.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_72;
  tmpvar_72 = texture2D (_ShadowMapTexture, P_71).x;
  shadowVals_65.z = tmpvar_72;
  highp vec2 P_73;
  P_73 = (tmpvar_66.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_ShadowMapTexture, P_73).x;
  shadowVals_65.w = tmpvar_74;
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_65, tmpvar_66.zzzz);
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  highp vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  shadows_64 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_87;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_67;
  P_67 = (tmpvar_66.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_65.x = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_66.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_65.y = tmpvar_70;
  highp vec2 P_71;
  P_71 = (tmpvar_66.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_72;
  tmpvar_72 = texture2D (_ShadowMapTexture, P_71).x;
  shadowVals_65.z = tmpvar_72;
  highp vec2 P_73;
  P_73 = (tmpvar_66.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_ShadowMapTexture, P_73).x;
  shadowVals_65.w = tmpvar_74;
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_65, tmpvar_66.zzzz);
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  highp vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  shadows_64 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_2 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_87;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 456
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 460
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 501
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 505
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 509
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2.w = tmpvar_17.w;
  vec4 shadows_18;
  vec3 tmpvar_19;
  tmpvar_19 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_18.x = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[0].xyz)).x;
  shadows_18.y = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[1].xyz)).x;
  shadows_18.z = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[2].xyz)).x;
  shadows_18.w = shadow2D (_ShadowMapTexture, (tmpvar_19 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_20;
  tmpvar_20 = (_LightShadowData.xxxx + (shadows_18 * (1.0 - _LightShadowData.xxxx)));
  shadows_18 = tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_21 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_20, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_21));
  color_2.xyz = (color_2.xyz * tmpvar_21);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18.w = tmpvar_55.w;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_59 = texture2D (_LightTexture0, P_60);
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_LightTextureB0, vec2(tmpvar_61));
  lowp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_66;
  coord_66 = (tmpvar_65 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_64.x = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_65 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_64.y = tmpvar_69;
  highp vec3 coord_70;
  coord_70 = (tmpvar_65 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_71;
  tmpvar_71 = shadow2DEXT (_ShadowMapTexture, coord_70);
  shadows_64.z = tmpvar_71;
  highp vec3 coord_72;
  coord_72 = (tmpvar_65 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_73;
  tmpvar_73 = shadow2DEXT (_ShadowMapTexture, coord_72);
  shadows_64.w = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (_LightShadowData.xxxx + (shadows_64 * (1.0 - _LightShadowData.xxxx)));
  shadows_64 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_59.w) * tmpvar_62.w) * tmpvar_63);
  atten_3 = tmpvar_76;
  mediump float tmpvar_77;
  tmpvar_77 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_78;
  tmpvar_78 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_77)), 0.0, 1.0);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_80;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 456
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 460
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
#line 448
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 501
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 505
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 509
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_20;
  shadowVals_20.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_21;
  tmpvar_21 = lessThan (shadowVals_20, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_22;
  tmpvar_22 = _LightShadowData.xxxx;
  float tmpvar_23;
  if (tmpvar_21.x) {
    tmpvar_23 = tmpvar_22.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_21.y) {
    tmpvar_24 = tmpvar_22.y;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_21.z) {
    tmpvar_25 = tmpvar_22.z;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_21.w) {
    tmpvar_26 = tmpvar_22.w;
  } else {
    tmpvar_26 = 1.0;
  };
  vec4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  vec3 tmpvar_28;
  tmpvar_28 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_28));
  color_2.xyz = (color_2.xyz * tmpvar_28);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_60.w * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_89;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTexture0, vec2(tmpvar_59));
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (tmpvar_60.w * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_89;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 444
#line 460
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 452
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 456
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
#line 444
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 497
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 505
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  vec3 tmpvar_29;
  tmpvar_29 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_2.xyz = (tmpvar_17.xyz + (_Albedo * tmpvar_29));
  color_2.xyz = (color_2.xyz * tmpvar_29);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_90;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_52 * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  mediump vec4 tmpvar_55;
  tmpvar_55 = (mix (color_18, main_16, vec4(tmpvar_54)) * _Color);
  color_18 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = ((tmpvar_60.w * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_55.xyz + (_Albedo * light_2));
  color_18.xyz = tmpvar_90;
  color_18.xyz = (color_18.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 445
#line 461
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 457
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
#line 445
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 494
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    color *= _Color;
    #line 498
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 502
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 506
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86)).w;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86)).w;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 436
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 474
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 478
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 482
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 486
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 490
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 498
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 502
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 506
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_23) * 4.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_24));
  color_4.xyz = (color_4.xyz * tmpvar_24);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c10, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c10.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r0.w, r0.x
mul o4.xyz, r0.w, r1
dp4 r0.y, c9, c9
rsq r0.y, r0.y
dp3 r0.x, v3, v3
mul r2.xyz, r0.y, c9
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
dp3 r1.w, -r0, r2
add r1.w, r1, c10.y
frc r2.x, r1.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
rsq r0.w, r0.w
add_sat o6.x, r1.w, -r2
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 30 instructions, 2 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcooemjhdoldjnncehbggjoemfokjfbmhabaaaaaaneafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefceaaeaaaaeaaaabaabaabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndpebcaaaaf
iccabaaaadaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_89;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_89;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 470
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 482
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 486
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 494
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 498
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 502
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddjohejfinhoakphnjegkgoclkfagnccgabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadiccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
abaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndp
ebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  highp float tmpvar_91;
  tmpvar_91 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w);
  atten_3 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_95;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  highp float tmpvar_91;
  tmpvar_91 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w);
  atten_3 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_95;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 463
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 445
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 450
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 483
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 487
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 491
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 495
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 499
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 503
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 507
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 511
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 515
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = (texture2D (_LightTextureB0, vec2(tmpvar_86)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = (texture2D (_LightTextureB0, vec2(tmpvar_86)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 455
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 437
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 467
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 471
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 475
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 479
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 483
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 487
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 491
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 495
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 499
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 503
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 507
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinehblneocckjkgcbhbjdmankiikgbpcabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaa
adaaaaaagfaaaaadeccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaak
dcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaa
aaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaabaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaafeccabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 436
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 474
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 478
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 482
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 486
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 490
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 498
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 502
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 506
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_27;
  if ((tmpvar_26.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 460
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 452
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 456
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 501
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 505
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 509
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 517
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 521
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 525
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp float tmpvar_93;
  tmpvar_93 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_92 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = (_LightShadowData.x + (shadow_92 * (1.0 - _LightShadowData.x)));
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 461
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 457
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 498
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 502
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 506
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 510
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 514
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 518
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 522
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 526
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24.x), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c12, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c12.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c11, c11
rsq r1.y, r1.y
mul r1.xyz, r1.y, c11
dp3 r1.y, -r2, r1
dp3 r0.w, r0, r0
rsq r1.x, r0.w
add r0.w, r1.y, c12.y
mul o5.xyz, r1.x, r0
frc r1.z, r0.w
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c12.z
mul r0.y, r0, c9.x
mad o4.xy, r0.z, c10.zwzw, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
mov o0, r1
mov o2, v1
mov o4.zw, r1
rcp o1.x, r0.x
mov o3.xyz, v2
mov o6.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgnhpldfondkmkkpjfioldgpcpkaflacaabaaaaaaieagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcniaeaaaaeaaaabaadgabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadiccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
aaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaaaaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaah
dccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
afaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  mediump float lightShadowDataX_87;
  highp float dist_88;
  lowp float tmpvar_89;
  tmpvar_89 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_88 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = _LightShadowData.x;
  lightShadowDataX_87 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = max (float((dist_88 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_87);
  tmpvar_86 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_95;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86.x), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86.x), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 442
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 472
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 476
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 480
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 484
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 488
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 492
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 496
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 504
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 508
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 512
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c16, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c15, c15
rsq r1.y, r1.y
mul r1.xyz, r1.y, c15
dp3 r0.w, r0, r0
dp3 r1.y, -r2, r1
rsq r1.x, r0.w
add r0.w, r1.y, c16.y
mul o6.xyz, r1.x, r0
frc r1.x, r0.w
add_sat o8.x, r0.w, -r1
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r0.xyz, r3.xyww, c16.z
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r3
mov o2, v1
mov o5.zw, r3
rcp o1.x, r0.x
mov o3.xyz, v2
mov o7.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 13 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 43 instructions, 3 temp regs, 0 temp arrays:
// ALU 37 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkinkcfgihjpappomodhboebcehgmpgpeabaaaaaaoiahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
ceagaaaaeaaaabaaijabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
eccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaa
egiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
afaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaak
dccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaacaaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
egacbaaaabaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaacaaaaaa
aaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaakehahndpebcaaaaf
eccabaaaadaaaaaaakaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  mediump float lightShadowDataX_87;
  highp float dist_88;
  lowp float tmpvar_89;
  tmpvar_89 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_88 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = _LightShadowData.x;
  lightShadowDataX_87 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = max (float((dist_88 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_87);
  tmpvar_86 = tmpvar_91;
  lowp float tmpvar_92;
  tmpvar_92 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_86);
  mediump float tmpvar_93;
  tmpvar_93 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_92), 0.0, 1.0);
  highp vec3 tmpvar_94;
  tmpvar_94 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_93)), 0.0, 1.0);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_96;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_92), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 453
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 445
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 449
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 486
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 490
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 494
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 498
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 502
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 506
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 510
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 514
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 518
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (tmpvar_24.w * tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_98;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_98;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 458
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 450
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 454
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 479
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 483
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 487
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 495
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 499
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 507
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 511
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 515
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 519
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 523
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_26;
  tmpvar_26 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_27;
  tmpvar_27 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_28;
  if ((tmpvar_27 < tmpvar_26)) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_24.w * tmpvar_25.w) * tmpvar_28);
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_29), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 459
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 451
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 455
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 480
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 484
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 488
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 500
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 508
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 516
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 520
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_26;
  vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_26.x = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_26.y = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_26.z = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_26.w = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_26, tmpvar_27.zzzz);
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_35), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_36));
  color_4.xyz = (color_4.xyz * tmpvar_36);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_35), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 13 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_115;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_115;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 460
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 464
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 489
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 493
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 497
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 505
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 509
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 513
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 517
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 521
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 525
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 529
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 533
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 shadows_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_24.x = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[0].xyz)).x;
  shadows_24.y = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[1].xyz)).x;
  shadows_24.z = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[2].xyz)).x;
  shadows_24.w = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_26;
  tmpvar_26 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  shadows_24 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_26, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_28;
  tmpvar_28 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_28));
  color_4.xyz = (color_4.xyz * tmpvar_28);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 13 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_94;
  coord_94 = (tmpvar_93 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_95;
  tmpvar_95 = shadow2DEXT (_ShadowMapTexture, coord_94);
  shadows_92.x = tmpvar_95;
  highp vec3 coord_96;
  coord_96 = (tmpvar_93 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_97;
  tmpvar_97 = shadow2DEXT (_ShadowMapTexture, coord_96);
  shadows_92.y = tmpvar_97;
  highp vec3 coord_98;
  coord_98 = (tmpvar_93 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_99;
  tmpvar_99 = shadow2DEXT (_ShadowMapTexture, coord_98);
  shadows_92.z = tmpvar_99;
  highp vec3 coord_100;
  coord_100 = (tmpvar_93 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_101;
  tmpvar_101 = shadow2DEXT (_ShadowMapTexture, coord_100);
  shadows_92.w = tmpvar_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (_LightShadowData.xxxx + (shadows_92 * (1.0 - _LightShadowData.xxxx)));
  shadows_92 = tmpvar_102;
  mediump float tmpvar_103;
  tmpvar_103 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_103;
  highp float tmpvar_104;
  tmpvar_104 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_108;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 460
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 464
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 489
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 493
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 497
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 505
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 509
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 513
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 517
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 521
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 525
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 529
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 533
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_24.w * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_34;
  tmpvar_34 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_34));
  color_4.xyz = (color_4.xyz * tmpvar_34);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_33), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_117;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_117;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 464
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 456
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 460
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 505
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 509
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 513
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 521
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 525
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 529
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_26;
  shadowVals_26.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_26, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_24.w * tmpvar_25.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_117;
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_118;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_117;
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_118;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 465
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 457
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 461
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 486
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 490
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 494
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 498
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 502
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 506
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 510
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 514
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 522
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 526
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 530
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86)).w;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86)).w;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 436
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 474
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 478
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 482
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 486
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 490
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 498
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 502
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 506
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec3 tmpvar_24;
  tmpvar_24 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_23) * 4.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_24));
  color_4.xyz = (color_4.xyz * tmpvar_24);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c10, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c10.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r0.w, r0.x
mul o4.xyz, r0.w, r1
dp4 r0.y, c9, c9
rsq r0.y, r0.y
dp3 r0.x, v3, v3
mul r2.xyz, r0.y, c9
rsq r0.x, r0.x
mul r0.xyz, r0.x, v3
dp3 r1.w, -r0, r2
add r1.w, r1, c10.y
frc r2.x, r1.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
rsq r0.w, r0.w
add_sat o6.x, r1.w, -r2
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 30 instructions, 2 temp regs, 0 temp arrays:
// ALU 26 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcooemjhdoldjnncehbggjoemfokjfbmhabaaaaaaneafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefceaaeaaaaeaaaabaabaabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaaeaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndpebcaaaaf
iccabaaaadaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_89;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_89;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 405
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 470
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 482
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 486
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 494
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 498
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 502
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddjohejfinhoakphnjegkgoclkfagnccgabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadiccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
abaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakehahndp
ebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  highp float tmpvar_91;
  tmpvar_91 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w);
  atten_3 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_95;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  highp float tmpvar_91;
  tmpvar_91 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w);
  atten_3 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_95;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 463
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 445
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 450
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 483
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 487
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 491
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 495
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 499
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 503
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 507
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 511
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 515
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmehbjgaofnhedcegmoldbpmmpndbnbgpabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadiccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = (texture2D (_LightTextureB0, vec2(tmpvar_86)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_87;
  tmpvar_87 = (texture2D (_LightTextureB0, vec2(tmpvar_86)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_87), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_91;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_87), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 455
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 437
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 408
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 467
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 471
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 475
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 479
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 483
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 487
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 491
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 495
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 499
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 503
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 507
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 37 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c14.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c14
frc r0.z, r0.y
add_sat o7.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o5.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
mov o6.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 38 instructions, 2 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinehblneocckjkgcbhbjdmankiikgbpcabaaaaaadiahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcimafaaaaeaaaabaagdabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaa
adaaaaaagfaaaaadeccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
hccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaak
dcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaa
aaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaabaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaia
ebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
kehahndpebcaaaafeccabaaaadaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 436
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 407
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 474
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 478
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 482
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 486
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 490
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 498
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 502
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 506
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_27;
  if ((tmpvar_26.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 460
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 452
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 456
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 422
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 501
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 505
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 509
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 513
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 517
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 521
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 525
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbpdggfjdbahnhcpppkojibchkgaodpgpabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp float tmpvar_93;
  tmpvar_93 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_92 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = (_LightShadowData.x + (shadow_92 * (1.0 - _LightShadowData.x)));
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 461
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 457
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 498
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 502
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 506
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 510
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 514
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 518
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 522
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 526
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24.x), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c12, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c12.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c11, c11
rsq r1.y, r1.y
mul r1.xyz, r1.y, c11
dp3 r1.y, -r2, r1
dp3 r0.w, r0, r0
rsq r1.x, r0.w
add r0.w, r1.y, c12.y
mul o5.xyz, r1.x, r0
frc r1.z, r0.w
add_sat o7.x, r0.w, -r1.z
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c12.z
mul r0.y, r0, c9.x
mad o4.xy, r0.z, c10.zwzw, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
mov o0, r1
mov o2, v1
mov o4.zw, r1
rcp o1.x, r0.x
mov o3.xyz, v2
mov o6.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 35 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgnhpldfondkmkkpjfioldgpcpkaflacaabaaaaaaieagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcniaeaaaaeaaaabaadgabaaaafjaaaaaeegiocaaaaaaaaaaa
agaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadiccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
aaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaaaaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaah
dccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
afaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaaeaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  mediump float lightShadowDataX_87;
  highp float dist_88;
  lowp float tmpvar_89;
  tmpvar_89 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_88 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = _LightShadowData.x;
  lightShadowDataX_87 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = max (float((dist_88 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_87);
  tmpvar_86 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_95;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86.x), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86.x), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 442
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 472
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 476
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 480
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 484
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 488
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    #line 492
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 496
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 504
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 508
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 512
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  tmpvar_4 = -(normalize(TANGENT));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_4, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c16, 0.00000000, 0.99000001, 0.50000000, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r1.x, v3, v3
rsq r1.w, r1.x
mul r2.xyz, r1.w, v3
dp4 r1.y, c15, c15
rsq r1.y, r1.y
mul r1.xyz, r1.y, c15
dp3 r0.w, r0, r0
dp3 r1.y, -r2, r1
rsq r1.x, r0.w
add r0.w, r1.y, c16.y
mul o6.xyz, r1.x, r0
frc r1.x, r0.w
add_sat o8.x, r0.w, -r1
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r0.xyz, r3.xyww, c16.z
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r3
mov o2, v1
mov o5.zw, r3
rcp o1.x, r0.x
mov o3.xyz, v2
mov o7.xyz, -r2
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 13 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 43 instructions, 3 temp regs, 0 temp arrays:
// ALU 37 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkinkcfgihjpappomodhboebcehgmpgpeabaaaaaaoiahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
ceagaaaaeaaaabaaijabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
eccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaa
egiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
afaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaak
dccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaacaaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaaibcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
egacbaaaabaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaacaaaaaa
aaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaakehahndpebcaaaaf
eccabaaaadaaaaaaakaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_6;
  tmpvar_6 = normalize(_WorldSpaceLightPos0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, tmpvar_6.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  mediump float lightShadowDataX_87;
  highp float dist_88;
  lowp float tmpvar_89;
  tmpvar_89 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_88 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = _LightShadowData.x;
  lightShadowDataX_87 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = max (float((dist_88 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_87);
  tmpvar_86 = tmpvar_91;
  lowp float tmpvar_92;
  tmpvar_92 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_86);
  mediump float tmpvar_93;
  tmpvar_93 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_92), 0.0, 1.0);
  highp vec3 tmpvar_94;
  tmpvar_94 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_93)), 0.0, 1.0);
  light_2 = tmpvar_94;
  highp vec3 tmpvar_95;
  tmpvar_95 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_96;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_92), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_2.xyz));
  lowp vec4 tmpvar_7;
  tmpvar_7 = normalize(_WorldSpaceLightPos0);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_8;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_6, tmpvar_7.xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (mix (color_25, main_23, vec4(tmpvar_74)), tmpvar_81, tmpvar_81.wwww) * _Color);
  color_25.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_83;
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_85;
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_82.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_90;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 453
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 445
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 449
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 486
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 490
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 494
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 498
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 502
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 506
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 510
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 514
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 518
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (tmpvar_24.w * tmpvar_27);
  vec3 tmpvar_29;
  tmpvar_29 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_98;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_98;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 458
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 450
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 454
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 479
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 483
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 487
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 495
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 499
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 507
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 511
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 515
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 519
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 523
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_26;
  tmpvar_26 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_27;
  tmpvar_27 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_28;
  if ((tmpvar_27 < tmpvar_26)) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_24.w * tmpvar_25.w) * tmpvar_28);
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_29), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_3 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_2 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_99;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 459
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 451
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 455
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 480
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 484
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 488
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 500
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 508
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 516
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 520
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_26;
  vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_26.x = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_26.y = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_26.z = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_26.w = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_26, tmpvar_27.zzzz);
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_35), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_36));
  color_4.xyz = (color_4.xyz * tmpvar_36);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_35), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 13 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_115;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_2 = tmpvar_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_115;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 460
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 464
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 489
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 493
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 497
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 505
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 509
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 513
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 517
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 521
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 525
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 529
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 533
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 shadows_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_24.x = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[0].xyz)).x;
  shadows_24.y = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[1].xyz)).x;
  shadows_24.z = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[2].xyz)).x;
  shadows_24.w = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_26;
  tmpvar_26 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  shadows_24 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_26, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_28;
  tmpvar_28 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_28));
  color_4.xyz = (color_4.xyz * tmpvar_28);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c18.x
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add r0.y, r1.w, c18
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 13 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
// 42 instructions, 2 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaghfkjdemhdgnhebdalkicmeopefceaiabaaaaaaaeaiaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
eaagaaaaeaaaabaajaabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadiccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaaf
pccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
afaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaafaaaaaaakaabaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_79.xyz;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26.w = tmpvar_83.w;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_94;
  coord_94 = (tmpvar_93 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_95;
  tmpvar_95 = shadow2DEXT (_ShadowMapTexture, coord_94);
  shadows_92.x = tmpvar_95;
  highp vec3 coord_96;
  coord_96 = (tmpvar_93 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_97;
  tmpvar_97 = shadow2DEXT (_ShadowMapTexture, coord_96);
  shadows_92.y = tmpvar_97;
  highp vec3 coord_98;
  coord_98 = (tmpvar_93 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_99;
  tmpvar_99 = shadow2DEXT (_ShadowMapTexture, coord_98);
  shadows_92.z = tmpvar_99;
  highp vec3 coord_100;
  coord_100 = (tmpvar_93 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_101;
  tmpvar_101 = shadow2DEXT (_ShadowMapTexture, coord_100);
  shadows_92.w = tmpvar_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (_LightShadowData.xxxx + (shadows_92 * (1.0 - _LightShadowData.xxxx)));
  shadows_92 = tmpvar_102;
  mediump float tmpvar_103;
  tmpvar_103 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_103;
  highp float tmpvar_104;
  tmpvar_104 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_3 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_108;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 460
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 464
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 452
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 489
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 493
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 497
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 505
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 509
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 513
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 517
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 521
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 525
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 529
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 533
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_24.w * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_34;
  tmpvar_34 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_34));
  color_4.xyz = (color_4.xyz * tmpvar_34);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_33), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_117;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_117;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 464
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 456
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 460
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 505
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 509
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 513
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 517
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 521
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 525
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 529
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  tmpvar_3 = -(normalize(TANGENT));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_3, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (mix ((mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0))) * xlv_TEXCOORD1), texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw), vec4(clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_26;
  shadowVals_26.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_26, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_24.w * tmpvar_25.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD7);
  color_4.xyz = (tmpvar_22.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.99000001, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
dp3 r0.x, v3, v3
rsq r0.w, r0.x
mul r2.xyz, r0.w, v3
dp4 r0.y, c13, c13
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
add r0.y, r1.w, c15
frc r0.z, r0.y
add_sat o8.x, r0.y, -r0.z
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mul o6.xyz, r0.x, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c14
mov o7.xyz, -r2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 12 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 39 instructions, 2 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbikainndkiobbhaincamckimagihlmjlabaaaaaaiaahaaaaadaaaaaa
cmaaaaaalmaaaaaalmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
lmafaaaaeaaaabaagpabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaacaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaaf
occabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaa
abaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaadaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakehahndpebcaaaaficcabaaaadaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_117;
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_118;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  tmpvar_5 = -(normalize(tmpvar_2.xyz));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = clamp (floor((0.99 + dot (tmpvar_5, normalize(_WorldSpaceLightPos0).xyz))), 0.0, 1.0);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (pow ((_MainTexHandoverDist * xlv_TEXCOORD0), 3.0), 0.0, 1.0);
  highp float tmpvar_76;
  tmpvar_76 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_76);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_83;
  tmpvar_83 = (mix (mix (color_26, main_24, vec4(tmpvar_75)), tmpvar_82, tmpvar_82.wwww) * _Color);
  color_26 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_2 * xlv_TEXCOORD7);
  light_2 = tmpvar_117;
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_83.xyz + (_Albedo * light_2));
  color_26.xyz = tmpvar_118;
  color_26.xyz = (color_26.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_79.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 465
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 457
    o.color = v.color;
    o.normal = v.normal;
    o.terminator = xll_saturate_f(floor((0.99 + dot( o.sphereNormal, vec3( normalize(_WorldSpaceLightPos0))))));
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 461
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 486
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 490
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 494
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 498
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 502
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 506
    color = (mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)) * IN.color);
    color = mix( color, main, vec4( xll_saturate_f(pow( (_MainTexHandoverDist * IN.viewDist), 3.0))));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 510
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 514
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 522
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 526
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 530
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 107 to 155, TEX: 9 to 24
//   d3d11 - ALU: 80 to 123, TEX: 6 to 18, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 109 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v5, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0, c14
rcp r1.w, r1.w
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0.xyz, r0.zwzw, s0, r2, r0
mul r1.xyz, r1, v1
add_pp r2.xyz, r0, -r1
dp4 r1.w, c1, c1
rsq r0.w, r1.w
mul r3.xyz, r0.w, c1
dp3_sat r0.y, v4, r3
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v6.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 93 instructions, 6 temp regs, 0 temp arrays:
// ALU 78 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpelipkgfnboffepbbiogcnafeiilahfdabaaaaaaemaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpmamaaaaeaaaaaaadpadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaafaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaa
kgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 107 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.x
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r3.w, r0, c14, c14.y
mul r2.xy, v4, c5.x
texld r3.xyz, r2, s2
mul r0.xy, v4.zyzw, c6.x
mul r1.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r2.xy, v4
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c12.y, c12.z
mad r2.w, r2, r2.z, c12
mad r2.w, r2, r2.z, c13.x
mad r2.w, r2, r2.z, c13.y
mad r2.z, r2.w, r2, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v4, c6.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v4.zxzw, c6.x
mul r3.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
add r1.w, r2.x, -r0
add r2.z, -r2.y, c13.w
cmp r1.w, -r1, r2.y, r2.z
mul r2.x, v0, c7
dsy r2.zw, v4.xyxy
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.x, -r1.w, c11.w
cmp r0.x, v4.z, r1.w, r0
cmp r0.x, v4, r0, -r0
mad r2.x, r0, c14, c14.y
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
dp4_pp r0.y, c1, c1
mul r3.xyz, r1, v1
rsq_pp r0.y, r0.y
mul_pp r1.xyz, r0.y, c1
add r0.y, -r0.w, c10
mad r0.x, r0.w, r0, c11.y
abs r0.w, v4.y
add r2.y, -r0.w, c10
mad r1.w, r0, c10.z, c10
mad r1.w, r1, r0, c11.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
rsq r2.y, r2.y
mad r0.w, r1, r0, c11.y
rcp r2.y, r2.y
mul r1.w, r0, r2.y
cmp r0.w, v4.y, c10.x, c10.y
mul r2.y, r0.w, r1.w
mad r0.y, -r2, c11.z, r1.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
mul r2.y, r0.x, c12.x
dsx r0.w, r0.y
dsx r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c14.x
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0.xyz, r2, s0, r0.zwzw, r0
dp3_sat r0.w, v3, r1
mul_pp r1.x, r0.w, c2.w
mul_pp_sat r1.w, r1.x, c15.x
mov r0.w, c8.x
add r1.xyz, c2, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul r0.w, v0.x, c4.x
mul_pp r1.xyz, r1, v5.x
mul r1.w, r0, r0
add_pp r0.xyz, r0, -r3
mul_sat r0.w, r1, r0
mul r2.xyz, r1, c9.x
mad_pp r0.xyz, r0.w, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 88 used size, 10 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_MainTexHandoverDist]
Float 68 [_DetailScale]
Float 72 [_DetailVertScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 90 instructions, 6 temp regs, 0 temp arrays:
// ALU 76 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhpjehfamfmegghkeaemaiamieonbjnciabaaaaaalaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchiamaaaaeaaaaaaaboadaaaa
fjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaa
aeaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
aeaaaaaaakbabaiaibaaaaaaaeaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaaeaaaaaafgbgbaiaebaaaaaaaeaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaaeaaaaaaakbabaaaaeaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
aeaaaaaaakbabaaaaeaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaaeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaaeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaaeaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaaeaaaaaafgifcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaaeaaaaaafgikcaaaaaaaaaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaaeaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaaeaaaaaa
kgikcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
abaaaaaaagiacaaaaaaaaaaaafaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 114 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v5, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0, c14
rcp r1.w, r1.w
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0.xyz, r0.zwzw, s0, r2, r0
mul r1.xyz, r1, v1
dp4 r1.w, c1, c1
rsq r0.w, r1.w
add_pp r2.xyz, r0, -r1
mul r0.xyz, r0.w, c1
dp3_sat r0.y, v4, r0
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c14.y
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v6.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 0
SetTexture 4 [_LightTextureB0] 2D 1
// 100 instructions, 6 temp regs, 0 temp arrays:
// ALU 83 float, 0 int, 5 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddempdhdafdpkcgemfifoljikekejlianabaaaaaaeaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpaanaaaaeaaaaaaahmadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaai
icaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaa
abaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaa
aeaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 110 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v5, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v5
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c14
rcp r0.x, r1.w
mul r0.x, r0, c14
texldd r2.xyz, r0.zwzw, s0, r2, r0
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v4, r0
dp3 r0.x, v3, v3
texld r0.w, v3, s4
texld r0.x, r0.x, s3
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v6.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTextureB0] 2D 1
SetTexture 4 [_LightTexture0] CUBE 0
// 95 instructions, 6 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedogidfbolcknpnpdndgajdnkbpbnjnkcnabaaaaaakiaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcfianaaaaeaaaaaaafgadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaai
icaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaa
fgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 108 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v5, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r1.z, r1.x, c14.x, c14.y
add r1.y, -r0.w, c10
mad r1.x, r0.w, c10.z, c10.w
mad r1.x, r0.w, r1, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c11.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c11.z, r1.x
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c11.z, r2
mad r1.y, r0.w, c11.w, r1
mad r0.w, r1, c11, r1.x
mul r1.x, r1.y, c12
mul r1.w, r0, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
dsy r1.y, r1.x
add r1.x, r2.z, r2.w
mul r2.x, r0.w, c14
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c14
dp4_pp r2.z, c1, c1
texldd r1.xyz, r1.zwzw, s0, r2, r1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
mul r0.xyz, r0, v1
dp3_sat r1.w, v4, r2
texld r0.w, v3, s3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
mul r0.w, v0.x, c4.x
mul_pp r2.xyz, r2, v6.x
mul r1.w, r0, r0
add_pp r1.xyz, r1, -r0
mul_sat r0.w, r1, r0
mul r3.xyz, r2, c9.x
mad_pp r0.xyz, r0.w, r1, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 92 instructions, 6 temp regs, 0 temp arrays:
// ALU 77 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjbdphkelnlmlhehedcjfbegklnpmeefdabaaaaaadaaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcoaamaaaaeaaaaaaadiadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
dcbabaaaadaaaaaagcbaaaadecbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaafaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaa
kgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
adaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaakgbkbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 119 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c15.z
mad_sat r2.w, r0, c15, c15.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c7.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c13.y, c13.z
mad r3.w, r3, r3.z, c13
mad r3.w, r3, r3.z, c14.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c14.y
mad r1.x, r3.w, r3.z, c14.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c8.x
mul_sat r2.x, r2.y, c12.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r0.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c12.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c11, c11.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c12.z, r0.y
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c12.z, r2.x
mad r0.w, r0.x, c12, r0
mad r0.x, r1.w, c12.w, r0.y
mul r0.y, r0.w, c13.x
dsx r2.y, r0
mul r0.w, r0.x, c13.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c15
rcp r0.x, r1.w
mul r0.x, r0, c15
texldd r2.xyz, r0.zwzw, s0, r2, r0
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
texldp r0.x, v4, s5
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c15.y
cmp r0.z, r0, c11.y, r0.w
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c16.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c5.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 105 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 5 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlkbjklhbjlggfbmnpadjcgbodkcbdbfoabaaaaaadabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcmiaoaaaaeaaaaaaalcadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
dbaaaaahbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadhaaaaak
bcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 118 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c15.z
mad_sat r2.w, r0, c15, c15.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c7.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c13.y, c13.z
mad r3.w, r3, r3.z, c13
mad r3.w, r3, r3.z, c14.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c14.y
mad r1.x, r3.w, r3.z, c14.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c8.x
mul_sat r2.x, r2.y, c12.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r0.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c12.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c11, c11.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c12.z, r0.y
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c12.z, r2.x
mad r0.w, r0.x, c12, r0
mad r0.x, r1.w, c12.w, r0.y
mul r0.y, r0.w, c13.x
dsx r2.y, r0
mul r0.w, r0.x, c13.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c15
rcp r0.x, r1.w
mul r0.x, r0, c15
texldd r2.xyz, r0.zwzw, s0, r2, r0
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c15.y
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
mov r0.x, c2
add r0.z, c11.y, -r0.x
texldp r0.x, v4, s5
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c16.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c5.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 105 instructions, 6 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 5 uint
// TEX 8 (0 load, 1 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmkjiolipcnikmocoodlclkengllfhhdiabaaaaaaeabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcniaoaaaaeaaaaaaalgadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaehaaaaal
bcaabaaaabaaaaaaegaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaa
ckaabaaaabaaaaaaaaaaaaajccaabaaaabaaaaaaakiacaiaebaaaaaaacaaaaaa
biaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaacaaaaaabiaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaa
afaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 108 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v5, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r1.z, r1.x, c14.x, c14.y
add r1.y, -r0.w, c10
mad r1.x, r0.w, c10.z, c10.w
mad r1.x, r0.w, r1, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c11.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c11.z, r1.x
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c11.z, r2
mad r1.y, r0.w, c11.w, r1
mad r0.w, r1, c11, r1.x
mul r1.x, r1.y, c12
mul r1.w, r0, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
dsy r1.y, r1.x
add r1.x, r2.z, r2.w
mul r2.x, r0.w, c14
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c14
dp4_pp r2.z, c1, c1
texldd r1.xyz, r1.zwzw, s0, r2, r1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_sat r0.w, v4, r2
mul r0.xyz, r0, v1
texldp r2.x, v3, s3
mul_pp r0.w, r0, c2
mul_pp r1.w, r0, r2.x
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
mul r0.w, v0.x, c4.x
mul_pp r2.xyz, r2, v6.x
mul r1.w, r0, r0
add_pp r1.xyz, r1, -r0
mul_sat r0.w, r1, r0
mul r3.xyz, r2, c9.x
mad_pp r0.xyz, r0.w, r1, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 0
// 93 instructions, 6 temp regs, 0 temp arrays:
// ALU 78 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedccphmebdeiejokmkgfmegifejngejifdabaaaaaaemaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpmamaaaaeaaaaaaadpadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
lcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaafaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaa
kgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
adaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaaeaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 109 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c14
rcp r0.x, r1.w
mul r0.x, r0, c14
texldd r2.xyz, r0.zwzw, s0, r2, r0
dp4_pp r1.w, c1, c1
rsq_pp r1.w, r1.w
mul_pp r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] 2D 0
// 95 instructions, 6 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpmnfdehpkcdldeenddchmdpmbgdahmlbabaaaaaammaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apalaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgeanaaaaeaaaaaaafjadaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaad
ecbabaaaadaaaaaagcbaaaadlcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaafgikcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaagaaaaaa
kgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaajaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
aeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
adaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaakgbkbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 118 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c8.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c12.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
add r0.z, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r2, r1.w, c13
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c13
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c12.x, c12
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c13.z, r0.z
mad r1.w, r2.x, r1, c13.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c12.x, c12.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c13, r2.x
mad r0.w, r0.y, c13, r0
mad r0.y, r1.w, c13.w, r0.z
mul r0.z, r0.w, c14.x
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r2.x, r1.w, c16
mul r1.xyz, r1, v1
mad r0.x, r0, c16, c16.y
mul r0.y, r0, c14.x
mul r0.z, r0, c16.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
dp3 r0.w, v4, v4
rsq r1.w, r0.w
add_pp r2.xyz, r0, -r1
texld r0, v4, s3
dp4 r0.y, r0, c17
rcp r1.w, r1.w
mul r0.x, r1.w, c2.w
mad r0.y, -r0.x, c18.x, r0
dp4 r0.x, c1, c1
rsq r0.x, r0.x
mul r3.xyz, r0.x, c1
mov r0.z, c3.x
cmp r0.z, r0.y, c12.y, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
dp3_sat r0.y, v5, r3
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.y
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 102 instructions, 6 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhneoceeepoliikdobdcoolgghcikgdmcabaaaaaaleapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcemaoaaaaeaaaaaaajdadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaaj
ccaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaa
fgbgbaiaebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
dbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
deaaaaahbcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
dagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaa
chbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
agaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaa
aaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdp
aaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaa
agaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
acaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaa
kgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaa
dcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaa
aaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaa
agaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaa
aaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaai
pcaabaaaaeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaa
afaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaal
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaa
aaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaa
abaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaa
abaaaaaaegbcbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaak
bcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbdbaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaa
dhaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaa
abeaaaaaaaaaiadpbaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaa
acaaaaaaegacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 119 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c8.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c12.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
add r0.z, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r2, r1.w, c13
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c13
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c12.x, c12
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c13.z, r0.z
mad r1.w, r2.x, r1, c13.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c12.x, c12.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c13, r2.x
mad r0.w, r0.y, c13, r0
mad r0.y, r1.w, c13.w, r0.z
mul r0.z, r0.w, c14.x
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r2.x, r1.w, c16
dp3 r1.w, v4, v4
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.xyz, r1, v1
rsq r1.w, r1.w
mad r0.x, r0, c16, c16.y
mul r0.y, r0, c14.x
mul r0.z, r0, c16.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
add_pp r2.xyz, r0, -r1
texld r0, v4, s3
dp4 r0.z, r0, c17
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mad r0.w, -r0.y, c18.x, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_sat r0.y, v5, r0
mov r1.w, c3.x
cmp r1.w, r0, c12.y, r1
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.y
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 104 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediadodciebikbaphjegkfofabklibkdeeabaaaaaababaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckiaoaaaaeaaaaaaakkadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaa
aeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaa
egbcbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaa
abaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
dbaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaa
aaaaiadpbaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaa
aagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 127 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mad_sat r2.w, r0, c19, c19.y
mul r0.xy, v6.zyzw, c11.x
mul r1.xy, v6.zyzw, c10.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c11.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c17.y, c17.z
mad r3.w, r3, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mul r0.xy, v6, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c11.x
mul r0.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c18.y
mad r1.x, r3.w, r3.z, c18.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c18.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c16.w
dsy r3.xy, v6
add_pp r1.xyz, -r0, c15.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c12.x
mul_sat r2.x, r2.y, c16.z
mad_pp r1.xyz, r2.x, r1, r0
mul r2.xyz, r1, v1
abs r1.x, v6.y
cmp r0.x, v6, r1.w, -r1.w
add r0.z, -r0.w, c15.y
mad r0.y, r0.w, c15.z, c15.w
mad r0.y, r0.w, r0, c16.x
add r1.z, -r1.x, c15.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r0.z, r0.z
rsq r1.z, r1.z
mad r0.y, r0.w, r0, c16
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c16.z, r0.z
mad r1.x, r1.y, r1, c16.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v6.y, c15, c15.y
mul r1.z, r1.x, r1.y
mad r0.z, -r1, c16, r1.y
mad r0.w, r0.y, c16, r0
mad r0.y, r1.x, c16.w, r0.z
mul r0.z, r0.w, c17.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
dsx r1.zw, v6.xyxy
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.zw, r1, r1
dsx r0.w, r0.z
dsy r1.y, r0.z
add r0.z, r1, r1.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0, c19, c19.y
mul r0.y, r0, c17.x
mul r0.z, r0, c19.x
mul r1.x, r1, c19
texldd r1.xyz, r0, s0, r0.zwzw, r1
rcp r0.z, v4.w
add_pp r3.xyz, r1, -r2
mad r0.xy, v4, r0.z, c6
mad r1.xy, v4, r0.z, c5
texld r0.x, r0, s5
mov r1.w, r0.x
texld r1.x, r1, s5
mov r1.z, r1.x
mad r1.xy, v4, r0.z, c3
mad r0.xy, v4, r0.z, c4
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.y, r0.x
mad r0, -v4.z, r0.z, r1
mov r1.y, c2.x
cmp r0, r0, c15.y, r1.y
dp4_pp r1.z, r0, c20.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r0.xyz, r1.x, c1
dp3_sat r0.y, v5, r0
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c19.y
dp3 r0.x, v3, v3
texld r0.w, r1, s3
cmp r0.z, -v3, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1
mul_pp r0.x, r0.y, c7.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c20.y
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c14.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c8, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 116 instructions, 6 temp regs, 0 temp arrays:
// ALU 91 float, 0 int, 5 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhnboapnlaagekhjpamfebimenfgilomjabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaaaaaaaaaidcaabaaaadaaaaaaegaabaaaabaaaaaaegiacaaa
aaaaaaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
afaaaaaaaagabaaaaaaaaaaadgaaaaafccaabaaaacaaaaaaakaabaaaadaaaaaa
aaaaaaaidcaabaaaadaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaadgaaaaafecaabaaaacaaaaaaakaabaaaadaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadgaaaaaf
icaabaaaacaaaaaaakaabaaaadaaaaaadbaaaaahpcaabaaaabaaaaaaegaobaaa
acaaaaaakgakbaaaabaaaaaadhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaa
agiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
bbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiado
aaaaiadoaaaaiadoaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
abaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaafgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
bcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
agaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 127 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mad_sat r1.w, r0, c19, c19.y
mul r0.xy, v6.zyzw, c11.x
mul r1.xy, v6.zyzw, c10.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r3.xy, v6
max r2.w, r3.x, r0
rcp r3.z, r2.w
min r2.w, r3.x, r0
mul r2.w, r2, r3.z
mul r3.z, r2.w, r2.w
mad r3.w, r3.z, c17.y, c17.z
mad r3.w, r3, r3.z, c17
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c10.x
mul r1.xy, v6, c11.x
mad r3.w, r3, r3.z, c18.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c11.x
mul r0.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad r1.x, r3.w, r3.z, c18.y
mad_pp r0.xyz, r3.y, r0, r2
mad r1.x, r1, r3.z, c18.z
mul r2.x, r1, r2.w
abs r2.w, v6.y
add r1.w, r3.x, -r0
add r2.y, -r2.x, c18.w
cmp r1.w, -r1, r2.x, r2.y
add r3.y, -r2.w, c15
mad r3.x, r2.w, c15.z, c15.w
mad r3.x, r3, r2.w, c16
mul r2.y, v0.x, c12.x
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c15.y
mul_sat r2.y, r2, c16.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c16.w
cmp r0.x, v6.z, r1.w, r2
mul r2.xyz, r1, v1
cmp r0.x, v6, r0, -r0
add r1.z, -r0.w, c15.y
mad r1.y, r0.w, c15.z, c15.w
mad r1.y, r0.w, r1, c16.x
rsq r1.z, r1.z
rcp r1.w, v4.w
mad r1.x, r0, c19, c19.y
mad r0.xyz, v4, r1.w, c6
mad r0.w, r0, r1.y, c16.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c15.x, c15.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c16, r1.y
mad r1.z, r0.w, c16.w, r1
mul r1.z, r1, c17.x
mad r2.w, r3.x, r2, c16.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v6.y, c15.x, c15.y
mul r3.y, r2.w, r3.x
mad r1.y, -r3, c16.z, r3.x
mad r0.w, r2, c16, r1.y
dsx r3.xz, v6.xyyw
mul r4.zw, r3.xyxz, r3.xyxz
mul r1.y, r0.w, c17.x
add r0.w, r4.z, r4
rsq r0.w, r0.w
rcp r0.w, r0.w
dsy r3.y, r1.z
mul r3.z, r0.w, c19.x
texld r0.x, r0, s5
mov_pp r0.w, r0.x
mad r0.xyz, v4, r1.w, c5
texld r0.x, r0, s5
dsx r3.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.x, r1.z, c19
texldd r1.xyz, r1, s0, r3.zwzw, r3
add_pp r3.xyz, r1, -r2
mad r1.xyz, v4, r1.w, c4
texld r1.x, r1, s5
mov_pp r0.y, r1.x
mad r1.xyz, v4, r1.w, c3
mov_pp r0.z, r0.x
texld r0.x, r1, s5
mov r1.w, c2.x
add r1.y, c15, -r1.w
mad r0, r0, r1.y, c2.x
dp4_pp r1.z, r0, c20.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r0.xyz, r1.x, c1
dp3_sat r0.y, v5, r0
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c19.y
dp3 r0.x, v3, v3
texld r0.w, r1, s3
cmp r0.z, -v3, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1
mul_pp r0.x, r0.y, c7.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c20.y
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c14.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c8, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 113 instructions, 6 temp regs, 0 temp arrays:
// ALU 92 float, 0 int, 5 uint
// TEX 8 (0 load, 4 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpakimkgdfkinofjggnlkglccoiaeconfabaaaaaagmbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaebaaaaaeaaaaaaaabaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaajicaabaaaaaaaaaaaakiacaiaebaaaaaaacaaaaaa
biaaaaaaabeaaaaaaaaaiadpaoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaa
pgbpbaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaehaaaaalbcaabaaaacaaaaaaegaabaaaacaaaaaaaghabaaa
afaaaaaaaagabaaaaaaaaaaackaabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaacaaaaaaehaaaaalccaabaaaacaaaaaa
egaabaaaadaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaaeaaaaaa
ehaaaaalicaabaaaacaaaaaaegaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaa
aaaaaaaackaabaaaabaaaaaaehaaaaalecaabaaaacaaaaaaegaabaaaadaaaaaa
aghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaadcaaaaakpcaabaaa
abaaaaaaegaobaaaacaaaaaapgapbaaaaaaaaaaaagiacaaaacaaaaaabiaaaaaa
bbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiado
aaaaiadoaaaaiadoaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
abaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaafgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
bcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
agaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 126 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
dsy r4.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v6, c8.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
mul r4.xy, r4, r4
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
dsx r3.zw, v6.xyxy
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
mul r2.xyz, r1, v1
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r1.x, r0, c16, c16.y
add r1.z, -r0.w, c12.y
mad r1.y, r0.w, c12.z, c12.w
mad r1.y, r0.w, r1, c13.x
add r3.x, -r1.w, c12.y
mad r2.w, r1, c12.z, c12
mad r2.w, r2, r1, c13.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r0.w, r0, r1.y, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c13, r1.y
mad r1.z, r0.w, c13.w, r1
mul r1.z, r1, c14.x
mad r1.w, r2, r1, c13.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v6.y, c12.x, c12.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c13.z, r2.w
mad r0.w, r1, c13, r1.y
dsx r3.y, r1.z
dsy r1.w, r1.z
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.y, r0.w, c14.x
mul r3.zw, r3, r3
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.xyyw
texld r0, r0, s3
dp4 r4.w, r0, c18
mul r1.z, r1, c16.x
texldd r1.xyz, r1, s0, r3, r1.zwzw
add_pp r3.xyz, r1, -r2
add r0.xyz, v4, c17.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c18
add r1.xyz, v4, c17.yyxw
texld r1, r1, s3
dp4 r4.y, r1, c18
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c17.x
texld r0, r0, s3
rcp r1.x, r1.x
dp4 r4.x, r0, c18
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mov r1.y, c3.x
mad r0, -r0.x, c17.z, r4
cmp r0, r0, c12.y, r1.y
dp4_pp r0.z, r0, c17.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
dp3_sat r0.y, v5, r1
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c19.x
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c11.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c5, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 113 instructions, 6 temp regs, 0 temp arrays:
// ALU 93 float, 0 int, 4 uint
// TEX 11 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmclpihdnokkapegiekcmooacgpepjhgcabaaaaaagmbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaebaaaaaeaaaaaaaabaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaaj
ccaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaa
fgbgbaiaebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
dbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
deaaaaahbcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
dagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaa
chbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
agaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaa
aaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdp
aaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaa
agaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
acaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaa
kgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaa
dcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaa
aaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaa
agaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaa
aaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaai
pcaabaaaaeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaa
afaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaal
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaa
aaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaa
abaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaa
abaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaa
aceaaaaaaaaaaalmaaaaaalmaaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaa
abaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
aaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaadm
aaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaabbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaa
egbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaa
bbaaaaakicaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbdbaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaapgapbaaa
aaaaaaaadhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaa
biaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaa
aaaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiado
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
bcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
agaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 127 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
dsy r4.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v6, c8.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
mul r4.xy, r4, r4
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
dsx r3.zw, v6.xyxy
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
mul r2.xyz, r1, v1
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r1.x, r0, c16, c16.y
add r1.z, -r0.w, c12.y
mad r1.y, r0.w, c12.z, c12.w
mad r1.y, r0.w, r1, c13.x
add r3.x, -r1.w, c12.y
mad r2.w, r1, c12.z, c12
mad r2.w, r2, r1, c13.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r0.w, r0, r1.y, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c13, r1.y
mad r1.z, r0.w, c13.w, r1
mul r1.z, r1, c14.x
mad r1.w, r2, r1, c13.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v6.y, c12.x, c12.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c13.z, r2.w
mad r0.w, r1, c13, r1.y
dsx r3.y, r1.z
dsy r1.w, r1.z
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.y, r0.w, c14.x
mul r3.zw, r3, r3
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.xyyw
texld r0, r0, s3
dp4 r4.w, r0, c18
mul r1.z, r1, c16.x
texldd r1.xyz, r1, s0, r3, r1.zwzw
add_pp r3.xyz, r1, -r2
add r0.xyz, v4, c17.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c18
add r1.xyz, v4, c17.yyxw
texld r1, r1, s3
dp4 r4.y, r1, c18
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c17.x
texld r0, r0, s3
rcp r1.x, r1.x
dp4 r4.x, r0, c18
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mov r1.y, c3.x
mad r0, -r0.x, c17.z, r4
cmp r0, r0, c12.y, r1.y
dp4_pp r0.z, r0, c17.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3 r0.x, v3, v3
dp3_sat r0.y, v5, r1
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c19.x
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c11.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c5, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 115 instructions, 6 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhgdbdlkdgmopkcgfffcgigchcmbmlcbnabaaaaaamibbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgabaaaaaeaaaaaaabiaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaa
aeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaa
egbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
bbaaaaakbcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaalmaaaaaalmaaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
hcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalm
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaabbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaa
aeaaaaaaaceaaaaaaaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaak
icaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbdbaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaapgapbaaaaaaaaaaa
dhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaa
abaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaa
abaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaa
fgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 109 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v5, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0, c14
rcp r1.w, r1.w
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0.xyz, r0.zwzw, s0, r2, r0
mul r1.xyz, r1, v1
add_pp r2.xyz, r0, -r1
dp4 r1.w, c1, c1
rsq r0.w, r1.w
mul r3.xyz, r0.w, c1
dp3_sat r0.y, v4, r3
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v6.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 93 instructions, 6 temp regs, 0 temp arrays:
// ALU 78 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpelipkgfnboffepbbiogcnafeiilahfdabaaaaaaemaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpmamaaaaeaaaaaaadpadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaafaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaa
kgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 107 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.x
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r3.w, r0, c14, c14.y
mul r2.xy, v4, c5.x
texld r3.xyz, r2, s2
mul r0.xy, v4.zyzw, c6.x
mul r1.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r2.xy, v4
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c12.y, c12.z
mad r2.w, r2, r2.z, c12
mad r2.w, r2, r2.z, c13.x
mad r2.w, r2, r2.z, c13.y
mad r2.z, r2.w, r2, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v4, c6.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v4.zxzw, c6.x
mul r3.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
add r1.w, r2.x, -r0
add r2.z, -r2.y, c13.w
cmp r1.w, -r1, r2.y, r2.z
mul r2.x, v0, c7
dsy r2.zw, v4.xyxy
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.x, -r1.w, c11.w
cmp r0.x, v4.z, r1.w, r0
cmp r0.x, v4, r0, -r0
mad r2.x, r0, c14, c14.y
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
dp4_pp r0.y, c1, c1
mul r3.xyz, r1, v1
rsq_pp r0.y, r0.y
mul_pp r1.xyz, r0.y, c1
add r0.y, -r0.w, c10
mad r0.x, r0.w, r0, c11.y
abs r0.w, v4.y
add r2.y, -r0.w, c10
mad r1.w, r0, c10.z, c10
mad r1.w, r1, r0, c11.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
rsq r2.y, r2.y
mad r0.w, r1, r0, c11.y
rcp r2.y, r2.y
mul r1.w, r0, r2.y
cmp r0.w, v4.y, c10.x, c10.y
mul r2.y, r0.w, r1.w
mad r0.y, -r2, c11.z, r1.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
mul r2.y, r0.x, c12.x
dsx r0.w, r0.y
dsx r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c14.x
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0.xyz, r2, s0, r0.zwzw, r0
dp3_sat r0.w, v3, r1
mul_pp r1.x, r0.w, c2.w
mul_pp_sat r1.w, r1.x, c15.x
mov r0.w, c8.x
add r1.xyz, c2, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul r0.w, v0.x, c4.x
mul_pp r1.xyz, r1, v5.x
mul r1.w, r0, r0
add_pp r0.xyz, r0, -r3
mul_sat r0.w, r1, r0
mul r2.xyz, r1, c9.x
mad_pp r0.xyz, r0.w, r0, r3
mad_pp r0.xyz, r0, c3, r2
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 88 used size, 10 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_MainTexHandoverDist]
Float 68 [_DetailScale]
Float 72 [_DetailVertScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 90 instructions, 6 temp regs, 0 temp arrays:
// ALU 76 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhpjehfamfmegghkeaemaiamieonbjnciabaaaaaalaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchiamaaaaeaaaaaaaboadaaaa
fjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaa
aeaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
aeaaaaaaakbabaiaibaaaaaaaeaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaaeaaaaaafgbgbaiaebaaaaaaaeaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaaeaaaaaaakbabaaaaeaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
aeaaaaaaakbabaaaaeaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaaeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaaeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaaeaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaaeaaaaaafgifcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaaeaaaaaafgikcaaaaaaaaaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaaeaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaaeaaaaaa
kgikcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaeaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
abaaaaaaagiacaaaaaaaaaaaafaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 114 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v5, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0, c14
rcp r1.w, r1.w
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0.xyz, r0.zwzw, s0, r2, r0
mul r1.xyz, r1, v1
dp4 r1.w, c1, c1
rsq r0.w, r1.w
add_pp r2.xyz, r0, -r1
mul r0.xyz, r0.w, c1
dp3_sat r0.y, v4, r0
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c14.y
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v6.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 0
SetTexture 4 [_LightTextureB0] 2D 1
// 100 instructions, 6 temp regs, 0 temp arrays:
// ALU 83 float, 0 int, 5 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddempdhdafdpkcgemfifoljikekejlianabaaaaaaeaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpaanaaaaeaaaaaaahmadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaai
icaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaa
abaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaa
aeaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 110 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v5, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v5
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c14
rcp r0.x, r1.w
mul r0.x, r0, c14
texldd r2.xyz, r0.zwzw, s0, r2, r0
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v4, r0
dp3 r0.x, v3, v3
texld r0.w, v3, s4
texld r0.x, r0.x, s3
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v6.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTextureB0] 2D 1
SetTexture 4 [_LightTexture0] CUBE 0
// 95 instructions, 6 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedogidfbolcknpnpdndgajdnkbpbnjnkcnabaaaaaakiaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcfianaaaaeaaaaaaafgadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaai
icaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaa
fgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 108 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v5, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r1.z, r1.x, c14.x, c14.y
add r1.y, -r0.w, c10
mad r1.x, r0.w, c10.z, c10.w
mad r1.x, r0.w, r1, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c11.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c11.z, r1.x
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c11.z, r2
mad r1.y, r0.w, c11.w, r1
mad r0.w, r1, c11, r1.x
mul r1.x, r1.y, c12
mul r1.w, r0, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
dsy r1.y, r1.x
add r1.x, r2.z, r2.w
mul r2.x, r0.w, c14
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c14
dp4_pp r2.z, c1, c1
texldd r1.xyz, r1.zwzw, s0, r2, r1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
mul r0.xyz, r0, v1
dp3_sat r1.w, v4, r2
texld r0.w, v3, s3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
mul r0.w, v0.x, c4.x
mul_pp r2.xyz, r2, v6.x
mul r1.w, r0, r0
add_pp r1.xyz, r1, -r0
mul_sat r0.w, r1, r0
mul r3.xyz, r2, c9.x
mad_pp r0.xyz, r0.w, r1, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 92 instructions, 6 temp regs, 0 temp arrays:
// ALU 77 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjbdphkelnlmlhehedcjfbegklnpmeefdabaaaaaadaaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcoaamaaaaeaaaaaaadiadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
dcbabaaaadaaaaaagcbaaaadecbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaafaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaa
kgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaa
adaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaakgbkbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 119 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c15.z
mad_sat r2.w, r0, c15, c15.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c7.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c13.y, c13.z
mad r3.w, r3, r3.z, c13
mad r3.w, r3, r3.z, c14.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c14.y
mad r1.x, r3.w, r3.z, c14.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c8.x
mul_sat r2.x, r2.y, c12.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r0.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c12.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c11, c11.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c12.z, r0.y
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c12.z, r2.x
mad r0.w, r0.x, c12, r0
mad r0.x, r1.w, c12.w, r0.y
mul r0.y, r0.w, c13.x
dsx r2.y, r0
mul r0.w, r0.x, c13.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c15
rcp r0.x, r1.w
mul r0.x, r0, c15
texldd r2.xyz, r0.zwzw, s0, r2, r0
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
texldp r0.x, v4, s5
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c15.y
cmp r0.z, r0, c11.y, r0.w
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c16.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c5.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 105 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 5 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlkbjklhbjlggfbmnpadjcgbodkcbdbfoabaaaaaadabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcmiaoaaaaeaaaaaaalcadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
dbaaaaahbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadhaaaaak
bcaabaaaabaaaaaaakaabaaaabaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 118 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c15.z
mad_sat r2.w, r0, c15, c15.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c7.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c13.y, c13.z
mad r3.w, r3, r3.z, c13
mad r3.w, r3, r3.z, c14.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c14.y
mad r1.x, r3.w, r3.z, c14.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c8.x
mul_sat r2.x, r2.y, c12.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r0.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c12.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c11, c11.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c12.z, r0.y
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c12.z, r2.x
mad r0.w, r0.x, c12, r0
mad r0.x, r1.w, c12.w, r0.y
mul r0.y, r0.w, c13.x
dsx r2.y, r0
mul r0.w, r0.x, c13.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c15
rcp r0.x, r1.w
mul r0.x, r0, c15
texldd r2.xyz, r0.zwzw, s0, r2, r0
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c15.y
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
mov r0.x, c2
add r0.z, c11.y, -r0.x
texldp r0.x, v4, s5
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c16.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c5.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 105 instructions, 6 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 5 uint
// TEX 8 (0 load, 1 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmkjiolipcnikmocoodlclkengllfhhdiabaaaaaaeabaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcniaoaaaaeaaaaaaalgadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaehaaaaal
bcaabaaaabaaaaaaegaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaa
ckaabaaaabaaaaaaaaaaaaajccaabaaaabaaaaaaakiacaiaebaaaaaaacaaaaaa
biaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaacaaaaaabiaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaa
afaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 108 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v5, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.x, v5, r1.w, -r1.w
abs r1.w, v5.y
mad r1.z, r1.x, c14.x, c14.y
add r1.y, -r0.w, c10
mad r1.x, r0.w, c10.z, c10.w
mad r1.x, r0.w, r1, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c11.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c11.z, r1.x
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c11.z, r2
mad r1.y, r0.w, c11.w, r1
mad r0.w, r1, c11, r1.x
mul r1.x, r1.y, c12
mul r1.w, r0, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
dsy r1.y, r1.x
add r1.x, r2.z, r2.w
mul r2.x, r0.w, c14
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c14
dp4_pp r2.z, c1, c1
texldd r1.xyz, r1.zwzw, s0, r2, r1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_sat r0.w, v4, r2
mul r0.xyz, r0, v1
texldp r2.x, v3, s3
mul_pp r0.w, r0, c2
mul_pp r1.w, r0, r2.x
mov r0.w, c8.x
add r2.xyz, c2, r0.w
mul_pp_sat r1.w, r1, c15.x
mad_sat r2.xyz, r2, r1.w, c0
mul r0.w, v0.x, c4.x
mul_pp r2.xyz, r2, v6.x
mul r1.w, r0, r0
add_pp r1.xyz, r1, -r0
mul_sat r0.w, r1, r0
mul r3.xyz, r2, c9.x
mad_pp r0.xyz, r0.w, r1, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 0
// 93 instructions, 6 temp regs, 0 temp arrays:
// ALU 78 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedccphmebdeiejokmkgfmegifejngejifdabaaaaaaemaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpmamaaaaeaaaaaaadpadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
lcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaafaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaafaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaa
kgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaafaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
adaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaaeaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 109 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c14.z
mad_sat r2.w, r0, c14, c14.y
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c6.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c12.y, c12.z
mad r3.w, r3, r3.z, c12
mad r3.w, r3, r3.z, c13.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c13.y
mad r1.x, r3.w, r3.z, c13.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c10.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.xyz, r1, v1
dsy r0.y, r0
rsq r1.w, r1.w
mul r2.x, r0, c14
rcp r0.x, r1.w
mul r0.x, r0, c14
texldd r2.xyz, r0.zwzw, s0, r2, r0
dp4_pp r1.w, c1, c1
rsq_pp r1.w, r1.w
mul_pp r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c4.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
add_pp r2.xyz, r2, -r1
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] 2D 0
// 95 instructions, 6 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpmnfdehpkcdldeenddchmdpmbgdahmlbabaaaaaammaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apalaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgeanaaaaeaaaaaaafjadaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaad
ecbabaaaadaaaaaagcbaaaadlcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
deaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
gcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaa
agbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaa
agbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlm
aceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaiedefjloaaaaaaaa
aaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaal
mcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaah
mcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaa
adaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaa
aaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaa
agabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
abaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaafgikcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaia
ebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
ddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaec
abeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaagaaaaaa
kgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaa
acaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaa
aaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaegbcbaaaacaaaaaa
diaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaaaaaaaaaajaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
aeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaa
adaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaakgbkbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 118 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c8.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c12.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
add r0.z, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r2, r1.w, c13
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c13
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c12.x, c12
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c13.z, r0.z
mad r1.w, r2.x, r1, c13.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c12.x, c12.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c13, r2.x
mad r0.w, r0.y, c13, r0
mad r0.y, r1.w, c13.w, r0.z
mul r0.z, r0.w, c14.x
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r2.x, r1.w, c16
mul r1.xyz, r1, v1
mad r0.x, r0, c16, c16.y
mul r0.y, r0, c14.x
mul r0.z, r0, c16.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
dp3 r0.w, v4, v4
rsq r1.w, r0.w
add_pp r2.xyz, r0, -r1
texld r0, v4, s3
dp4 r0.y, r0, c17
rcp r1.w, r1.w
mul r0.x, r1.w, c2.w
mad r0.y, -r0.x, c18.x, r0
dp4 r0.x, c1, c1
rsq r0.x, r0.x
mul r3.xyz, r0.x, c1
mov r0.z, c3.x
cmp r0.z, r0.y, c12.y, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
dp3_sat r0.y, v5, r3
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.y
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 102 instructions, 6 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhneoceeepoliikdobdcoolgghcikgdmcabaaaaaaleapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcemaoaaaaeaaaaaaajdadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaaj
ccaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaa
fgbgbaiaebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
dbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
deaaaaahbcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
dagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaa
chbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
agaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaa
aaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdp
aaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaa
agaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
acaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaa
kgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaa
dcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaa
aaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaa
agaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaa
aaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaai
pcaabaaaaeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaa
afaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaal
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaa
aaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaa
abaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaa
abaaaaaaegbcbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaak
bcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbdbaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaa
dhaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaa
abeaaaaaaaaaiadpbaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaa
acaaaaaaegacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 119 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c8.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c12.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
add r0.z, -r0.w, c12.y
mad r0.y, r0.w, c12.z, c12.w
mad r0.y, r0.w, r0, c13.x
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r2, r1.w, c13
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c13
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c12.x, c12
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c13.z, r0.z
mad r1.w, r2.x, r1, c13.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c12.x, c12.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c13, r2.x
mad r0.w, r0.y, c13, r0
mad r0.y, r1.w, c13.w, r0.z
mul r0.z, r0.w, c14.x
mul r3.xy, r3, r3
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r2.x, r1.w, c16
dp3 r1.w, v4, v4
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r1.xyz, r1, v1
rsq r1.w, r1.w
mad r0.x, r0, c16, c16.y
mul r0.y, r0, c14.x
mul r0.z, r0, c16.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
add_pp r2.xyz, r0, -r1
texld r0, v4, s3
dp4 r0.z, r0, c17
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mad r0.w, -r0.y, c18.x, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_sat r0.y, v5, r0
mov r1.w, c3.x
cmp r1.w, r0, c12.y, r1
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.y
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r3.xyz, r0, c11.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 104 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediadodciebikbaphjegkfofabklibkdeeabaaaaaababaaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckiaoaaaaeaaaaaaakkadaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaa
aeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaa
egbcbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaa
abaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
dbaaaaahicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaa
aaaaiadpbaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaa
aagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
abaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaabaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 127 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mad_sat r2.w, r0, c19, c19.y
mul r0.xy, v6.zyzw, c11.x
mul r1.xy, v6.zyzw, c10.x
abs r0.w, v6.z
abs r3.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
max r1.w, r3.x, r0
mul r1.xy, v6, c11.x
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c17.y, c17.z
mad r3.w, r3, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mul r0.xy, v6, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c11.x
mul r0.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c18.y
mad r1.x, r3.w, r3.z, c18.z
mul r1.y, r1.x, r1.w
add r1.x, r3, -r0.w
add r1.z, -r1.y, c18.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c16.w
dsy r3.xy, v6
add_pp r1.xyz, -r0, c15.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c12.x
mul_sat r2.x, r2.y, c16.z
mad_pp r1.xyz, r2.x, r1, r0
mul r2.xyz, r1, v1
abs r1.x, v6.y
cmp r0.x, v6, r1.w, -r1.w
add r0.z, -r0.w, c15.y
mad r0.y, r0.w, c15.z, c15.w
mad r0.y, r0.w, r0, c16.x
add r1.z, -r1.x, c15.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r0.z, r0.z
rsq r1.z, r1.z
mad r0.y, r0.w, r0, c16
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c16.z, r0.z
mad r1.x, r1.y, r1, c16.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v6.y, c15, c15.y
mul r1.z, r1.x, r1.y
mad r0.z, -r1, c16, r1.y
mad r0.w, r0.y, c16, r0
mad r0.y, r1.x, c16.w, r0.z
mul r0.z, r0.w, c17.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
dsx r1.zw, v6.xyxy
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.zw, r1, r1
dsx r0.w, r0.z
dsy r1.y, r0.z
add r0.z, r1, r1.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0, c19, c19.y
mul r0.y, r0, c17.x
mul r0.z, r0, c19.x
mul r1.x, r1, c19
texldd r1.xyz, r0, s0, r0.zwzw, r1
rcp r0.z, v4.w
add_pp r3.xyz, r1, -r2
mad r0.xy, v4, r0.z, c6
mad r1.xy, v4, r0.z, c5
texld r0.x, r0, s5
mov r1.w, r0.x
texld r1.x, r1, s5
mov r1.z, r1.x
mad r1.xy, v4, r0.z, c3
mad r0.xy, v4, r0.z, c4
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.y, r0.x
mad r0, -v4.z, r0.z, r1
mov r1.y, c2.x
cmp r0, r0, c15.y, r1.y
dp4_pp r1.z, r0, c20.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r0.xyz, r1.x, c1
dp3_sat r0.y, v5, r0
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c19.y
dp3 r0.x, v3, v3
texld r0.w, r1, s3
cmp r0.z, -v3, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1
mul_pp r0.x, r0.y, c7.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c20.y
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c14.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c8, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 116 instructions, 6 temp regs, 0 temp arrays:
// ALU 91 float, 0 int, 5 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhnboapnlaagekhjpamfebimenfgilomjabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaaaaaaaaaidcaabaaaadaaaaaaegaabaaaabaaaaaaegiacaaa
aaaaaaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
afaaaaaaaagabaaaaaaaaaaadgaaaaafccaabaaaacaaaaaaakaabaaaadaaaaaa
aaaaaaaidcaabaaaadaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaadgaaaaafecaabaaaacaaaaaaakaabaaaadaaaaaaaaaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadgaaaaaf
icaabaaaacaaaaaaakaabaaaadaaaaaadbaaaaahpcaabaaaabaaaaaaegaobaaa
acaaaaaakgakbaaaabaaaaaadhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaa
agiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
bbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiado
aaaaiadoaaaaiadoaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
abaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaafgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
bcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
agaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 127 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mad_sat r1.w, r0, c19, c19.y
mul r0.xy, v6.zyzw, c11.x
mul r1.xy, v6.zyzw, c10.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r3.xy, v6
max r2.w, r3.x, r0
rcp r3.z, r2.w
min r2.w, r3.x, r0
mul r2.w, r2, r3.z
mul r3.z, r2.w, r2.w
mad r3.w, r3.z, c17.y, c17.z
mad r3.w, r3, r3.z, c17
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c10.x
mul r1.xy, v6, c11.x
mad r3.w, r3, r3.z, c18.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c11.x
mul r0.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad r1.x, r3.w, r3.z, c18.y
mad_pp r0.xyz, r3.y, r0, r2
mad r1.x, r1, r3.z, c18.z
mul r2.x, r1, r2.w
abs r2.w, v6.y
add r1.w, r3.x, -r0
add r2.y, -r2.x, c18.w
cmp r1.w, -r1, r2.x, r2.y
add r3.y, -r2.w, c15
mad r3.x, r2.w, c15.z, c15.w
mad r3.x, r3, r2.w, c16
mul r2.y, v0.x, c12.x
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c15.y
mul_sat r2.y, r2, c16.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c16.w
cmp r0.x, v6.z, r1.w, r2
mul r2.xyz, r1, v1
cmp r0.x, v6, r0, -r0
add r1.z, -r0.w, c15.y
mad r1.y, r0.w, c15.z, c15.w
mad r1.y, r0.w, r1, c16.x
rsq r1.z, r1.z
rcp r1.w, v4.w
mad r1.x, r0, c19, c19.y
mad r0.xyz, v4, r1.w, c6
mad r0.w, r0, r1.y, c16.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c15.x, c15.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c16, r1.y
mad r1.z, r0.w, c16.w, r1
mul r1.z, r1, c17.x
mad r2.w, r3.x, r2, c16.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v6.y, c15.x, c15.y
mul r3.y, r2.w, r3.x
mad r1.y, -r3, c16.z, r3.x
mad r0.w, r2, c16, r1.y
dsx r3.xz, v6.xyyw
mul r4.zw, r3.xyxz, r3.xyxz
mul r1.y, r0.w, c17.x
add r0.w, r4.z, r4
rsq r0.w, r0.w
rcp r0.w, r0.w
dsy r3.y, r1.z
mul r3.z, r0.w, c19.x
texld r0.x, r0, s5
mov_pp r0.w, r0.x
mad r0.xyz, v4, r1.w, c5
texld r0.x, r0, s5
dsx r3.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.x, r1.z, c19
texldd r1.xyz, r1, s0, r3.zwzw, r3
add_pp r3.xyz, r1, -r2
mad r1.xyz, v4, r1.w, c4
texld r1.x, r1, s5
mov_pp r0.y, r1.x
mad r1.xyz, v4, r1.w, c3
mov_pp r0.z, r0.x
texld r0.x, r1, s5
mov r1.w, c2.x
add r1.y, c15, -r1.w
mad r0, r0, r1.y, c2.x
dp4_pp r1.z, r0, c20.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r0.xyz, r1.x, c1
dp3_sat r0.y, v5, r0
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c19.y
dp3 r0.x, v3, v3
texld r0.w, r1, s3
cmp r0.z, -v3, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1
mul_pp r0.x, r0.y, c7.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c20.y
mov r0.x, c13
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c14.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c8, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 113 instructions, 6 temp regs, 0 temp arrays:
// ALU 92 float, 0 int, 5 uint
// TEX 8 (0 load, 4 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpakimkgdfkinofjggnlkglccoiaeconfabaaaaaagmbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaebaaaaaeaaaaaaaabaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
pcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadicbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaajicaabaaaaaaaaaaaakiacaiaebaaaaaaacaaaaaa
biaaaaaaabeaaaaaaaaaiadpaoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaa
pgbpbaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaehaaaaalbcaabaaaacaaaaaaegaabaaaacaaaaaaaghabaaa
afaaaaaaaagabaaaaaaaaaaackaabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaacaaaaaaehaaaaalccaabaaaacaaaaaa
egaabaaaadaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaaeaaaaaa
ehaaaaalicaabaaaacaaaaaaegaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaa
aaaaaaaackaabaaaabaaaaaaehaaaaalecaabaaaacaaaaaaegaabaaaadaaaaaa
aghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaadcaaaaakpcaabaaa
abaaaaaaegaobaaaacaaaaaapgapbaaaaaaaaaaaagiacaaaacaaaaaabiaaaaaa
bbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiado
aaaaiadoaaaaiadoaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
abaaaaaabaaaaaahccaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaafgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
acaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
bcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
agaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 126 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
dsy r4.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v6, c8.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
mul r4.xy, r4, r4
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
dsx r3.zw, v6.xyxy
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
mul r2.xyz, r1, v1
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r1.x, r0, c16, c16.y
add r1.z, -r0.w, c12.y
mad r1.y, r0.w, c12.z, c12.w
mad r1.y, r0.w, r1, c13.x
add r3.x, -r1.w, c12.y
mad r2.w, r1, c12.z, c12
mad r2.w, r2, r1, c13.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r0.w, r0, r1.y, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c13, r1.y
mad r1.z, r0.w, c13.w, r1
mul r1.z, r1, c14.x
mad r1.w, r2, r1, c13.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v6.y, c12.x, c12.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c13.z, r2.w
mad r0.w, r1, c13, r1.y
dsx r3.y, r1.z
dsy r1.w, r1.z
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.y, r0.w, c14.x
mul r3.zw, r3, r3
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.xyyw
texld r0, r0, s3
dp4 r4.w, r0, c18
mul r1.z, r1, c16.x
texldd r1.xyz, r1, s0, r3, r1.zwzw
add_pp r3.xyz, r1, -r2
add r0.xyz, v4, c17.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c18
add r1.xyz, v4, c17.yyxw
texld r1, r1, s3
dp4 r4.y, r1, c18
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c17.x
texld r0, r0, s3
rcp r1.x, r1.x
dp4 r4.x, r0, c18
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mov r1.y, c3.x
mad r0, -r0.x, c17.z, r4
cmp r0, r0, c12.y, r1.y
dp4_pp r0.z, r0, c17.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
dp3_sat r0.y, v5, r1
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c19.x
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c11.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c5, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 113 instructions, 6 temp regs, 0 temp arrays:
// ALU 93 float, 0 int, 4 uint
// TEX 11 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmclpihdnokkapegiekcmooacgpepjhgcabaaaaaagmbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaebaaaaaeaaaaaaaabaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaaj
ccaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaa
fgbgbaiaebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
dbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
deaaaaahbcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaa
aaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
dagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaa
chbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
agaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaa
aaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdp
aaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaa
agaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
acaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaa
kgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaa
dcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaa
aaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaa
agaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaa
aaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaai
pcaabaaaaeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaa
afaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaal
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaa
aaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaa
abaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaa
abaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaa
aceaaaaaaaaaaalmaaaaaalmaaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaa
abaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
aaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaadm
aaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaabbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaa
egbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaa
bbaaaaakicaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbdbaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaapgapbaaa
aaaaaaaadhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaa
biaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaa
aaaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiado
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaaj
bcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaa
agaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
abaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 127 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.z
mad_sat r2.w, r0, c16, c16.y
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
dsy r4.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v6, c8.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
mul r4.xy, r4, r4
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c14.y, c14.z
mad r3.w, r3, r3.z, c14
mad r3.w, r3, r3.z, c15.x
mul r0.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3, r3.z, c15.y
mad r1.x, r3.w, r3.z, c15.z
mul r1.y, r1.x, r1.w
dsx r3.zw, v6.xyxy
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2.y, c13.z
mad_pp r1.xyz, r2.x, r1, r0
mul r2.xyz, r1, v1
cmp r0.x, v6, r1.w, -r1.w
abs r1.w, v6.y
mad r1.x, r0, c16, c16.y
add r1.z, -r0.w, c12.y
mad r1.y, r0.w, c12.z, c12.w
mad r1.y, r0.w, r1, c13.x
add r3.x, -r1.w, c12.y
mad r2.w, r1, c12.z, c12
mad r2.w, r2, r1, c13.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r0.w, r0, r1.y, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c13, r1.y
mad r1.z, r0.w, c13.w, r1
mul r1.z, r1, c14.x
mad r1.w, r2, r1, c13.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v6.y, c12.x, c12.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c13.z, r2.w
mad r0.w, r1, c13, r1.y
dsx r3.y, r1.z
dsy r1.w, r1.z
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.y, r0.w, c14.x
mul r3.zw, r3, r3
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.xyyw
texld r0, r0, s3
dp4 r4.w, r0, c18
mul r1.z, r1, c16.x
texldd r1.xyz, r1, s0, r3, r1.zwzw
add_pp r3.xyz, r1, -r2
add r0.xyz, v4, c17.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c18
add r1.xyz, v4, c17.yyxw
texld r1, r1, s3
dp4 r4.y, r1, c18
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c17.x
texld r0, r0, s3
rcp r1.x, r1.x
dp4 r4.x, r0, c18
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mov r1.y, c3.x
mad r0, -r0.x, c17.z, r4
cmp r0, r0, c12.y, r1.y
dp4_pp r0.z, r0, c17.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3 r0.x, v3, v3
dp3_sat r0.y, v5, r1
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c19.x
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c6.x
mul_pp r0.xyz, r0, v7.x
mul r1.w, r0, r0
mul_sat r0.w, r1, r0
mul r1.xyz, r0, c11.x
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r1.xyz, r2, c5, r1
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 115 instructions, 6 temp regs, 0 temp arrays:
// ALU 94 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhgdbdlkdgmopkcgfffcgigchcmbmlcbnabaaaaaamibbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgabaaaaaeaaaaaaabiaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaa
aeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaaegbcbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaa
akiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaa
egbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
bbaaaaakbcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaalmaaaaaalmaaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
hcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalm
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaabbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaa
aeaaaaaaaceaaaaaaaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaak
icaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbdbaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaapgapbaaaaaaaaaaa
dhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaa
abaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaa
abaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaa
aaaaaaaaajaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaabaaaaaa
fgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaaegacbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 137 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
add r5.z, v1.w, c15
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c5.x
abs r4.zw, v5.xyxy
abs r0.w, v5.z
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad r2.xyz, r1.w, r2, r1
max r0.x, r4.z, r0.w
rcp r0.y, r0.x
min r0.x, r4.z, r0.w
mul r2.w, r0.x, r0.y
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c13, c13.z
mad r3.y, r3, r3.x, c13.w
mad r3.y, r3, r3.x, c14.x
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
mad r3.y, r3, r3.x, c14
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r1.x, r3.y, r3, c14.z
mul r1.y, r1.x, r2.w
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
add_pp r1.xyz, -r0, c11.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c12.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
mad r3.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v5.y
cmp r0.w, v5.z, c11.x, c11.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c12.z, r1
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mul r1.xyz, v1, r1
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r0.z, r0.w, c12.w, r1.w
mul r0.y, r0.z, c13.x
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
mul r3.w, r0.x, c13.x
dsx r3.y, r0
dsy r2.w, r0.y
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
mul r0.w, v0.x, c4.x
mul r1.w, r0, r0
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0, c15
mul r2.z, r0.y, c15.x
texldd r0.xyz, r3.zwzw, s0, r3, r2.zwzw
add_pp r0.xyz, r0, -r1
mul_sat r0.w, r1, r0
mad_pp r6.xyz, r0.w, r0, r1
mul r5.xy, v5.zyzw, c10.x
mul r2.xy, v5, c10.x
texld r0, r2, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r4.z, r1, r0
mul r4.xy, v5.zxzw, c10.x
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
texldd r1, r3.zwzw, s3, r3, r2.zwzw
frc r5.w, r5.z
add_sat r2.z, r5, -r5.w
mul_pp r3.w, r1, r2.z
dp4 r2.w, c1, c1
rsq r1.w, r2.w
mul r7.xyz, r1.w, c1
mov_pp r3.xyz, r1
mul_pp r1, r3, r0
add_pp r1.xyz, r1, -r6
dp3_sat r5.w, v4, r7
mad_pp r6.xyz, r1.w, r1, r6
dp3 r0.x, v3, v3
texld r2, r2, s4
texld r1, r5, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
add_pp r4.x, r5.w, c15.w
mul_pp r1, r3, r1
mul_pp r0.y, r5.w, c2.w
texld r0.x, r0.x, s6
mul_pp r0.z, r0.x, r0.y
mov r0.y, c8.x
mul_pp r4.x, r4, c2.w
mul_pp r0.x, r4, r0
mul_pp_sat r0.x, r0, c16
add_pp r0.x, -r0, c11.y
mul_pp_sat r0.z, r0, c17.x
add r7.xyz, c2, r0.y
mad_sat r7.xyz, r7, r0.z, c0
mul_pp r0.yzw, r7.xxyz, v6.x
mul r7.xyz, r0.yzww, c9.x
mad_pp r5.xyz, r6, c3, r7
mad_pp r1.xyz, -r5, r0.yzww, r1
mul_pp r2.xyz, r5, r0.yzww
mul_pp r0.x, r1.w, r0
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 125 instructions, 6 temp regs, 0 temp arrays:
// ALU 103 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfiiilfhmnoglmfklleffcfgodfakjelgabaaaaaanibcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefciibbaaaaeaaaaaaagcaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
icbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaa
kgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
aeaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeabaaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaagaaaaaaaagabaaa
aaaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaak
ocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaa
aeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaadaaaaaa
diaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 133 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.x
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v4.zyzw, c6.x
mul r1.xy, v4.zyzw, c5.x
dsy r5.zw, v4.xyxy
abs r6.zw, v4.xyxy
abs r0.w, v4.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v4, c5.x
mul r1.xy, v4, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v4.zxzw, c6.x
mul r0.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v4.z, r1.w, r2
cmp r0.z, v4.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v4, c10.x
mul r0.xy, v4.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v4.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v4, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v4
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v4.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v4.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mad_pp r3, r6.w, r2, r3
texldd r2, r7, s3, r1.zwzw, r0.zwzw
mul r5.w, r4, r4
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
mul_pp r2.w, r2, r0.z
mul_pp r3, r2, r3
add_pp r3.xyz, r3, -r5
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
dp3_sat r4.w, v3, r4
mad_pp r3.xyz, r3.w, r3, r5
mov r0.z, c8.x
mul_pp r0.w, r4, c2
texld r1, r1, s4
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v5.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r3.w, r4, c15
mul_pp r1.x, r3.w, c2.w
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 92 used size, 11 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_MainTexHandoverDist]
Float 68 [_DetailScale]
Float 72 [_DetailVertScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_Albedo]
Float 88 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
// 120 instructions, 6 temp regs, 0 temp arrays:
// ALU 99 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednohgodooecomjplcmhjobcphjlfccckiabaaaaaababcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnibaaaaaeaaaaaaadgaeaaaa
fjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaaeaaaaaafgifcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaaeaaaaaafgikcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
aeaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaaeaaaaaakgikcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaaeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaa
aeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
aeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
aeaaaaaajgbfbaiaebaaaaaaaeaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaaeaaaaaaakbabaaa
aeaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaaeaaaaaaakbabaaaaeaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaeaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaaeaaaaaakgikcaaaaaaaaaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaaeaaaaaa
kgikcaaaaaaaaaaaafaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaaeaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaaeaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
adaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaabaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaabaaaaaadicaaaakdcaabaaaacaaaaaaegaabaaaacaaaaaaaceaaaaa
pnekibeaaaaaiaeaaaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaaakaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaaegiccaaa
aaaaaaaaabaaaaaaagiacaaaaaaaaaaaafaaaaaadccaaaakocaabaaaacaaaaaa
agajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaaaeaaaaaadiaaaaah
ocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaa
afaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaafaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaaeaaaaaaegaobaaa
afaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaa
aeaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 141 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mul r4.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c5.x
mul r3.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c16.z, c16.w
abs r0.zw, v5.xyxy
abs r0.x, v5.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v5, c6.x
mul r2.w, r1, r1
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c13.y, c13.z
mad r3.w, r3.x, r2, c13
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c14.x
mul r1.xy, v5.zxzw, c6.x
mul r2.xy, v5.zxzw, c5.x
mad r3.w, r3, r2, c14.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c14.z
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
mul r1.w, r0.y, r1
dsx r3.xy, v5
add r2.x, r0.z, -r0
add r0.y, -r1.w, c14.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c12
cmp r1.w, v5.z, r2, r1
mul r0.y, v0.x, c7.x
abs r2.w, v5.y
add_pp r2.xyz, -r1, c11.y
mul_sat r0.y, r0, c12.z
mad_pp r1.xyz, r0.y, r2, r1
mul r2.xyz, v1, r1
cmp r0.y, v5.x, r1.w, -r1.w
mad r1.x, r0.y, c15, c15.y
add r0.y, -r0.x, c11
mad r1.y, r0.x, c11.z, c11.w
mad r1.y, r0.x, r1, c12.x
mad r0.x, r0, r1.y, c12.y
add r1.z, -r2.w, c11.y
mad r1.w, r2, c11.z, c11
mad r1.w, r1, r2, c12.x
mad r1.w, r1, r2, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.w, r1, r1.z
cmp r2.w, v5.y, c11.x, c11.y
mul r0.y, r0.x, r0
cmp r1.y, v5.z, c11.x, c11
mul r0.x, r1.y, r0.y
mad r0.x, -r0, c12.z, r0.y
mul r1.z, r2.w, r1.w
mad r0.y, -r1.z, c12.z, r1.w
mad r0.y, r2.w, c12.w, r0
mad r0.x, r1.y, c12.w, r0
mul r0.x, r0, c13
add r2.w, v1, c15.z
mul r3.xy, r3, r3
dsy r4.w, r0.x
mul r1.y, r0, c13.x
dsx r1.w, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.z, r3.x, r3.y
rsq r0.y, r1.z
rcp r0.y, r0.y
mul r1.z, r0.y, c15.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r4.z, r0.x, c15.x
texldd r3.xyz, r1, s0, r1.zwzw, r4.zwzw
texldd r1, r1, s3, r1.zwzw, r4.zwzw
mul r0.y, v0.x, c4.x
frc r5.z, r2.w
add_sat r4.z, r2.w, -r5
mul r0.x, r0.y, r0.y
dp4 r2.w, c1, c1
mul_pp r1.w, r1, r4.z
add_pp r3.xyz, r3, -r2
mul_sat r0.x, r0, r0.y
mad_pp r2.xyz, r0.x, r3, r2
mul r5.xy, v5, c10.x
texld r3, r5, s5
texld r6, r4, s5
add_pp r6, r6, -r3
mul r0.xy, v5.zxzw, c10.x
mad_pp r3, r0.z, r6, r3
texld r6, r0, s5
add_pp r6, r6, -r3
mad_pp r3, r0.w, r6, r3
rsq r2.w, r2.w
mul r6.xyz, r2.w, c1
dp3_sat r6.w, v4, r6
rcp r2.w, v3.w
mad r7.xy, v3, r2.w, c15.y
dp3 r6.x, v3, v3
mul_pp r3, r1, r3
texld r2.w, r7, s6
cmp r4.w, -v3.z, c11.x, c11.y
mul_pp r2.w, r4, r2
texld r6.x, r6.x, s7
mul_pp r2.w, r2, r6.x
mov r4.w, c8.x
mul_pp r4.z, r6.w, c2.w
mul_pp r4.z, r2.w, r4
add_pp r7.xyz, r3, -r2
texld r5, r5, s4
mul_pp_sat r4.z, r4, c17.x
add r6.xyz, c2, r4.w
mad_sat r6.xyz, r6, r4.z, c0
mul_pp r3.xyz, r6, v6.x
mad_pp r6.xyz, r3.w, r7, r2
mul r2.xyz, r3, c9.x
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r0.x, r6.w, c15.w
mul_pp r3.w, r0.x, c2
add_pp r5, r5, -r4
mad_pp r0, r0.w, r5, r4
mul_pp r0, r1, r0
mad_pp r2.xyz, r6, c3, r2
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c16
add_pp r1.w, -r1.x, c11.y
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 0
SetTexture 7 [_LightTextureB0] 2D 1
// 132 instructions, 6 temp regs, 0 temp arrays:
// ALU 108 float, 0 int, 5 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedaeppbdidafchcpkpeaocicnahcgdncbjabaaaaaammbdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmbcaaaaeaaaaaaajpaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaa
gcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadicbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
icaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaochgdido
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaakicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
aeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaa
kgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaa
acaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaa
amaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaa
egaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaa
acaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaa
aiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaakgikcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
acaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaa
kehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaaoaaaaahdcaabaaaacaaaaaa
egbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaacaaaaaaegaabaaa
acaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaacaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaacaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaaacaaaaaa
eghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaakaabaaaafaaaaaabbaaaaajccaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaaacaaaaaaagijcaaaabaaaaaa
aaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaaaeaaaaaajgahbaaaacaaaaaa
diaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
ccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaapnekibeadicaaaahccaabaaa
acaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaackaabaaaacaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaaacaaaaaabkaabaiaebaaaaaa
acaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakncaabaaaacaaaaaaagajbaaa
afaaaaaaagaabaaaacaaaaaaagijcaaaacaaaaaaaeaaaaaadiaaaaahncaabaaa
acaaaaaaagaobaaaacaaaaaapgbpbaaaaeaaaaaadiaaaaaihcaabaaaafaaaaaa
igadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
adaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
bkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 137 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r5.w, v0.x, c4.x
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r6.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c5.x
mul r1.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add r2.z, -r0.w, c11.y
rsq r2.z, r2.z
dsy r4.zw, v5.xyxy
mul r4.zw, r4, r4
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c12.w
cmp r0.x, v5.z, r1.w, r2
cmp r0.z, v5.x, r0.x, -r0.x
mad r8.x, r0.z, c15, c15.y
mul r0.xy, v5.zyzw, c10.x
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v5.y
rcp r2.z, r2.z
mul r4.x, r0.z, r2.z
cmp r0.z, v5, c11.x, c11.y
mul r4.y, r0.z, r4.x
add r2.w, -r0, c11.y
mad r2.z, r0.w, c11, c11.w
mad r2.z, r2, r0.w, c12.x
rsq r2.w, r2.w
mul r5.xyz, v1, r1
mul r2.xy, v5, c10.x
texld r1, r2, s5
texld r3, r0, s5
add_pp r3, r3, -r1
mad_pp r1, r6.z, r3, r1
mul r6.xy, v5.zxzw, c10.x
texld r3, r6, s5
mad r0.w, r2.z, r0, c12.y
rcp r2.w, r2.w
mul r2.z, r0.w, r2.w
cmp r0.w, v5.y, c11.x, c11.y
mul r2.w, r0, r2.z
mad r2.z, -r2.w, c12, r2
mad r4.x, -r4.y, c12.z, r4
mad r2.w, r0.z, c12, r4.x
mad r0.z, r0.w, c12.w, r2
mul r0.w, r2, c13.x
dsx r2.w, r0
add r2.z, r4, r4.w
dsx r4.xy, v5
mul r4.xy, r4, r4
mul r8.y, r0.z, c13.x
add r0.z, r4.x, r4.y
rsq r2.z, r2.z
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.x, r2.z
rcp r0.z, r0.z
mul r2.z, r0, c15.x
mul r0.z, r4.x, c15.x
texldd r4.xyz, r8, s0, r2.zwzw, r0.zwzw
add_pp r7.xyz, r4, -r5
add_pp r4, r3, -r1
mad_pp r4, r6.w, r4, r1
texldd r1, r8, s3, r2.zwzw, r0.zwzw
add r3.w, v1, c15.z
mul r7.w, r5, r5
mul_sat r3.x, r7.w, r5.w
frc r0.z, r3.w
add_sat r0.z, r3.w, -r0
dp4 r0.w, c1, c1
mad_pp r3.xyz, r3.x, r7, r5
rsq r0.w, r0.w
mul r5.xyz, r0.w, c1
mul_pp r1.w, r1, r0.z
dp3_sat r3.w, v4, r5
mul_pp r5, r1, r4
add_pp r5.xyz, r5, -r3
mul_pp r0.z, r3.w, c2.w
dp3 r4.x, v3, v3
add_pp r3.w, r3, c15
texld r2, r2, s4
texld r0.w, v3, s7
texld r4.x, r4.x, s6
mul r4.w, r4.x, r0
mul_pp r0.w, r4, r0.z
mov r0.z, c8.x
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
texld r0, r0, s4
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
texld r2, r6, s4
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
mul_pp r3.w, r3, c2
mul_pp r0, r1, r0
mul_pp r2.x, r3.w, r4.w
mul_pp_sat r1.x, r2, c16
add_pp r1.x, -r1, c11.y
mul_pp r4.xyz, r4, v6.x
mad_pp r3.xyz, r5.w, r5, r3
mul r5.xyz, r4, c9.x
mad_pp r3.xyz, r3, c3, r5
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTextureB0] 2D 1
SetTexture 7 [_LightTexture0] CUBE 0
// 127 instructions, 7 temp regs, 0 temp arrays:
// ALU 104 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjjpidcpeiembchchnlocjaeaghpjckgmabaaaaaadebdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcoebbaaaaeaaaaaaahjaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafidaaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaa
gcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
icaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaochgdido
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaakicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
aeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaa
kgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaa
acaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaa
amaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaa
egaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaa
acaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaa
aiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaakgikcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
acaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaa
kehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaacaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaacaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaa
egacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaapnekibea
baaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaagaaaaaaegbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaa
aaaaaaaadiaaaaahecaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaa
diaaaaahccaabaaaacaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaibcaabaaa
acaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaa
acaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaafaaaaaa
egiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakocaabaaa
acaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaaaeaaaaaa
diaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaadaaaaaadiaaaaai
hcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
afaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
agaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaa
egaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 135 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
dsy r5.zw, v5.xyxy
abs r6.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c5.x
mul r1.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v5.z, r1.w, r2
cmp r0.z, v5.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v5, c10.x
mul r0.xy, v5.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v5.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v5, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v5
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v5.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v5.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mul r5.w, r4, r4
mad_pp r3, r6.w, r2, r3
texldd r2, r7, s3, r1.zwzw, r0.zwzw
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
mul_pp r2.w, r2, r0.z
mul_pp r3, r2, r3
add_pp r3.xyz, r3, -r5
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
dp3_sat r5.w, v4, r4
mad_pp r3.xyz, r3.w, r3, r5
add_pp r3.w, r5, c15
texld r1, r1, s4
mul_pp r0.z, r5.w, c2.w
texld r4.w, v3, s6
mul_pp r0.w, r4, r0.z
mov r0.z, c8.x
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v6.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
mul_pp r3.w, r3, c2
mul_pp r1.x, r3.w, r4.w
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 124 instructions, 6 temp regs, 0 temp arrays:
// ALU 102 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediodleohnfneceffneahdhfmkkagobmfeabaaaaaalmbcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcgmbbaaaaeaaaaaaaflaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaad
ecbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaa
kgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
aeaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeaefaaaaajpcaabaaaafaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaaaaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaadkaabaaa
afaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaaaafaaaaaa
aaaaaaaibcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadp
dicaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaa
acaaaaaaaeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaakgbkbaaa
adaaaaaadiaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 146 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c17.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.zw, v6.xyxy
abs r2.w, v6.z
max r1.w, r6.z, r2
rcp r3.x, r1.w
min r1.w, r6.z, r2
mul r1.w, r1, r3.x
mul r3.x, r1.w, r1.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mad r2.xyz, r0.w, r1, r0
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c14.y, c14.z
mad r3.y, r1.x, r3.x, c14.w
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
mad r3.y, r3, r3.x, c15.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
mad r0.x, r3.y, r3, c15.y
mad r0.w, r0.x, r3.x, c15.z
add_pp r1.xyz, r1, -r2
mad_pp r0.xyz, r6.w, r1, r2
mul r1.w, r0, r1
add r3.y, -r2.w, c12
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c12.y
add r2.x, -r1.w, c15.w
add r0.w, r6.z, -r2
cmp r0.w, -r0, r1, r2.x
mul r2.x, v0, c8
mul_sat r2.x, r2, c13.z
mad_pp r1.xyz, r2.x, r1, r0
add r1.w, -r0, c13
cmp r0.x, v6.z, r0.w, r1.w
cmp r3.x, v6, r0, -r0
mad r5.x, r3, c16, c16.y
mul r8.xy, v6, c11.x
mad r3.x, r2.w, c12.z, c12.w
mad r3.x, r2.w, r3, c13
mad r2.w, r2, r3.x, c13.y
abs r3.x, v6.y
rcp r3.y, r3.y
mul r3.w, r2, r3.y
cmp r2.w, v6.z, c12.x, c12.y
mul r4.x, r2.w, r3.w
add r3.z, -r3.x, c12.y
mad r3.y, r3.x, c12.z, c12.w
mad r3.y, r3, r3.x, c13.x
rsq r3.z, r3.z
mul r2.xyz, v1, r1
mul r7.xy, v6.zyzw, c11.x
mad r3.x, r3.y, r3, c13.y
rcp r3.z, r3.z
mul r3.y, r3.x, r3.z
cmp r3.x, v6.y, c12, c12.y
mul r3.z, r3.x, r3.y
mad r3.w, -r4.x, c13.z, r3
mad r3.y, -r3.z, c13.z, r3
mad r3.z, r2.w, c13.w, r3.w
mad r2.w, r3.x, c13, r3.y
mul r3.x, r3.z, c14
dsy r3.zw, v6.xyxy
mul r3.zw, r3, r3
mul r5.y, r2.w, c14.x
dsx r4.w, r3.x
dsy r4.y, r3.x
dsx r3.xy, v6
mul r3.xy, r3, r3
add r2.w, r3.x, r3.y
add r3.x, r3.z, r3.w
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r4.z, r2.w, c16.x
mul r2.w, v0.x, c5.x
mul r3.w, r2, r2
rsq r3.x, r3.x
rcp r3.x, r3.x
mul r4.x, r3, c16
texldd r3.xyz, r5, s0, r4.zwzw, r4
add_pp r3.xyz, r3, -r2
mul_sat r2.w, r3, r2
mad_pp r2.xyz, r2.w, r3, r2
add r2.w, v1, c16.z
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
dp4 r3.y, c1, c1
rsq r3.x, r3.y
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r0, r6.z, r1, r0
mul r6.xy, v6.zxzw, c11.x
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
texldd r1, r5, s3, r4.zwzw, r4
mul r3.xyz, r3.x, c1
mul_pp r1.w, r1, r2
dp3_sat r4.w, v5, r3
mul_pp r3, r1, r0
texldp r0.x, v4, s8
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
cmp r2.w, r0.z, c12.y, r0
rcp r0.x, v3.w
mad r4.xy, v3, r0.x, c16.y
dp3 r0.x, v3, v3
texld r0.w, r4, s6
cmp r0.z, -v3, c12.x, c12.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r5.w, r0.x, r2
mul_pp r0.y, r4.w, c3.w
mul_pp r0.y, r5.w, r0
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r4.xyz, r0, r0.w, c0
add_pp r0.xyz, r3, -r2
mad_pp r3.xyz, r3.w, r0, r2
mul_pp r4.xyz, r4, v7.x
mul r5.xyz, r4, c10.x
add_pp r3.w, r4, c16
texld r2, r8, s4
texld r0, r7, s4
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
texld r2, r6, s4
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
mul_pp r3.w, r3, c3
mul_pp r0, r1, r0
mad_pp r3.xyz, r3, c4, r5
mul_pp r2.x, r3.w, r5.w
mul_pp_sat r1.x, r2, c17
add_pp r1.x, -r1, c12.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 137 instructions, 6 temp regs, 0 temp arrays:
// ALU 111 float, 0 int, 5 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcdddhignklnaoodelbhhaddglilginpaabaaaaaalmbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcfebdaaaaeaaaaaaanfaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakdcaabaaaacaaaaaaegaabaaaacaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaacaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaoaaaaah
ocaabaaaacaaaaaaagbjbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaa
afaaaaaajgafbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadbaaaaah
ccaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaacaaaaaadhaaaaakccaabaaa
acaaaaaabkaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaabbaaaaaj
ccaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaa
fgafbaaaacaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaa
egbcbaaaafaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaa
acaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaapnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaai
ccaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaj
hcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaa
adaaaaaaaeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaa
afaaaaaadiaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 145 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c17.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.zw, v6.xyxy
abs r2.w, v6.z
max r1.w, r6.z, r2
rcp r3.x, r1.w
min r1.w, r6.z, r2
mul r1.w, r1, r3.x
mul r3.x, r1.w, r1.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mad r2.xyz, r0.w, r1, r0
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c14.y, c14.z
mad r3.y, r1.x, r3.x, c14.w
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
mad r3.y, r3, r3.x, c15.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
mad r0.x, r3.y, r3, c15.y
mad r0.w, r0.x, r3.x, c15.z
add_pp r1.xyz, r1, -r2
mad_pp r0.xyz, r6.w, r1, r2
mul r1.w, r0, r1
add r3.y, -r2.w, c12
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c12.y
add r2.x, -r1.w, c15.w
add r0.w, r6.z, -r2
cmp r0.w, -r0, r1, r2.x
mul r2.x, v0, c8
mul_sat r2.x, r2, c13.z
mad_pp r1.xyz, r2.x, r1, r0
add r1.w, -r0, c13
cmp r0.x, v6.z, r0.w, r1.w
cmp r3.x, v6, r0, -r0
mad r5.x, r3, c16, c16.y
mul r8.xy, v6, c11.x
mad r3.x, r2.w, c12.z, c12.w
mad r3.x, r2.w, r3, c13
mad r2.w, r2, r3.x, c13.y
abs r3.x, v6.y
rcp r3.y, r3.y
mul r3.w, r2, r3.y
cmp r2.w, v6.z, c12.x, c12.y
mul r4.x, r2.w, r3.w
add r3.z, -r3.x, c12.y
mad r3.y, r3.x, c12.z, c12.w
mad r3.y, r3, r3.x, c13.x
rsq r3.z, r3.z
mul r2.xyz, v1, r1
mul r7.xy, v6.zyzw, c11.x
mad r3.x, r3.y, r3, c13.y
rcp r3.z, r3.z
mul r3.y, r3.x, r3.z
cmp r3.x, v6.y, c12, c12.y
mul r3.z, r3.x, r3.y
mad r3.w, -r4.x, c13.z, r3
mad r3.y, -r3.z, c13.z, r3
mad r3.z, r2.w, c13.w, r3.w
mad r2.w, r3.x, c13, r3.y
mul r3.x, r3.z, c14
dsy r3.zw, v6.xyxy
mul r3.zw, r3, r3
mul r5.y, r2.w, c14.x
dsx r4.w, r3.x
dsy r4.y, r3.x
dsx r3.xy, v6
mul r3.xy, r3, r3
add r2.w, r3.x, r3.y
add r3.x, r3.z, r3.w
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r4.z, r2.w, c16.x
mul r2.w, v0.x, c5.x
mul r3.w, r2, r2
rsq r3.x, r3.x
rcp r3.x, r3.x
mul r4.x, r3, c16
texldd r3.xyz, r5, s0, r4.zwzw, r4
add_pp r3.xyz, r3, -r2
mul_sat r2.w, r3, r2
mad_pp r2.xyz, r2.w, r3, r2
add r2.w, v1, c16.z
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
dp4 r3.y, c1, c1
rsq r3.x, r3.y
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r0, r6.z, r1, r0
mul r6.xy, v6.zxzw, c11.x
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
texldd r1, r5, s3, r4.zwzw, r4
mul r3.xyz, r3.x, c1
mul_pp r1.w, r1, r2
dp3_sat r4.w, v5, r3
mul_pp r3, r1, r0
mov r0.x, c2
add r0.w, c12.y, -r0.x
rcp r0.z, v3.w
mad r4.xy, v3, r0.z, c16.y
texldp r0.x, v4, s8
mad r2.w, r0.x, r0, c2.x
dp3 r0.x, v3, v3
texld r0.w, r4, s6
cmp r0.z, -v3, c12.x, c12.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r5.w, r0.x, r2
mul_pp r0.y, r4.w, c3.w
mul_pp r0.y, r5.w, r0
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r4.xyz, r0, r0.w, c0
add_pp r0.xyz, r3, -r2
mad_pp r3.xyz, r3.w, r0, r2
mul_pp r4.xyz, r4, v7.x
mul r5.xyz, r4, c10.x
add_pp r3.w, r4, c16
texld r2, r8, s4
texld r0, r7, s4
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
texld r2, r6, s4
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
mul_pp r3.w, r3, c3
mul_pp r0, r1, r0
mad_pp r3.xyz, r3, c4, r5
mul_pp r2.x, r3.w, r5.w
mul_pp_sat r1.x, r2, c17
add_pp r1.x, -r1, c12.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 137 instructions, 6 temp regs, 0 temp arrays:
// ALU 112 float, 0 int, 5 uint
// TEX 14 (0 load, 1 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkhieneofaoifcphjebjedldcdogackanabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakdcaabaaaacaaaaaaegaabaaaacaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaacaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaoaaaaah
ocaabaaaacaaaaaaagbjbaaaaeaaaaaapgbpbaaaaeaaaaaaehaaaaalccaabaaa
acaaaaaajgafbaaaacaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaadkaabaaa
acaaaaaaaaaaaaajecaabaaaacaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaaaacaaaaaackaabaaa
acaaaaaaakiacaaaacaaaaaabiaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaabbaaaaajccaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaaacaaaaaaagijcaaaabaaaaaa
aaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaaafaaaaaajgahbaaaacaaaaaa
diaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
ccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaapnekibeadicaaaahccaabaaa
acaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaackaabaaaacaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaaacaaaaaabkaabaiaebaaaaaa
acaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakncaabaaaacaaaaaaagajbaaa
afaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaahncaabaaa
acaaaaaaagaobaaaacaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaafaaaaaa
igadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
adaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
bkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 135 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
dsy r5.zw, v5.xyxy
abs r6.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c5.x
mul r1.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v5.z, r1.w, r2
cmp r0.z, v5.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v5, c10.x
mul r0.xy, v5.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v5.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v5, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v5
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v5.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v5.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mad_pp r3, r6.w, r2, r3
texldd r2, r7, s3, r1.zwzw, r0.zwzw
mul r5.w, r4, r4
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
mul_pp r2.w, r2, r0.z
mul_pp r3, r2, r3
add_pp r3.xyz, r3, -r5
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
dp3_sat r4.w, v4, r4
mad_pp r3.xyz, r3.w, r3, r5
add_pp r3.w, r4, c15
texld r1, r1, s4
mul_pp r0.z, r4.w, c2.w
texldp r7.x, v3, s6
mul_pp r0.w, r7.x, r0.z
mov r0.z, c8.x
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v6.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
mul_pp r3.w, r3, c2
mul_pp r1.x, r3.w, r7
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_ShadowMapTexture] 2D 0
// 125 instructions, 6 temp regs, 0 temp arrays:
// ALU 103 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhggghcpcafjjkiafbkinehcihggaknamabaaaaaanibcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefciibbaaaaeaaaaaaagcaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadicbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaa
kgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
aeaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeaaoaaaaahmcaabaaaacaaaaaaagbebaaaadaaaaaapgbpbaaaadaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaacaaaaaaeghobaaaagaaaaaaaagabaaa
aaaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaak
ocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaa
aeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaaeaaaaaa
diaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 136 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
dsy r5.zw, v6.xyxy
abs r6.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c5.x
mul r1.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v6.z, r1.w, r2
cmp r0.z, v6.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v6, c10.x
mul r0.xy, v6.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v6.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v6, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v6
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v6.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad_pp r3, r6.w, r2, r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v6.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
texldd r2, r7, s3, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mul r5.w, r4, r4
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
mul_pp r2.w, r2, r0.z
dp3_sat r5.w, v5, r4
mul_pp r4, r2, r3
texld r1, r1, s4
mul_pp r0.z, r5.w, c2.w
texldp r3.x, v4, s6
texld r0.w, v3, s7
mul r3.w, r0, r3.x
mul_pp r0.w, r3, r0.z
mov r0.z, c8.x
add r3.xyz, c2, r0.z
mul_pp_sat r0.w, r0, c17.x
mad_sat r7.xyz, r3, r0.w, c0
add_pp r3.xyz, r4, -r5
mad_pp r3.xyz, r4.w, r3, r5
mul_pp r4.xyz, r7, v7.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r4.w, r5, c15
mul_pp r4.w, r4, c2
mul_pp r1.x, r4.w, r3.w
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 220 used size, 13 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
Float 216 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] 2D 0
// 127 instructions, 7 temp regs, 0 temp arrays:
// ALU 104 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedchgcpgojghcbcnhbfbhgcbcfcgfdbhjbabaaaaaafibdaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apalaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpabbaaaaeaaaaaaahmaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
fibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaa
acaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadecbabaaaadaaaaaagcbaaaad
lcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
agaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaagaaaaaakgikcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
agaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaagaaaaaaakbabaaa
agaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaakgikcaaaaaaaaaaa
anaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
kgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
afaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaajaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaajaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeaaoaaaaahmcaabaaaacaaaaaaagbebaaaaeaaaaaapgbpbaaaaeaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaacaaaaaaeghobaaaahaaaaaaaagabaaa
aaaaaaaaefaaaaajpcaabaaaagaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaabaaaaaadiaaaaahecaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaa
agaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaa
dicaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
ocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaa
aeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaakgbkbaaaadaaaaaa
diaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 145 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mul r1.xy, v6.zyzw, c8.x
mul r0.xy, v6.zyzw, c7.x
mul r3.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c20.x, c20
abs r0.zw, v6.xyxy
abs r0.x, v6.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v6, c8.x
mul r2.w, r1, r1
mul r5.xy, v6, c12.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c15.y, c15.z
mad r3.w, r3.x, r2, c15
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c16.x
mul r1.xy, v6.zxzw, c8.x
mul r2.xy, v6.zxzw, c7.x
mad r3.w, r3, r2, c16.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c16.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
add r3.w, v1, c17.z
frc r5.z, r3.w
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c16.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c14
mul r0.y, v0.x, c9.x
add_pp r2.xyz, -r1, c13.y
mul_sat r0.y, r0, c14.z
mad_pp r1.xyz, r0.y, r2, r1
mul r3.xyz, v1, r1
cmp r1.w, v6.z, r2, r1
cmp r0.y, v6.x, r1.w, -r1.w
abs r1.w, v6.y
mad r2.x, r0.y, c17, c17.y
add r0.y, -r0.x, c13
mad r1.x, r0, c13.z, c13.w
mad r1.x, r0, r1, c14
mad r0.x, r0, r1, c14.y
add r1.y, -r1.w, c13
mad r1.z, r1.w, c13, c13.w
mad r1.z, r1, r1.w, c14.x
mad r1.z, r1, r1.w, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c13.x, c13.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c13, c13.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c14.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c14.z, r1.z
mad r0.x, r1, c14.w, r0
mad r0.y, r1.w, c14.w, r0
mul r0.x, r0, c15
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
add_sat r3.w, r3, -r5.z
mul r2.y, r0, c15.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.z, r0.y, c17.x
mul r1.xy, v6.zyzw, c12.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.x, c17.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
texldd r2, r2, s3, r1.zwzw, r2.zwzw
mul r0.y, v0.x, c6.x
mul_pp r2.w, r2, r3
mul r0.x, r0.y, r0.y
dp3 r1.z, v4, v4
rsq r1.w, r1.z
rcp r1.w, r1.w
dp4 r3.w, c1, c1
add_pp r4.xyz, r4, -r3
mul_sat r0.x, r0, r0.y
mad_pp r3.xyz, r0.x, r4, r3
mul r0.xy, v6.zxzw, c12.x
texld r4, r5, s5
texld r6, r1, s5
add_pp r6, r6, -r4
mad_pp r4, r0.z, r6, r4
texld r6, r0, s5
add_pp r6, r6, -r4
mad_pp r4, r0.w, r6, r4
mul_pp r4, r2, r4
texld r6, v4, s6
add_pp r7.xyz, r4, -r3
dp4 r1.z, r6, c18
rsq r3.w, r3.w
mul r6.xyz, r3.w, c1
dp3_sat r7.w, v5, r6
mad_pp r7.xyz, r4.w, r7, r3
mul r1.w, r1, c2
mad r1.w, -r1, c19.x, r1.z
mov r1.z, c3.x
cmp r1.w, r1, c13.y, r1.z
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
mul r6.w, r6.x, r1
mov r1.w, c10.x
mul_pp r1.z, r7.w, c4.w
mul_pp r1.z, r6.w, r1
texld r3, r5, s4
mul_pp_sat r1.z, r1, c19.w
add r6.xyz, c4, r1.w
mad_sat r6.xyz, r6, r1.z, c0
mul_pp r4.xyz, r6, v7.x
texld r1, r1, s4
add_pp r5, r1, -r3
mad_pp r3, r0.z, r5, r3
texld r5, r0, s4
add_pp r0.x, r7.w, c17.w
mul_pp r1.w, r0.x, c4
mul r6.xyz, r4, c11.x
add_pp r5, r5, -r3
mad_pp r0, r0.w, r5, r3
mul_pp r1.w, r1, r6
mul_pp_sat r1.w, r1, c19.y
mul_pp r0, r2, r0
mad_pp r1.xyz, r7, c5, r6
mad_pp r0.xyz, -r1, r4, r0
add_pp r1.w, -r1, c13.y
mul_pp r1.xyz, r1, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 134 instructions, 6 temp regs, 0 temp arrays:
// ALU 110 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedglchndofmildcfkebnbjnmmfimgniblkabaaaaaaeabeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcnibcaaaaeaaaaaaalgaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
acaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
diaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaap
mcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaa
adaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaa
ckaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaan
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaa
aaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaafaaaaaa
egbcbaaaaeaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaa
acaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
dbaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadhaaaaak
bcaabaaaacaaaaaaakaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaa
aaaaiadpbaaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaa
abaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaa
bbaaaaajccaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaa
acaaaaaafgafbaaaacaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaa
acaaaaaaegbcbaaaafaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaa
bkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaa
acaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaapnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaa
bkaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaa
acaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaea
aaaaaaaiccaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
ajaaaaaadccaaaakncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaa
agijcaaaadaaaaaaaeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaa
pgbpbaaaadaaaaaadiaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaa
aaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaa
acaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaa
agbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaai
pcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaa
aaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 146 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mul r1.xy, v6.zyzw, c8.x
mul r0.xy, v6.zyzw, c7.x
mul r3.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c20.x, c20
abs r0.zw, v6.xyxy
abs r0.x, v6.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v6, c8.x
mul r2.w, r1, r1
mul r5.xy, v6, c12.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c15.y, c15.z
mad r3.w, r3.x, r2, c15
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c16.x
mul r1.xy, v6.zxzw, c8.x
mul r2.xy, v6.zxzw, c7.x
mad r3.w, r3, r2, c16.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c16.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
add r3.w, v1, c17.z
frc r5.z, r3.w
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c16.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c14
mul r0.y, v0.x, c9.x
add_pp r2.xyz, -r1, c13.y
mul_sat r0.y, r0, c14.z
mad_pp r1.xyz, r0.y, r2, r1
mul r3.xyz, v1, r1
cmp r1.w, v6.z, r2, r1
cmp r0.y, v6.x, r1.w, -r1.w
abs r1.w, v6.y
mad r2.x, r0.y, c17, c17.y
add r0.y, -r0.x, c13
mad r1.x, r0, c13.z, c13.w
mad r1.x, r0, r1, c14
mad r0.x, r0, r1, c14.y
add r1.y, -r1.w, c13
mad r1.z, r1.w, c13, c13.w
mad r1.z, r1, r1.w, c14.x
mad r1.z, r1, r1.w, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c13.x, c13.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c13, c13.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c14.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c14.z, r1.z
mad r0.x, r1, c14.w, r0
mad r0.y, r1.w, c14.w, r0
mul r0.x, r0, c15
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
add_sat r3.w, r3, -r5.z
mul r2.y, r0, c15.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.z, r0.y, c17.x
mul r1.xy, v6.zyzw, c12.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.x, c17.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
texldd r2, r2, s3, r1.zwzw, r2.zwzw
mul r0.y, v0.x, c6.x
mul_pp r2.w, r2, r3
mul r0.x, r0.y, r0.y
dp3 r1.w, v4, v4
rsq r1.w, r1.w
dp4 r3.w, c1, c1
rcp r1.w, r1.w
add_pp r4.xyz, r4, -r3
mul_sat r0.x, r0, r0.y
mad_pp r3.xyz, r0.x, r4, r3
mul r0.xy, v6.zxzw, c12.x
texld r4, r5, s5
texld r6, r1, s5
add_pp r6, r6, -r4
mad_pp r4, r0.z, r6, r4
texld r6, r0, s5
add_pp r6, r6, -r4
mad_pp r4, r0.w, r6, r4
mul_pp r4, r2, r4
texld r6, v4, s6
add_pp r7.xyz, r4, -r3
dp4 r1.z, r6, c18
rsq r3.w, r3.w
mul r6.xyz, r3.w, c1
dp3_sat r7.w, v5, r6
mul r1.w, r1, c2
mad r1.w, -r1, c19.x, r1.z
mov r1.z, c3.x
cmp r3.w, r1, c13.y, r1.z
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
texld r1.w, v3, s8
mul r1.w, r6.x, r1
mul r6.w, r1, r3
mov r1.w, c10.x
mad_pp r7.xyz, r4.w, r7, r3
mul_pp r1.z, r7.w, c4.w
mul_pp r1.z, r6.w, r1
texld r3, r5, s4
mul_pp_sat r1.z, r1, c19.w
add r6.xyz, c4, r1.w
mad_sat r6.xyz, r6, r1.z, c0
mul_pp r4.xyz, r6, v7.x
texld r1, r1, s4
add_pp r5, r1, -r3
mad_pp r3, r0.z, r5, r3
texld r5, r0, s4
add_pp r0.x, r7.w, c17.w
mul_pp r1.w, r0.x, c4
mul r6.xyz, r4, c11.x
add_pp r5, r5, -r3
mad_pp r0, r0.w, r5, r3
mul_pp r1.w, r1, r6
mul_pp_sat r1.w, r1, c19.y
mul_pp r0, r2, r0
mad_pp r1.xyz, r7, c5, r6
mad_pp r0.xyz, -r1, r4, r0
add_pp r1.w, -r1, c13.y
mul_pp r1.xyz, r1, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 136 instructions, 7 temp regs, 0 temp arrays:
// ALU 111 float, 0 int, 4 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcgenjbiiehhfhnmhigefhahppipcoamdabaaaaaajmbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdebdaaaaeaaaaaaamnaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaafidaaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
icbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaafaaaaaaegbcbaaa
aeaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaacaaaaaa
egaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadhaaaaakbcaabaaa
acaaaaaaakaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaagaaaaaaegbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaaj
ccaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaa
fgafbaaaacaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaa
egbcbaaaafaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaa
acaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaapnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaai
ccaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaj
hcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaa
adaaaaaaaeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaa
adaaaaaadiaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 154 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c21, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c21.z
mul r5.xy, v6, c15.x
mul r1.xy, v6.zyzw, c11.x
mul r0.xy, v6.zyzw, c10.x
mul r3.xy, v6, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c22.x, c22
abs r0.zw, v6.xyxy
abs r0.x, v6.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v6, c11.x
mul r2.w, r1, r1
texld r6, r5, s5
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c18.y, c18.z
mad r3.w, r3.x, r2, c18
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c19.x
mul r1.xy, v6.zxzw, c11.x
mul r2.xy, v6.zxzw, c10.x
mad r3.w, r3, r2, c19.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r1.xyz, r1, -r3
mad r0.y, r3.w, r2.w, c19.z
mad_pp r1.xyz, r0.w, r1, r3
mul r1.w, r0.y, r1
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c19.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c17
cmp r1.w, v6.z, r2, r1
mul r0.y, v0.x, c12.x
abs r2.w, v6.y
add_pp r2.xyz, -r1, c16.y
mul_sat r0.y, r0, c17.z
mad_pp r1.xyz, r0.y, r2, r1
mul r2.xyz, v1, r1
cmp r0.y, v6.x, r1.w, -r1.w
mad r1.z, r0.y, c20.x, c20.y
add r0.y, -r0.x, c16
mad r1.x, r0, c16.z, c16.w
mad r1.x, r0, r1, c17
mad r0.x, r0, r1, c17.y
add r1.y, -r2.w, c16
mad r1.w, r2, c16.z, c16
mad r1.w, r1, r2, c17.x
mad r1.w, r1, r2, c17.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v6.y, c16.x, c16.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c16, c16.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c17.z, r0.y
mad r0.x, r1, c17.w, r0
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c17.z, r1.w
mad r0.y, r2.w, c17.w, r0
mul r0.x, r0, c18
dsy r3.y, r0.x
add r1.x, r3.z, r3.w
add r2.w, v1, c20.z
frc r3.z, r2.w
add_sat r2.w, r2, -r3.z
mul r1.w, r0.y, c18.x
dsx r1.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.x, r0.y, c20
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.x, r0, c20
texldd r4.xyz, r1.zwzw, s0, r1, r3
texldd r1, r1.zwzw, s3, r1, r3
mul_pp r1.w, r1, r2
mul r0.y, v0.x, c9.x
mul r0.x, r0.y, r0.y
add_pp r4.xyz, r4, -r2
mul_sat r0.x, r0, r0.y
mad_pp r2.xyz, r0.x, r4, r2
mul r4.xy, v6.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
rcp r2.w, v4.w
mul r0.xy, v6.zxzw, c15.x
mad_pp r6, r0.z, r7, r6
texld r7, r0, s5
add_pp r7, r7, -r6
mad_pp r6, r0.w, r7, r6
mul_pp r3, r1, r6
mad r6.xy, v4, r2.w, c6
mad r7.xy, v4, r2.w, c5
texld r6.x, r6, s8
texld r7.x, r7, s8
mov r7.z, r7.x
mad r7.xy, v4, r2.w, c3
mov r7.w, r6.x
mad r6.xy, v4, r2.w, c4
texld r7.x, r7, s8
texld r6.x, r6, s8
mov r7.y, r6.x
mad r6, -v4.z, r2.w, r7
mov r4.z, c2.x
cmp r6, r6, c16.y, r4.z
dp4_pp r4.z, r6, c21.x
dp4 r2.w, c1, c1
rsq r2.w, r2.w
mul r7.xyz, r2.w, c1
dp3_sat r6.w, v5, r7
rcp r2.w, v3.w
mad r7.xy, v3, r2.w, c20.y
texld r2.w, r7, s6
cmp r5.z, -v3, c16.x, c16.y
mul_pp r2.w, r5.z, r2
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
mul_pp r2.w, r2, r6.x
mul_pp r2.w, r2, r4.z
mul_pp r4.w, r6, c7
mul_pp r4.z, r2.w, r4.w
mov r4.w, c13.x
add_pp r7.xyz, r3, -r2
texld r5, r5, s4
mul_pp_sat r4.z, r4, c21.w
add r6.xyz, c7, r4.w
mad_sat r6.xyz, r6, r4.z, c0
mul_pp r3.xyz, r6, v7.x
mad_pp r6.xyz, r3.w, r7, r2
mul r2.xyz, r3, c14.x
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r0.x, r6.w, c20.w
mul_pp r3.w, r0.x, c7
add_pp r5, r5, -r4
mad_pp r0, r0.w, r5, r4
mul_pp r0, r1, r0
mad_pp r2.xyz, r6, c8, r2
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c21.y
add_pp r1.w, -r1.x, c16.y
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 220 used size, 13 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
Float 216 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 148 instructions, 7 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 5 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncimggkiooaonnpmmocjjlibglhidcjkabaaaaaabibgaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefclabeaaaaeaaaaaaacmafaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaoaaaaahhcaabaaaacaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaa
aaaaaaaidcaabaaaafaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaabaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaiaaaaaaaagabaaa
aaaaaaaaaaaaaaaidcaabaaaagaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaa
acaaaaaaefaaaaajpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaiaaaaaa
aagabaaaaaaaaaaadgaaaaafccaabaaaafaaaaaaakaabaaaagaaaaaaaaaaaaai
dcaabaaaagaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaadaaaaaaefaaaaaj
pcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaa
dgaaaaafecaabaaaafaaaaaaakaabaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaagaaaaaa
egaabaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadgaaaaaficaabaaa
afaaaaaaakaabaaaagaaaaaadbaaaaahpcaabaaaacaaaaaaegaobaaaafaaaaaa
kgakbaaaacaaaaaadhaaaaanpcaabaaaacaaaaaaegaobaaaacaaaaaaagiacaaa
acaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaak
bcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiado
aaaaiadoaoaaaaahgcaabaaaacaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakgcaabaaaacaaaaaafgagbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaacaaaaaadkaabaaaafaaaaaabkaabaaaacaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaajccaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaa
acaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaa
afaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaajaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaajaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
pnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaa
acaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
ncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaa
aeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaafaaaaaa
diaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 155 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c21, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c21.z
mad_sat r1.w, r0, c22.x, c22.y
mul r5.xy, v6, c15.x
mul r0.xy, v6.zyzw, c11.x
mul r1.xy, v6.zyzw, c10.x
abs r3.zw, v6.xyxy
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r1.xyz, r1.w, r1, r0
max r2.x, r3.z, r0.w
rcp r0.x, r2.x
min r0.y, r3.z, r0.w
mul r2.w, r0.y, r0.x
mul r0.xy, v6, c11.x
mul r2.xy, v6, c10.x
mul r3.x, r2.w, r2.w
texld r6, r5, s5
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.w, r2, r0
mad r2.x, r3, c18.y, c18.z
mad r3.y, r2.x, r3.x, c18.w
add_pp r1.xyz, r1, -r0
mad_pp r2.xyz, r3.z, r1, r0
mad r3.y, r3, r3.x, c19.x
mul r0.xy, v6.zxzw, c11.x
mul r1.xy, v6.zxzw, c10.x
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r1.w, r1, r0
add_pp r0.xyz, r0, -r2
mad r3.y, r3, r3.x, c19
mad r1.x, r3.y, r3, c19.z
mul r1.y, r1.x, r2.w
mul r1.w, v0.x, c12.x
dsx r3.xy, v6
mad_pp r0.xyz, r3.w, r0, r2
rcp r2.w, v4.w
add r1.z, r3, -r0.w
add r1.x, -r1.y, c19.w
cmp r2.y, -r1.z, r1, r1.x
add r2.x, -r2.y, c17.w
add_pp r1.xyz, -r0, c16.y
mul_sat r1.w, r1, c17.z
mad_pp r0.xyz, r1.w, r1, r0
abs r1.z, v6.y
cmp r2.x, v6.z, r2.y, r2
cmp r1.x, v6, r2, -r2
mul r2.xyz, v1, r0
mad r0.z, r1.x, c20.x, c20.y
add r0.x, -r0.w, c16.y
mad r0.y, r0.w, c16.z, c16.w
mad r0.y, r0.w, r0, c17.x
mad r0.y, r0.w, r0, c17
add r1.x, -r1.z, c16.y
mad r1.y, r1.z, c16.z, c16.w
mad r1.y, r1, r1.z, c17.x
mad r1.y, r1, r1.z, c17
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v6.z, c16.x, c16.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c17.z, r0.y
mad r0.x, r0.w, c17.w, r0
mul r1.y, r1, r1.x
cmp r1.z, v6.y, c16.x, c16.y
mul r1.x, r1.z, r1.y
mad r0.y, -r1.x, c17.z, r1
mad r0.y, r1.z, c17.w, r0
mul r0.x, r0, c18
mul r0.w, r0.y, c18.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
dsy r1.zw, v6.xyxy
mul r1.zw, r1, r1
dsy r1.y, r0.x
dsx r0.y, r0.x
add r0.x, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.z, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r0.x, r1.z, c20
mul r1.x, r1, c20
texldd r4.xyz, r0.zwzw, s0, r0, r1
mul r1.w, v0.x, c9.x
mul r1.z, r1.w, r1.w
add_pp r4.xyz, r4, -r2
mul_sat r1.z, r1, r1.w
mad_pp r2.xyz, r1.z, r4, r2
mul r4.xy, v6.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
add r1.z, v1.w, c20
frc r1.w, r1.z
texldd r0, r0.zwzw, s3, r0, r1
add_sat r1.z, r1, -r1.w
mul_pp r1.w, r0, r1.z
mad_pp r6, r3.z, r7, r6
mul r3.xy, v6.zxzw, c15.x
texld r7, r3, s5
add_pp r7, r7, -r6
mad_pp r6, r3.w, r7, r6
mov_pp r1.xyz, r0
mul_pp r0, r1, r6
mad r7.xyz, v4, r2.w, c6
texld r6.x, r7, s8
mad r7.xyz, v4, r2.w, c5
mov_pp r6.w, r6.x
texld r6.x, r7, s8
mad r7.xyz, v4, r2.w, c4
mov_pp r6.z, r6.x
texld r6.x, r7, s8
mad r7.xyz, v4, r2.w, c3
mov_pp r6.y, r6.x
mov r2.w, c2.x
add r4.z, c16.y, -r2.w
texld r6.x, r7, s8
mad r6, r6, r4.z, c2.x
dp4_pp r4.z, r6, c21.x
dp4 r4.w, c1, c1
rsq r2.w, r4.w
mul r7.xyz, r2.w, c1
dp3_sat r6.w, v5, r7
rcp r2.w, v3.w
mad r7.xy, v3, r2.w, c20.y
texld r2.w, r7, s6
cmp r5.z, -v3, c16.x, c16.y
mul_pp r2.w, r5.z, r2
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
mul_pp r2.w, r2, r6.x
mul_pp r2.w, r2, r4.z
mul_pp r4.w, r6, c7
mul_pp r4.z, r2.w, r4.w
mov r4.w, c13.x
add_pp r7.xyz, r0, -r2
texld r5, r5, s4
mul_pp_sat r4.z, r4, c21.w
add r6.xyz, c7, r4.w
mad_sat r6.xyz, r6, r4.z, c0
mul_pp r0.xyz, r6, v7.x
mad_pp r6.xyz, r0.w, r7, r2
mul r2.xyz, r0, c14.x
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r3.z, r4, r5
texld r5, r3, s4
add_pp r0.w, r6, c20
add_pp r5, r5, -r4
mul_pp r0.w, r0, c7
mad_pp r3, r3.w, r5, r4
mul_pp r0.w, r0, r2
mul_pp_sat r0.w, r0, c21.y
mul_pp r1, r1, r3
mad_pp r2.xyz, r6, c8, r2
mad_pp r1.xyz, -r2, r0, r1
add_pp r0.w, -r0, c16.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 220 used size, 13 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
Float 216 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 145 instructions, 7 temp regs, 0 temp arrays:
// ALU 117 float, 0 int, 5 uint
// TEX 14 (0 load, 4 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpncgjgjnbdechhenekdoinlppcojliebabaaaaaapibfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcjabeaaaaeaaaaaaaceafaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaajbcaabaaaacaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaa
abeaaaaaaaaaiadpaoaaaaahocaabaaaacaaaaaaagbjbaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaaegiccaaaaaaaaaaa
abaaaaaaehaaaaalbcaabaaaafaaaaaaegaabaaaafaaaaaaaghabaaaaiaaaaaa
aagabaaaaaaaaaaackaabaaaafaaaaaaaaaaaaaihcaabaaaagaaaaaajgahbaaa
acaaaaaaegiccaaaaaaaaaaaacaaaaaaehaaaaalccaabaaaafaaaaaaegaabaaa
agaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaaagaaaaaaaaaaaaai
hcaabaaaagaaaaaajgahbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaai
ocaabaaaacaaaaaafgaobaaaacaaaaaaagijcaaaaaaaaaaaaeaaaaaaehaaaaal
icaabaaaafaaaaaajgafbaaaacaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaa
dkaabaaaacaaaaaaehaaaaalecaabaaaafaaaaaaegaabaaaagaaaaaaaghabaaa
aiaaaaaaaagabaaaaaaaaaaackaabaaaagaaaaaadcaaaaakpcaabaaaacaaaaaa
egaobaaaafaaaaaaagaabaaaacaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaak
bcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiado
aaaaiadoaoaaaaahgcaabaaaacaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakgcaabaaaacaaaaaafgagbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaacaaaaaadkaabaaaafaaaaaabkaabaaaacaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaajccaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaa
acaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaa
afaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaajaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaajaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
pnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaa
acaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
ncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaa
aeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaafaaaaaa
diaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 154 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c21, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.y
mad_sat r2.w, r0, c20.z, c20
add r4.w, v1, c17.z
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r6.zw, v6.xyxy
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
mad r3.y, r3, r3.x, c16.x
mul r1.xy, v6, c8.x
mul r0.xy, v6, c7.x
mad r3.y, r3, r3.x, c16
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.w, r0, r2
mad r1.x, r3.y, r3, c16.z
mul r1.y, r1.x, r1.w
add r1.x, r6.z, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
add_pp r1.xyz, -r0, c13.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c14.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
mad r5.x, r0, c17, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mul r1.xyz, v1, r1
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.w, -r2.x, c14.z, r1
mad r0.z, r0.w, c14.w, r1.w
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
mul r0.w, v0.x, c6.x
mul r1.w, r0, r0
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.xyz, r5, s0, r3.zwzw, r3
add_pp r0.xyz, r0, -r1
mul_sat r0.w, r1, r0
mad_pp r4.xyz, r0.w, r0, r1
mul r8.xy, v6, c12.x
mul r7.xy, v6.zyzw, c12.x
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
mul r6.xy, v6.zxzw, c12.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r2, r6.w, r0, r1
texldd r0, r5, s3, r3.zwzw, r3
frc r5.z, r4.w
add_sat r1.x, r4.w, -r5.z
mul_pp r1.w, r0, r1.x
mov_pp r1.xyz, r0
mul_pp r2, r1, r2
add_pp r2.xyz, r2, -r4
add r3.xyz, v4, c18.xyyw
texld r0, r3, s6
dp4 r5.w, r0, c19
mad_pp r4.xyz, r2.w, r2, r4
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r5.z, r0, c19
add r3.xyz, v4, c18.yyxw
texld r3, r3, s6
dp4 r5.y, r3, c19
dp3 r0.w, v4, v4
rsq r3.x, r0.w
add r0.xyz, v4, c18.x
texld r0, r0, s6
dp4 r5.x, r0, c19
rcp r3.x, r3.x
mul r0.x, r3, c2.w
dp4 r3.x, c1, c1
mad r0, -r0.x, c18.z, r5
mov r3.y, c3.x
cmp r0, r0, c13.y, r3.y
dp4_pp r0.y, r0, c18.w
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_sat r4.w, v5, r3
mul_pp r0.z, r4.w, c4.w
dp3 r0.x, v3, v3
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r0.z
add_pp r4.w, r4, c17
mul_pp r4.w, r4, c4
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.x
mul_pp_sat r3.x, r0.y, c21
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v7.x
mul r5.xyz, r0, c11.x
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 145 instructions, 7 temp regs, 0 temp arrays:
// ALU 118 float, 0 int, 4 uint
// TEX 17 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednidjcgophmjhnfmdobcealeniokcfdojabaaaaaapibfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcjabeaaaaeaaaaaaaceafaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
ahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
acaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
diaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaap
mcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaa
adaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaa
ckaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaan
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaa
aaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaomfbhidpaaaaaaakocaabaaaacaaaaaa
agbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaadmaaaaaadmaaaaaadmefaaaaaj
pcaabaaaafaaaaaajgahbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaa
bbaaaaakbcaabaaaafaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaalmaaaaaalmaaaaaadmefaaaaajpcaabaaaagaaaaaajgahbaaa
acaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaafaaaaaa
egaobaaaagaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
ocaabaaaacaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaadm
aaaaaalmefaaaaajpcaabaaaagaaaaaajgahbaaaacaaaaaaeghobaaaahaaaaaa
aagabaaaaaaaaaaabbaaaaakecaabaaaafaaaaaaegaobaaaagaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaadmaaaaaalmaaaaaalmefaaaaajpcaabaaa
agaaaaaajgahbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaak
icaabaaaafaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbdbaaaaahpcaabaaaacaaaaaaegaobaaaafaaaaaaagaabaaaacaaaaaa
dhaaaaanpcaabaaaacaaaaaaegaobaaaacaaaaaaagiacaaaacaaaaaabiaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakbcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaah
ccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaafgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaabbaaaaajccaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaa
acaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaa
afaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
pnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaa
acaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaak
ncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaa
aeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaadaaaaaa
diaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 155 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c21, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.y
mad_sat r2.w, r0, c20.z, c20
add r4.w, v1, c17.z
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r6.zw, v6.xyxy
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
mad r3.y, r3, r3.x, c16.x
mul r1.xy, v6, c8.x
mul r0.xy, v6, c7.x
mad r3.y, r3, r3.x, c16
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.w, r0, r2
mad r1.x, r3.y, r3, c16.z
mul r1.y, r1.x, r1.w
add r1.x, r6.z, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
add_pp r1.xyz, -r0, c13.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c14.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
mad r5.x, r0, c17, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mul r1.xyz, v1, r1
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.w, -r2.x, c14.z, r1
mad r0.z, r0.w, c14.w, r1.w
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
mul r0.w, v0.x, c6.x
mul r1.w, r0, r0
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.xyz, r5, s0, r3.zwzw, r3
add_pp r0.xyz, r0, -r1
mul_sat r0.w, r1, r0
mad_pp r4.xyz, r0.w, r0, r1
mul r8.xy, v6, c12.x
mul r7.xy, v6.zyzw, c12.x
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
mul r6.xy, v6.zxzw, c12.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r2, r6.w, r0, r1
texldd r0, r5, s3, r3.zwzw, r3
frc r5.z, r4.w
add_sat r1.x, r4.w, -r5.z
mul_pp r1.w, r0, r1.x
mov_pp r1.xyz, r0
mul_pp r2, r1, r2
add_pp r2.xyz, r2, -r4
add r3.xyz, v4, c18.xyyw
texld r0, r3, s6
dp4 r5.w, r0, c19
mad_pp r4.xyz, r2.w, r2, r4
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r5.z, r0, c19
add r3.xyz, v4, c18.yyxw
texld r3, r3, s6
dp4 r5.y, r3, c19
add r0.xyz, v4, c18.x
texld r0, r0, s6
dp3 r3.x, v4, v4
dp4 r5.x, r0, c19
rsq r3.x, r3.x
rcp r0.x, r3.x
dp4 r3.x, c1, c1
mul r0.x, r0, c2.w
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_sat r4.w, v5, r3
mad r0, -r0.x, c18.z, r5
mov r3.w, c3.x
cmp r0, r0, c13.y, r3.w
dp4_pp r0.y, r0, c18.w
mul_pp r0.z, r4.w, c4.w
dp3 r0.x, v3, v3
add_pp r4.w, r4, c17
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r0.z
mul_pp r4.w, r4, c4
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.x
mul_pp_sat r3.x, r0.y, c21
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v7.x
mul r5.xyz, r0, c11.x
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 147 instructions, 7 temp regs, 0 temp arrays:
// ALU 119 float, 0 int, 4 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhhepkkjbdjojhkgnhnalphhmelpfkphlabaaaaaafebgaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcombeaaaaeaaaaaaadlafaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaafidaaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
icbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaomfbhidpaaaaaaakocaabaaaacaaaaaaagbjbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaadmaaaaaadmaaaaaadmefaaaaajpcaabaaa
afaaaaaajgahbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaak
bcaabaaaafaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaalmaaaaaalmaaaaaadmefaaaaajpcaabaaaagaaaaaajgahbaaaacaaaaaa
eghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaafaaaaaaegaobaaa
agaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakocaabaaa
acaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaadmaaaaaalm
efaaaaajpcaabaaaagaaaaaajgahbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaa
aaaaaaaabbaaaaakecaabaaaafaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhimpinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaadmaaaaaalmaaaaaalmefaaaaajpcaabaaaagaaaaaa
jgahbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaa
afaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
dbaaaaahpcaabaaaacaaaaaaegaobaaaafaaaaaaagaabaaaacaaaaaadhaaaaan
pcaabaaaacaaaaaaegaobaaaacaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakbcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahccaabaaa
acaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
fgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
agaaaaaaegbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaajccaabaaaacaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaaacaaaaaa
agijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaaafaaaaaa
jgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaapnekibea
dicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaaacaaaaaa
bkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaa
egiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakncaabaaa
acaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaa
diaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaadaaaaaadiaaaaai
hcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
afaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaaaaaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 137 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
add r5.z, v1.w, c15
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c5.x
abs r4.zw, v5.xyxy
abs r0.w, v5.z
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad r2.xyz, r1.w, r2, r1
max r0.x, r4.z, r0.w
rcp r0.y, r0.x
min r0.x, r4.z, r0.w
mul r2.w, r0.x, r0.y
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c13, c13.z
mad r3.y, r3, r3.x, c13.w
mad r3.y, r3, r3.x, c14.x
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
mad r3.y, r3, r3.x, c14
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r1.x, r3.y, r3, c14.z
mul r1.y, r1.x, r2.w
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
add_pp r1.xyz, -r0, c11.y
cmp r1.w, v5.z, r1, r2.x
mul r2.y, v0.x, c7.x
mul_sat r2.x, r2.y, c12.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v5, r1.w, -r1.w
mad r3.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v5.y
cmp r0.w, v5.z, c11.x, c11.y
mul r2.x, r0.w, r1.w
mad r1.w, -r2.x, c12.z, r1
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mul r1.xyz, v1, r1
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r0.z, r0.w, c12.w, r1.w
mul r0.y, r0.z, c13.x
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
mul r3.w, r0.x, c13.x
dsx r3.y, r0
dsy r2.w, r0.y
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
mul r0.w, v0.x, c4.x
mul r1.w, r0, r0
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0, c15
mul r2.z, r0.y, c15.x
texldd r0.xyz, r3.zwzw, s0, r3, r2.zwzw
add_pp r0.xyz, r0, -r1
mul_sat r0.w, r1, r0
mad_pp r6.xyz, r0.w, r0, r1
mul r5.xy, v5.zyzw, c10.x
mul r2.xy, v5, c10.x
texld r0, r2, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r4.z, r1, r0
mul r4.xy, v5.zxzw, c10.x
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
texldd r1, r3.zwzw, s3, r3, r2.zwzw
frc r5.w, r5.z
add_sat r2.z, r5, -r5.w
mul_pp r3.w, r1, r2.z
dp4 r2.w, c1, c1
rsq r1.w, r2.w
mul r7.xyz, r1.w, c1
mov_pp r3.xyz, r1
mul_pp r1, r3, r0
add_pp r1.xyz, r1, -r6
dp3_sat r5.w, v4, r7
mad_pp r6.xyz, r1.w, r1, r6
dp3 r0.x, v3, v3
texld r2, r2, s4
texld r1, r5, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
add_pp r4.x, r5.w, c15.w
mul_pp r1, r3, r1
mul_pp r0.y, r5.w, c2.w
texld r0.x, r0.x, s6
mul_pp r0.z, r0.x, r0.y
mov r0.y, c8.x
mul_pp r4.x, r4, c2.w
mul_pp r0.x, r4, r0
mul_pp_sat r0.x, r0, c16
add_pp r0.x, -r0, c11.y
mul_pp_sat r0.z, r0, c17.x
add r7.xyz, c2, r0.y
mad_sat r7.xyz, r7, r0.z, c0
mul_pp r0.yzw, r7.xxyz, v6.x
mul r7.xyz, r0.yzww, c9.x
mad_pp r5.xyz, r6, c3, r7
mad_pp r1.xyz, -r5, r0.yzww, r1
mul_pp r2.xyz, r5, r0.yzww
mul_pp r0.x, r1.w, r0
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 125 instructions, 6 temp regs, 0 temp arrays:
// ALU 103 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfiiilfhmnoglmfklleffcfgodfakjelgabaaaaaanibcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefciibbaaaaeaaaaaaagcaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
icbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaa
kgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
aeaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeabaaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaagaaaaaaaagabaaa
aaaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaak
ocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaa
aeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaadaaaaaa
diaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 133 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.x
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v4.zyzw, c6.x
mul r1.xy, v4.zyzw, c5.x
dsy r5.zw, v4.xyxy
abs r6.zw, v4.xyxy
abs r0.w, v4.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v4, c5.x
mul r1.xy, v4, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v4.zxzw, c6.x
mul r0.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v4.z, r1.w, r2
cmp r0.z, v4.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v4, c10.x
mul r0.xy, v4.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v4.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v4, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v4
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v4.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v4.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mad_pp r3, r6.w, r2, r3
texldd r2, r7, s3, r1.zwzw, r0.zwzw
mul r5.w, r4, r4
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
mul_pp r2.w, r2, r0.z
mul_pp r3, r2, r3
add_pp r3.xyz, r3, -r5
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
dp3_sat r4.w, v3, r4
mad_pp r3.xyz, r3.w, r3, r5
mov r0.z, c8.x
mul_pp r0.w, r4, c2
texld r1, r1, s4
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v5.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r3.w, r4, c15
mul_pp r1.x, r3.w, c2.w
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 92 used size, 11 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_MainTexHandoverDist]
Float 68 [_DetailScale]
Float 72 [_DetailVertScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_Albedo]
Float 88 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
// 120 instructions, 6 temp regs, 0 temp arrays:
// ALU 99 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednohgodooecomjplcmhjobcphjlfccckiabaaaaaababcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnibaaaaaeaaaaaaadgaeaaaa
fjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaaeaaaaaafgifcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaaeaaaaaafgikcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
aeaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaaeaaaaaakgikcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaaeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaa
aeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
aeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
aeaaaaaajgbfbaiaebaaaaaaaeaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaaeaaaaaaakbabaaa
aeaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaaeaaaaaaakbabaaaaeaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaeaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaaeaaaaaakgikcaaaaaaaaaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaaeaaaaaa
kgikcaaaaaaaaaaaafaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaaeaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaaeaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
adaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaabaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaabaaaaaadicaaaakdcaabaaaacaaaaaaegaabaaaacaaaaaaaceaaaaa
pnekibeaaaaaiaeaaaaaaaaaaaaaaaaaaaaaaaaibcaabaaaacaaaaaaakaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaaegiccaaa
aaaaaaaaabaaaaaaagiacaaaaaaaaaaaafaaaaaadccaaaakocaabaaaacaaaaaa
agajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaaaeaaaaaadiaaaaah
ocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaadaaaaaadiaaaaaihcaabaaa
afaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaafaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaaeaaaaaaegaobaaa
afaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaa
aeaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 141 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mul r4.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c5.x
mul r3.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c16.z, c16.w
abs r0.zw, v5.xyxy
abs r0.x, v5.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v5, c6.x
mul r2.w, r1, r1
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c13.y, c13.z
mad r3.w, r3.x, r2, c13
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c14.x
mul r1.xy, v5.zxzw, c6.x
mul r2.xy, v5.zxzw, c5.x
mad r3.w, r3, r2, c14.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c14.z
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
mul r1.w, r0.y, r1
dsx r3.xy, v5
add r2.x, r0.z, -r0
add r0.y, -r1.w, c14.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c12
cmp r1.w, v5.z, r2, r1
mul r0.y, v0.x, c7.x
abs r2.w, v5.y
add_pp r2.xyz, -r1, c11.y
mul_sat r0.y, r0, c12.z
mad_pp r1.xyz, r0.y, r2, r1
mul r2.xyz, v1, r1
cmp r0.y, v5.x, r1.w, -r1.w
mad r1.x, r0.y, c15, c15.y
add r0.y, -r0.x, c11
mad r1.y, r0.x, c11.z, c11.w
mad r1.y, r0.x, r1, c12.x
mad r0.x, r0, r1.y, c12.y
add r1.z, -r2.w, c11.y
mad r1.w, r2, c11.z, c11
mad r1.w, r1, r2, c12.x
mad r1.w, r1, r2, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.w, r1, r1.z
cmp r2.w, v5.y, c11.x, c11.y
mul r0.y, r0.x, r0
cmp r1.y, v5.z, c11.x, c11
mul r0.x, r1.y, r0.y
mad r0.x, -r0, c12.z, r0.y
mul r1.z, r2.w, r1.w
mad r0.y, -r1.z, c12.z, r1.w
mad r0.y, r2.w, c12.w, r0
mad r0.x, r1.y, c12.w, r0
mul r0.x, r0, c13
add r2.w, v1, c15.z
mul r3.xy, r3, r3
dsy r4.w, r0.x
mul r1.y, r0, c13.x
dsx r1.w, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.z, r3.x, r3.y
rsq r0.y, r1.z
rcp r0.y, r0.y
mul r1.z, r0.y, c15.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r4.z, r0.x, c15.x
texldd r3.xyz, r1, s0, r1.zwzw, r4.zwzw
texldd r1, r1, s3, r1.zwzw, r4.zwzw
mul r0.y, v0.x, c4.x
frc r5.z, r2.w
add_sat r4.z, r2.w, -r5
mul r0.x, r0.y, r0.y
dp4 r2.w, c1, c1
mul_pp r1.w, r1, r4.z
add_pp r3.xyz, r3, -r2
mul_sat r0.x, r0, r0.y
mad_pp r2.xyz, r0.x, r3, r2
mul r5.xy, v5, c10.x
texld r3, r5, s5
texld r6, r4, s5
add_pp r6, r6, -r3
mul r0.xy, v5.zxzw, c10.x
mad_pp r3, r0.z, r6, r3
texld r6, r0, s5
add_pp r6, r6, -r3
mad_pp r3, r0.w, r6, r3
rsq r2.w, r2.w
mul r6.xyz, r2.w, c1
dp3_sat r6.w, v4, r6
rcp r2.w, v3.w
mad r7.xy, v3, r2.w, c15.y
dp3 r6.x, v3, v3
mul_pp r3, r1, r3
texld r2.w, r7, s6
cmp r4.w, -v3.z, c11.x, c11.y
mul_pp r2.w, r4, r2
texld r6.x, r6.x, s7
mul_pp r2.w, r2, r6.x
mov r4.w, c8.x
mul_pp r4.z, r6.w, c2.w
mul_pp r4.z, r2.w, r4
add_pp r7.xyz, r3, -r2
texld r5, r5, s4
mul_pp_sat r4.z, r4, c17.x
add r6.xyz, c2, r4.w
mad_sat r6.xyz, r6, r4.z, c0
mul_pp r3.xyz, r6, v6.x
mad_pp r6.xyz, r3.w, r7, r2
mul r2.xyz, r3, c9.x
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r0.x, r6.w, c15.w
mul_pp r3.w, r0.x, c2
add_pp r5, r5, -r4
mad_pp r0, r0.w, r5, r4
mul_pp r0, r1, r0
mad_pp r2.xyz, r6, c3, r2
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c16
add_pp r1.w, -r1.x, c11.y
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 0
SetTexture 7 [_LightTextureB0] 2D 1
// 132 instructions, 6 temp regs, 0 temp arrays:
// ALU 108 float, 0 int, 5 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedaeppbdidafchcpkpeaocicnahcgdncbjabaaaaaammbdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmbcaaaaeaaaaaaajpaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaa
gcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadicbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
icaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaochgdido
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaakicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
aeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaa
kgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaa
acaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaa
amaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaa
egaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaa
acaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaa
aiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaakgikcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
acaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaa
kehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaaaoaaaaahdcaabaaaacaaaaaa
egbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaacaaaaaaegaabaaa
acaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaacaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaacaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaaacaaaaaa
eghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaakaabaaaafaaaaaabbaaaaajccaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaaacaaaaaaagijcaaaabaaaaaa
aaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaaaeaaaaaajgahbaaaacaaaaaa
diaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
ccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaapnekibeadicaaaahccaabaaa
acaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaackaabaaaacaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaaacaaaaaabkaabaiaebaaaaaa
acaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakncaabaaaacaaaaaaagajbaaa
afaaaaaaagaabaaaacaaaaaaagijcaaaacaaaaaaaeaaaaaadiaaaaahncaabaaa
acaaaaaaagaobaaaacaaaaaapgbpbaaaaeaaaaaadiaaaaaihcaabaaaafaaaaaa
igadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
adaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
bkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 137 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r5.w, v0.x, c4.x
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r6.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c5.x
mul r1.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add r2.z, -r0.w, c11.y
rsq r2.z, r2.z
dsy r4.zw, v5.xyxy
mul r4.zw, r4, r4
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c12.w
cmp r0.x, v5.z, r1.w, r2
cmp r0.z, v5.x, r0.x, -r0.x
mad r8.x, r0.z, c15, c15.y
mul r0.xy, v5.zyzw, c10.x
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v5.y
rcp r2.z, r2.z
mul r4.x, r0.z, r2.z
cmp r0.z, v5, c11.x, c11.y
mul r4.y, r0.z, r4.x
add r2.w, -r0, c11.y
mad r2.z, r0.w, c11, c11.w
mad r2.z, r2, r0.w, c12.x
rsq r2.w, r2.w
mul r5.xyz, v1, r1
mul r2.xy, v5, c10.x
texld r1, r2, s5
texld r3, r0, s5
add_pp r3, r3, -r1
mad_pp r1, r6.z, r3, r1
mul r6.xy, v5.zxzw, c10.x
texld r3, r6, s5
mad r0.w, r2.z, r0, c12.y
rcp r2.w, r2.w
mul r2.z, r0.w, r2.w
cmp r0.w, v5.y, c11.x, c11.y
mul r2.w, r0, r2.z
mad r2.z, -r2.w, c12, r2
mad r4.x, -r4.y, c12.z, r4
mad r2.w, r0.z, c12, r4.x
mad r0.z, r0.w, c12.w, r2
mul r0.w, r2, c13.x
dsx r2.w, r0
add r2.z, r4, r4.w
dsx r4.xy, v5
mul r4.xy, r4, r4
mul r8.y, r0.z, c13.x
add r0.z, r4.x, r4.y
rsq r2.z, r2.z
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.x, r2.z
rcp r0.z, r0.z
mul r2.z, r0, c15.x
mul r0.z, r4.x, c15.x
texldd r4.xyz, r8, s0, r2.zwzw, r0.zwzw
add_pp r7.xyz, r4, -r5
add_pp r4, r3, -r1
mad_pp r4, r6.w, r4, r1
texldd r1, r8, s3, r2.zwzw, r0.zwzw
add r3.w, v1, c15.z
mul r7.w, r5, r5
mul_sat r3.x, r7.w, r5.w
frc r0.z, r3.w
add_sat r0.z, r3.w, -r0
dp4 r0.w, c1, c1
mad_pp r3.xyz, r3.x, r7, r5
rsq r0.w, r0.w
mul r5.xyz, r0.w, c1
mul_pp r1.w, r1, r0.z
dp3_sat r3.w, v4, r5
mul_pp r5, r1, r4
add_pp r5.xyz, r5, -r3
mul_pp r0.z, r3.w, c2.w
dp3 r4.x, v3, v3
add_pp r3.w, r3, c15
texld r2, r2, s4
texld r0.w, v3, s7
texld r4.x, r4.x, s6
mul r4.w, r4.x, r0
mul_pp r0.w, r4, r0.z
mov r0.z, c8.x
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
texld r0, r0, s4
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
texld r2, r6, s4
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
mul_pp r3.w, r3, c2
mul_pp r0, r1, r0
mul_pp r2.x, r3.w, r4.w
mul_pp_sat r1.x, r2, c16
add_pp r1.x, -r1, c11.y
mul_pp r4.xyz, r4, v6.x
mad_pp r3.xyz, r5.w, r5, r3
mul r5.xyz, r4, c9.x
mad_pp r3.xyz, r3, c3, r5
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTextureB0] 2D 1
SetTexture 7 [_LightTexture0] CUBE 0
// 127 instructions, 7 temp regs, 0 temp arrays:
// ALU 104 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjjpidcpeiembchchnlocjaeaghpjckgmabaaaaaadebdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcoebbaaaaeaaaaaaahjaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafidaaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaa
gcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadicbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
icaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaochgdido
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaakicaabaaa
aaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
aeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaa
kgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaa
acaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaa
amaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaa
egaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaa
acaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaa
aiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaakgikcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
acaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaa
kehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaaacaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaacaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaa
egacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaapnekibea
baaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaagaaaaaaegbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaa
aaaaaaaadiaaaaahecaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaa
diaaaaahccaabaaaacaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaaibcaabaaa
acaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaa
acaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaafaaaaaa
egiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakocaabaaa
acaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaaaeaaaaaa
diaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaadaaaaaadiaaaaai
hcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
afaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
agaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaa
egaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 135 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
dsy r5.zw, v5.xyxy
abs r6.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c5.x
mul r1.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v5.z, r1.w, r2
cmp r0.z, v5.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v5, c10.x
mul r0.xy, v5.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v5.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v5, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v5
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v5.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v5.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mul r5.w, r4, r4
mad_pp r3, r6.w, r2, r3
texldd r2, r7, s3, r1.zwzw, r0.zwzw
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
mul_pp r2.w, r2, r0.z
mul_pp r3, r2, r3
add_pp r3.xyz, r3, -r5
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
dp3_sat r5.w, v4, r4
mad_pp r3.xyz, r3.w, r3, r5
add_pp r3.w, r5, c15
texld r1, r1, s4
mul_pp r0.z, r5.w, c2.w
texld r4.w, v3, s6
mul_pp r0.w, r4, r0.z
mov r0.z, c8.x
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v6.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
mul_pp r3.w, r3, c2
mul_pp r1.x, r3.w, r4.w
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 124 instructions, 6 temp regs, 0 temp arrays:
// ALU 102 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediodleohnfneceffneahdhfmkkagobmfeabaaaaaalmbcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcgmbbaaaaeaaaaaaaflaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaad
ecbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaa
kgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
aeaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeaefaaaaajpcaabaaaafaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaaaaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaadkaabaaa
afaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaadkaabaaaafaaaaaa
aaaaaaaibcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadp
dicaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaa
acaaaaaaaeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaakgbkbaaa
adaaaaaadiaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 146 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c17.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.zw, v6.xyxy
abs r2.w, v6.z
max r1.w, r6.z, r2
rcp r3.x, r1.w
min r1.w, r6.z, r2
mul r1.w, r1, r3.x
mul r3.x, r1.w, r1.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mad r2.xyz, r0.w, r1, r0
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c14.y, c14.z
mad r3.y, r1.x, r3.x, c14.w
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
mad r3.y, r3, r3.x, c15.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
mad r0.x, r3.y, r3, c15.y
mad r0.w, r0.x, r3.x, c15.z
add_pp r1.xyz, r1, -r2
mad_pp r0.xyz, r6.w, r1, r2
mul r1.w, r0, r1
add r3.y, -r2.w, c12
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c12.y
add r2.x, -r1.w, c15.w
add r0.w, r6.z, -r2
cmp r0.w, -r0, r1, r2.x
mul r2.x, v0, c8
mul_sat r2.x, r2, c13.z
mad_pp r1.xyz, r2.x, r1, r0
add r1.w, -r0, c13
cmp r0.x, v6.z, r0.w, r1.w
cmp r3.x, v6, r0, -r0
mad r5.x, r3, c16, c16.y
mul r8.xy, v6, c11.x
mad r3.x, r2.w, c12.z, c12.w
mad r3.x, r2.w, r3, c13
mad r2.w, r2, r3.x, c13.y
abs r3.x, v6.y
rcp r3.y, r3.y
mul r3.w, r2, r3.y
cmp r2.w, v6.z, c12.x, c12.y
mul r4.x, r2.w, r3.w
add r3.z, -r3.x, c12.y
mad r3.y, r3.x, c12.z, c12.w
mad r3.y, r3, r3.x, c13.x
rsq r3.z, r3.z
mul r2.xyz, v1, r1
mul r7.xy, v6.zyzw, c11.x
mad r3.x, r3.y, r3, c13.y
rcp r3.z, r3.z
mul r3.y, r3.x, r3.z
cmp r3.x, v6.y, c12, c12.y
mul r3.z, r3.x, r3.y
mad r3.w, -r4.x, c13.z, r3
mad r3.y, -r3.z, c13.z, r3
mad r3.z, r2.w, c13.w, r3.w
mad r2.w, r3.x, c13, r3.y
mul r3.x, r3.z, c14
dsy r3.zw, v6.xyxy
mul r3.zw, r3, r3
mul r5.y, r2.w, c14.x
dsx r4.w, r3.x
dsy r4.y, r3.x
dsx r3.xy, v6
mul r3.xy, r3, r3
add r2.w, r3.x, r3.y
add r3.x, r3.z, r3.w
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r4.z, r2.w, c16.x
mul r2.w, v0.x, c5.x
mul r3.w, r2, r2
rsq r3.x, r3.x
rcp r3.x, r3.x
mul r4.x, r3, c16
texldd r3.xyz, r5, s0, r4.zwzw, r4
add_pp r3.xyz, r3, -r2
mul_sat r2.w, r3, r2
mad_pp r2.xyz, r2.w, r3, r2
add r2.w, v1, c16.z
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
dp4 r3.y, c1, c1
rsq r3.x, r3.y
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r0, r6.z, r1, r0
mul r6.xy, v6.zxzw, c11.x
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
texldd r1, r5, s3, r4.zwzw, r4
mul r3.xyz, r3.x, c1
mul_pp r1.w, r1, r2
dp3_sat r4.w, v5, r3
mul_pp r3, r1, r0
texldp r0.x, v4, s8
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
cmp r2.w, r0.z, c12.y, r0
rcp r0.x, v3.w
mad r4.xy, v3, r0.x, c16.y
dp3 r0.x, v3, v3
texld r0.w, r4, s6
cmp r0.z, -v3, c12.x, c12.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r5.w, r0.x, r2
mul_pp r0.y, r4.w, c3.w
mul_pp r0.y, r5.w, r0
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r4.xyz, r0, r0.w, c0
add_pp r0.xyz, r3, -r2
mad_pp r3.xyz, r3.w, r0, r2
mul_pp r4.xyz, r4, v7.x
mul r5.xyz, r4, c10.x
add_pp r3.w, r4, c16
texld r2, r8, s4
texld r0, r7, s4
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
texld r2, r6, s4
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
mul_pp r3.w, r3, c3
mul_pp r0, r1, r0
mad_pp r3.xyz, r3, c4, r5
mul_pp r2.x, r3.w, r5.w
mul_pp_sat r1.x, r2, c17
add_pp r1.x, -r1, c12.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 137 instructions, 6 temp regs, 0 temp arrays:
// ALU 111 float, 0 int, 5 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcdddhignklnaoodelbhhaddglilginpaabaaaaaalmbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcfebdaaaaeaaaaaaanfaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakdcaabaaaacaaaaaaegaabaaaacaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaacaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaoaaaaah
ocaabaaaacaaaaaaagbjbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaa
afaaaaaajgafbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadbaaaaah
ccaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaacaaaaaadhaaaaakccaabaaa
acaaaaaabkaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaabbaaaaaj
ccaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaa
fgafbaaaacaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaa
egbcbaaaafaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaa
acaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaapnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaai
ccaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaj
hcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaa
adaaaaaaaeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaa
afaaaaaadiaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_MainTexHandoverDist]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 145 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c17.y
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.zw, v6.xyxy
abs r2.w, v6.z
max r1.w, r6.z, r2
rcp r3.x, r1.w
min r1.w, r6.z, r2
mul r1.w, r1, r3.x
mul r3.x, r1.w, r1.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mad r2.xyz, r0.w, r1, r0
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c14.y, c14.z
mad r3.y, r1.x, r3.x, c14.w
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
mad r3.y, r3, r3.x, c15.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
mad r0.x, r3.y, r3, c15.y
mad r0.w, r0.x, r3.x, c15.z
add_pp r1.xyz, r1, -r2
mad_pp r0.xyz, r6.w, r1, r2
mul r1.w, r0, r1
add r3.y, -r2.w, c12
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c12.y
add r2.x, -r1.w, c15.w
add r0.w, r6.z, -r2
cmp r0.w, -r0, r1, r2.x
mul r2.x, v0, c8
mul_sat r2.x, r2, c13.z
mad_pp r1.xyz, r2.x, r1, r0
add r1.w, -r0, c13
cmp r0.x, v6.z, r0.w, r1.w
cmp r3.x, v6, r0, -r0
mad r5.x, r3, c16, c16.y
mul r8.xy, v6, c11.x
mad r3.x, r2.w, c12.z, c12.w
mad r3.x, r2.w, r3, c13
mad r2.w, r2, r3.x, c13.y
abs r3.x, v6.y
rcp r3.y, r3.y
mul r3.w, r2, r3.y
cmp r2.w, v6.z, c12.x, c12.y
mul r4.x, r2.w, r3.w
add r3.z, -r3.x, c12.y
mad r3.y, r3.x, c12.z, c12.w
mad r3.y, r3, r3.x, c13.x
rsq r3.z, r3.z
mul r2.xyz, v1, r1
mul r7.xy, v6.zyzw, c11.x
mad r3.x, r3.y, r3, c13.y
rcp r3.z, r3.z
mul r3.y, r3.x, r3.z
cmp r3.x, v6.y, c12, c12.y
mul r3.z, r3.x, r3.y
mad r3.w, -r4.x, c13.z, r3
mad r3.y, -r3.z, c13.z, r3
mad r3.z, r2.w, c13.w, r3.w
mad r2.w, r3.x, c13, r3.y
mul r3.x, r3.z, c14
dsy r3.zw, v6.xyxy
mul r3.zw, r3, r3
mul r5.y, r2.w, c14.x
dsx r4.w, r3.x
dsy r4.y, r3.x
dsx r3.xy, v6
mul r3.xy, r3, r3
add r2.w, r3.x, r3.y
add r3.x, r3.z, r3.w
rsq r2.w, r2.w
rcp r2.w, r2.w
mul r4.z, r2.w, c16.x
mul r2.w, v0.x, c5.x
mul r3.w, r2, r2
rsq r3.x, r3.x
rcp r3.x, r3.x
mul r4.x, r3, c16
texldd r3.xyz, r5, s0, r4.zwzw, r4
add_pp r3.xyz, r3, -r2
mul_sat r2.w, r3, r2
mad_pp r2.xyz, r2.w, r3, r2
add r2.w, v1, c16.z
frc r3.x, r2.w
add_sat r2.w, r2, -r3.x
dp4 r3.y, c1, c1
rsq r3.x, r3.y
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r0, r6.z, r1, r0
mul r6.xy, v6.zxzw, c11.x
texld r1, r6, s5
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
texldd r1, r5, s3, r4.zwzw, r4
mul r3.xyz, r3.x, c1
mul_pp r1.w, r1, r2
dp3_sat r4.w, v5, r3
mul_pp r3, r1, r0
mov r0.x, c2
add r0.w, c12.y, -r0.x
rcp r0.z, v3.w
mad r4.xy, v3, r0.z, c16.y
texldp r0.x, v4, s8
mad r2.w, r0.x, r0, c2.x
dp3 r0.x, v3, v3
texld r0.w, r4, s6
cmp r0.z, -v3, c12.x, c12.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r5.w, r0.x, r2
mul_pp r0.y, r4.w, c3.w
mul_pp r0.y, r5.w, r0
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r4.xyz, r0, r0.w, c0
add_pp r0.xyz, r3, -r2
mad_pp r3.xyz, r3.w, r0, r2
mul_pp r4.xyz, r4, v7.x
mul r5.xyz, r4, c10.x
add_pp r3.w, r4, c16
texld r2, r8, s4
texld r0, r7, s4
add_pp r0, r0, -r2
mad_pp r0, r6.z, r0, r2
texld r2, r6, s4
add_pp r2, r2, -r0
mad_pp r0, r6.w, r2, r0
mul_pp r3.w, r3, c3
mul_pp r0, r1, r0
mad_pp r3.xyz, r3, c4, r5
mul_pp r2.x, r3.w, r5.w
mul_pp_sat r1.x, r2, c17
add_pp r1.x, -r1, c12.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 137 instructions, 6 temp regs, 0 temp arrays:
// ALU 112 float, 0 int, 5 uint
// TEX 14 (0 load, 1 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkhieneofaoifcphjebjedldcdogackanabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakdcaabaaaacaaaaaaegaabaaaacaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaacaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaoaaaaah
ocaabaaaacaaaaaaagbjbaaaaeaaaaaapgbpbaaaaeaaaaaaehaaaaalccaabaaa
acaaaaaajgafbaaaacaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaadkaabaaa
acaaaaaaaaaaaaajecaabaaaacaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaaaacaaaaaackaabaaa
acaaaaaaakiacaaaacaaaaaabiaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaabbaaaaajccaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaaacaaaaaaagijcaaaabaaaaaa
aaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaaafaaaaaajgahbaaaacaaaaaa
diaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
ccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaapnekibeadicaaaahccaabaaa
acaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaackaabaaaacaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaaacaaaaaabkaabaiaebaaaaaa
acaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaaegiccaaaaaaaaaaa
afaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakncaabaaaacaaaaaaagajbaaa
afaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaahncaabaaa
acaaaaaaagaobaaaacaaaaaapgbpbaaaafaaaaaadiaaaaaihcaabaaaafaaaaaa
igadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaafaaaaaadiaaaaah
hcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
adaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
bkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 135 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.x
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
dsy r5.zw, v5.xyxy
abs r6.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c5.x
mul r1.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v5.z, r1.w, r2
cmp r0.z, v5.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v5, c10.x
mul r0.xy, v5.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v5.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v5, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v5
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v5.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v5.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mad_pp r3, r6.w, r2, r3
texldd r2, r7, s3, r1.zwzw, r0.zwzw
mul r5.w, r4, r4
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
mul_pp r2.w, r2, r0.z
mul_pp r3, r2, r3
add_pp r3.xyz, r3, -r5
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
dp3_sat r4.w, v4, r4
mad_pp r3.xyz, r3.w, r3, r5
add_pp r3.w, r4, c15
texld r1, r1, s4
mul_pp r0.z, r4.w, c2.w
texldp r7.x, v3, s6
mul_pp r0.w, r7.x, r0.z
mov r0.z, c8.x
mul_pp_sat r0.w, r0, c17.x
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v6.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
mul_pp r3.w, r3, c2
mul_pp r1.x, r3.w, r7
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_ShadowMapTexture] 2D 0
// 125 instructions, 6 temp regs, 0 temp arrays:
// ALU 103 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhggghcpcafjjkiafbkinehcihggaknamabaaaaaanibcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
aiaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefciibbaaaaeaaaaaaagcaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadicbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaafaaaaaafgikcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaakgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaafaaaaaakgikcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaa
kgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
aeaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeaaoaaaaahmcaabaaaacaaaaaaagbebaaaadaaaaaapgbpbaaaadaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaacaaaaaaeghobaaaagaaaaaaaagabaaa
aaaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaak
ocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaa
aeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaapgbpbaaaaeaaaaaa
diaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_MainTexHandoverDist]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 136 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c16.y
mad_sat r1.w, r0, c16.z, c16
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
dsy r5.zw, v6.xyxy
abs r6.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mul r5.zw, r5, r5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c5.x
mul r1.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c13.y, c13.z
mad r3.y, r1.x, r3.x, c13.w
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r1.w, r0, r1
mad r3.y, r3, r3.x, c14.x
add_pp r4.xyz, r1, -r2
mad r0.x, r3.y, r3, c14.y
mad r1.x, r0, r3, c14.z
mad_pp r0.xyz, r6.w, r4, r2
mul r2.x, r1, r2.w
add_pp r1.xyz, -r0, c11.y
add r2.y, -r2.x, c14.w
add r1.w, r6.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mul r2.y, v0.x, c7.x
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mul r4.xyz, v1, r1
add r2.x, -r1.w, c12.w
cmp r0.x, v6.z, r1.w, r2
cmp r0.z, v6.x, r0.x, -r0.x
mad r7.x, r0.z, c15, c15.y
mul r1.xy, v6, c10.x
mul r0.xy, v6.zyzw, c10.x
add r1.z, -r0.w, c11.y
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
abs r0.w, v6.y
add r1.w, -r0, c11.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.w, r0.z, r1.z
cmp r0.z, v6, c11.x, c11.y
mul r5.x, r0.z, r4.w
mad r4.w, -r5.x, c12.z, r4
mad r1.z, r0.w, c11, c11.w
mad r1.z, r1, r0.w, c12.x
rsq r1.w, r1.w
dsx r5.xy, v6
texld r2, r1, s5
texld r3, r0, s5
add_pp r3, r3, -r2
mad_pp r3, r6.z, r3, r2
mul r6.xy, v6.zxzw, c10.x
texld r2, r6, s5
add_pp r2, r2, -r3
mad_pp r3, r6.w, r2, r3
mad r0.w, r1.z, r0, c12.y
rcp r1.w, r1.w
mul r1.z, r0.w, r1.w
cmp r0.w, v6.y, c11.x, c11.y
mul r1.w, r0, r1.z
mad r1.z, -r1.w, c12, r1
mad r1.w, r0.z, c12, r4
mad r0.z, r0.w, c12.w, r1
mul r0.w, r1, c13.x
dsx r1.w, r0
add r1.z, r5, r5.w
rsq r1.z, r1.z
mul r7.y, r0.z, c13.x
mul r5.xy, r5, r5
add r0.z, r5.x, r5.y
rsq r0.z, r0.z
dsy r0.w, r0
rcp r4.w, r1.z
rcp r0.z, r0.z
mul r1.z, r0, c15.x
mul r0.z, r4.w, c15.x
texldd r5.xyz, r7, s0, r1.zwzw, r0.zwzw
texldd r2, r7, s3, r1.zwzw, r0.zwzw
mul r4.w, v0.x, c4.x
mul r5.w, r4, r4
dp4_pp r0.w, c1, c1
add_pp r5.xyz, r5, -r4
mul_sat r4.w, r5, r4
mad_pp r5.xyz, r4.w, r5, r4
add r4.x, v1.w, c15.z
frc r0.z, r4.x
add_sat r0.z, r4.x, -r0
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, c1
mul_pp r2.w, r2, r0.z
dp3_sat r5.w, v5, r4
mul_pp r4, r2, r3
texld r1, r1, s4
mul_pp r0.z, r5.w, c2.w
texldp r3.x, v4, s6
texld r0.w, v3, s7
mul r3.w, r0, r3.x
mul_pp r0.w, r3, r0.z
mov r0.z, c8.x
add r3.xyz, c2, r0.z
mul_pp_sat r0.w, r0, c17.x
mad_sat r7.xyz, r3, r0.w, c0
add_pp r3.xyz, r4, -r5
mad_pp r3.xyz, r4.w, r3, r5
mul_pp r4.xyz, r7, v7.x
mul r5.xyz, r4, c9.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r4.w, r5, c15
mul_pp r4.w, r4, c2
mul_pp r1.x, r4.w, r3.w
mul_pp_sat r1.x, r1, c16
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c11.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 220 used size, 13 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
Float 216 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] 2D 0
// 127 instructions, 7 temp regs, 0 temp arrays:
// ALU 104 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedchgcpgojghcbcnhbfbhgcbcfcgfdbhjbabaaaaaafibdaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaeaeaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apalaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpabbaaaaeaaaaaaahmaeaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
fibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaa
acaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadecbabaaaadaaaaaagcbaaaad
lcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
agaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaagaaaaaakgikcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
ochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
abeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaaacaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaahbcaabaaaacaaaaaabkaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaaidcaabaaaacaaaaaajgbfbaaa
agaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaahicaabaaaabaaaaaabkaabaaa
acaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaackbabaaaagaaaaaaakbabaaa
agaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaacaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
bnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaacaaaaaadhaaaaak
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaaeaaaaaafgbjbaia
mbaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaahmcaabaaaafaaaaaakgaobaaa
acaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaaafaaaaaakgaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaacaaaaaaogakbaaaaeaaaaaa
egaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaaagabbaaaacaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaaeaaaaaackaabaaa
adaaaaaaamaaaaafccaabaaaafaaaaaackaabaaaadaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaaakbabaaaabaaaaaaakiacaaa
aaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaakgikcaaaaaaaaaaa
anaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
kgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabbaaaaajbcaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaa
acaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaacaaaaaaegbcbaaa
afaaaaaaegacbaaaacaaaaaadiaaaaaiccaabaaaacaaaaaaakaabaaaacaaaaaa
dkiacaaaaaaaaaaaajaaaaaaaaaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaibcaabaaaacaaaaaaakaabaaaacaaaaaadkiacaaa
aaaaaaaaajaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
pnekibeaaoaaaaahmcaabaaaacaaaaaaagbebaaaaeaaaaaapgbpbaaaaeaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaacaaaaaaeghobaaaahaaaaaaaagabaaa
aaaaaaaaefaaaaajpcaabaaaagaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaa
aagabaaaabaaaaaadiaaaaahecaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaa
agaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaa
dicaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaaaaaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
ocaabaaaacaaaaaaagajbaaaafaaaaaafgafbaaaacaaaaaaagijcaaaacaaaaaa
aeaaaaaadiaaaaahocaabaaaacaaaaaafgaobaaaacaaaaaakgbkbaaaadaaaaaa
diaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaafgifcaaaaaaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 145 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mul r1.xy, v6.zyzw, c8.x
mul r0.xy, v6.zyzw, c7.x
mul r3.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c20.x, c20
abs r0.zw, v6.xyxy
abs r0.x, v6.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v6, c8.x
mul r2.w, r1, r1
mul r5.xy, v6, c12.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c15.y, c15.z
mad r3.w, r3.x, r2, c15
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c16.x
mul r1.xy, v6.zxzw, c8.x
mul r2.xy, v6.zxzw, c7.x
mad r3.w, r3, r2, c16.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c16.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
add r3.w, v1, c17.z
frc r5.z, r3.w
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c16.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c14
mul r0.y, v0.x, c9.x
add_pp r2.xyz, -r1, c13.y
mul_sat r0.y, r0, c14.z
mad_pp r1.xyz, r0.y, r2, r1
mul r3.xyz, v1, r1
cmp r1.w, v6.z, r2, r1
cmp r0.y, v6.x, r1.w, -r1.w
abs r1.w, v6.y
mad r2.x, r0.y, c17, c17.y
add r0.y, -r0.x, c13
mad r1.x, r0, c13.z, c13.w
mad r1.x, r0, r1, c14
mad r0.x, r0, r1, c14.y
add r1.y, -r1.w, c13
mad r1.z, r1.w, c13, c13.w
mad r1.z, r1, r1.w, c14.x
mad r1.z, r1, r1.w, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c13.x, c13.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c13, c13.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c14.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c14.z, r1.z
mad r0.x, r1, c14.w, r0
mad r0.y, r1.w, c14.w, r0
mul r0.x, r0, c15
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
add_sat r3.w, r3, -r5.z
mul r2.y, r0, c15.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.z, r0.y, c17.x
mul r1.xy, v6.zyzw, c12.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.x, c17.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
texldd r2, r2, s3, r1.zwzw, r2.zwzw
mul r0.y, v0.x, c6.x
mul_pp r2.w, r2, r3
mul r0.x, r0.y, r0.y
dp3 r1.z, v4, v4
rsq r1.w, r1.z
rcp r1.w, r1.w
dp4 r3.w, c1, c1
add_pp r4.xyz, r4, -r3
mul_sat r0.x, r0, r0.y
mad_pp r3.xyz, r0.x, r4, r3
mul r0.xy, v6.zxzw, c12.x
texld r4, r5, s5
texld r6, r1, s5
add_pp r6, r6, -r4
mad_pp r4, r0.z, r6, r4
texld r6, r0, s5
add_pp r6, r6, -r4
mad_pp r4, r0.w, r6, r4
mul_pp r4, r2, r4
texld r6, v4, s6
add_pp r7.xyz, r4, -r3
dp4 r1.z, r6, c18
rsq r3.w, r3.w
mul r6.xyz, r3.w, c1
dp3_sat r7.w, v5, r6
mad_pp r7.xyz, r4.w, r7, r3
mul r1.w, r1, c2
mad r1.w, -r1, c19.x, r1.z
mov r1.z, c3.x
cmp r1.w, r1, c13.y, r1.z
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
mul r6.w, r6.x, r1
mov r1.w, c10.x
mul_pp r1.z, r7.w, c4.w
mul_pp r1.z, r6.w, r1
texld r3, r5, s4
mul_pp_sat r1.z, r1, c19.w
add r6.xyz, c4, r1.w
mad_sat r6.xyz, r6, r1.z, c0
mul_pp r4.xyz, r6, v7.x
texld r1, r1, s4
add_pp r5, r1, -r3
mad_pp r3, r0.z, r5, r3
texld r5, r0, s4
add_pp r0.x, r7.w, c17.w
mul_pp r1.w, r0.x, c4
mul r6.xyz, r4, c11.x
add_pp r5, r5, -r3
mad_pp r0, r0.w, r5, r3
mul_pp r1.w, r1, r6
mul_pp_sat r1.w, r1, c19.y
mul_pp r0, r2, r0
mad_pp r1.xyz, r7, c5, r6
mad_pp r0.xyz, -r1, r4, r0
add_pp r1.w, -r1, c13.y
mul_pp r1.xyz, r1, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 134 instructions, 6 temp regs, 0 temp arrays:
// ALU 110 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedglchndofmildcfkebnbjnmmfimgniblkabaaaaaaeabeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcnibcaaaaeaaaaaaalgaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
acaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
diaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaap
mcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaa
adaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaa
ckaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaan
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaa
aaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaafaaaaaa
egbcbaaaaeaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaa
acaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
dbaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadhaaaaak
bcaabaaaacaaaaaaakaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaa
aaaaiadpbaaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaa
abaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaa
bbaaaaajccaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaa
acaaaaaafgafbaaaacaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaa
acaaaaaaegbcbaaaafaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaa
bkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaa
bkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaa
acaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaapnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaa
bkaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaa
acaaaaaadicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaea
aaaaaaaiccaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadp
aaaaaaajhcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
ajaaaaaadccaaaakncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaa
agijcaaaadaaaaaaaeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaa
pgbpbaaaadaaaaaadiaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaa
aaaaaaaaajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaa
acaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaa
agbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaai
pcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaa
aaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 146 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.z
mul r1.xy, v6.zyzw, c8.x
mul r0.xy, v6.zyzw, c7.x
mul r3.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c20.x, c20
abs r0.zw, v6.xyxy
abs r0.x, v6.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v6, c8.x
mul r2.w, r1, r1
mul r5.xy, v6, c12.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c15.y, c15.z
mad r3.w, r3.x, r2, c15
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c16.x
mul r1.xy, v6.zxzw, c8.x
mul r2.xy, v6.zxzw, c7.x
mad r3.w, r3, r2, c16.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c16.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
add r3.w, v1, c17.z
frc r5.z, r3.w
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c16.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c14
mul r0.y, v0.x, c9.x
add_pp r2.xyz, -r1, c13.y
mul_sat r0.y, r0, c14.z
mad_pp r1.xyz, r0.y, r2, r1
mul r3.xyz, v1, r1
cmp r1.w, v6.z, r2, r1
cmp r0.y, v6.x, r1.w, -r1.w
abs r1.w, v6.y
mad r2.x, r0.y, c17, c17.y
add r0.y, -r0.x, c13
mad r1.x, r0, c13.z, c13.w
mad r1.x, r0, r1, c14
mad r0.x, r0, r1, c14.y
add r1.y, -r1.w, c13
mad r1.z, r1.w, c13, c13.w
mad r1.z, r1, r1.w, c14.x
mad r1.z, r1, r1.w, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c13.x, c13.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c13, c13.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c14.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c14.z, r1.z
mad r0.x, r1, c14.w, r0
mad r0.y, r1.w, c14.w, r0
mul r0.x, r0, c15
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
add_sat r3.w, r3, -r5.z
mul r2.y, r0, c15.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.z, r0.y, c17.x
mul r1.xy, v6.zyzw, c12.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.x, c17.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
texldd r2, r2, s3, r1.zwzw, r2.zwzw
mul r0.y, v0.x, c6.x
mul_pp r2.w, r2, r3
mul r0.x, r0.y, r0.y
dp3 r1.w, v4, v4
rsq r1.w, r1.w
dp4 r3.w, c1, c1
rcp r1.w, r1.w
add_pp r4.xyz, r4, -r3
mul_sat r0.x, r0, r0.y
mad_pp r3.xyz, r0.x, r4, r3
mul r0.xy, v6.zxzw, c12.x
texld r4, r5, s5
texld r6, r1, s5
add_pp r6, r6, -r4
mad_pp r4, r0.z, r6, r4
texld r6, r0, s5
add_pp r6, r6, -r4
mad_pp r4, r0.w, r6, r4
mul_pp r4, r2, r4
texld r6, v4, s6
add_pp r7.xyz, r4, -r3
dp4 r1.z, r6, c18
rsq r3.w, r3.w
mul r6.xyz, r3.w, c1
dp3_sat r7.w, v5, r6
mul r1.w, r1, c2
mad r1.w, -r1, c19.x, r1.z
mov r1.z, c3.x
cmp r3.w, r1, c13.y, r1.z
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
texld r1.w, v3, s8
mul r1.w, r6.x, r1
mul r6.w, r1, r3
mov r1.w, c10.x
mad_pp r7.xyz, r4.w, r7, r3
mul_pp r1.z, r7.w, c4.w
mul_pp r1.z, r6.w, r1
texld r3, r5, s4
mul_pp_sat r1.z, r1, c19.w
add r6.xyz, c4, r1.w
mad_sat r6.xyz, r6, r1.z, c0
mul_pp r4.xyz, r6, v7.x
texld r1, r1, s4
add_pp r5, r1, -r3
mad_pp r3, r0.z, r5, r3
texld r5, r0, s4
add_pp r0.x, r7.w, c17.w
mul_pp r1.w, r0.x, c4
mul r6.xyz, r4, c11.x
add_pp r5, r5, -r3
mad_pp r0, r0.w, r5, r3
mul_pp r1.w, r1, r6
mul_pp_sat r1.w, r1, c19.y
mul_pp r0, r2, r0
mad_pp r1.xyz, r7, c5, r6
mad_pp r0.xyz, -r1, r4, r0
add_pp r1.w, -r1, c13.y
mul_pp r1.xyz, r1, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 136 instructions, 7 temp regs, 0 temp arrays:
// ALU 111 float, 0 int, 4 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcgenjbiiehhfhnmhigefhahppipcoamdabaaaaaajmbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdebdaaaaeaaaaaaamnaeaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaafidaaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
icbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaafaaaaaaegbcbaaa
aeaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaacaaaaaa
egaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadhaaaaakbcaabaaa
acaaaaaaakaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaafgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaagaaaaaaegbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaaj
ccaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaa
fgafbaaaacaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaa
egbcbaaaafaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaa
acaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaapnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaa
acaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaa
dicaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaai
ccaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaj
hcaabaaaafaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaa
dccaaaakncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaa
adaaaaaaaeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaa
adaaaaaadiaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaa
ajaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
ahaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaa
egacbaaaaaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 154 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c21, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c21.z
mul r5.xy, v6, c15.x
mul r1.xy, v6.zyzw, c11.x
mul r0.xy, v6.zyzw, c10.x
mul r3.xy, v6, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c22.x, c22
abs r0.zw, v6.xyxy
abs r0.x, v6.z
mad r2.xyz, r0.y, r2, r1
max r1.w, r0.z, r0.x
min r1.y, r0.z, r0.x
rcp r1.x, r1.w
mul r1.w, r1.y, r1.x
mul r1.xy, v6, c11.x
mul r2.w, r1, r1
texld r6, r5, s5
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r0.y, r3, r1
mad r3.x, r2.w, c18.y, c18.z
mad r3.w, r3.x, r2, c18
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c19.x
mul r1.xy, v6.zxzw, c11.x
mul r2.xy, v6.zxzw, c10.x
mad r3.w, r3, r2, c19.y
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r1.xyz, r1, -r3
mad r0.y, r3.w, r2.w, c19.z
mad_pp r1.xyz, r0.w, r1, r3
mul r1.w, r0.y, r1
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c19.w
cmp r2.w, -r2.x, r1, r0.y
add r1.w, -r2, c17
cmp r1.w, v6.z, r2, r1
mul r0.y, v0.x, c12.x
abs r2.w, v6.y
add_pp r2.xyz, -r1, c16.y
mul_sat r0.y, r0, c17.z
mad_pp r1.xyz, r0.y, r2, r1
mul r2.xyz, v1, r1
cmp r0.y, v6.x, r1.w, -r1.w
mad r1.z, r0.y, c20.x, c20.y
add r0.y, -r0.x, c16
mad r1.x, r0, c16.z, c16.w
mad r1.x, r0, r1, c17
mad r0.x, r0, r1, c17.y
add r1.y, -r2.w, c16
mad r1.w, r2, c16.z, c16
mad r1.w, r1, r2, c17.x
mad r1.w, r1, r2, c17.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v6.y, c16.x, c16.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c16, c16.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c17.z, r0.y
mad r0.x, r1, c17.w, r0
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c17.z, r1.w
mad r0.y, r2.w, c17.w, r0
mul r0.x, r0, c18
dsy r3.y, r0.x
add r1.x, r3.z, r3.w
add r2.w, v1, c20.z
frc r3.z, r2.w
add_sat r2.w, r2, -r3.z
mul r1.w, r0.y, c18.x
dsx r1.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.x, r0.y, c20
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.x, r0, c20
texldd r4.xyz, r1.zwzw, s0, r1, r3
texldd r1, r1.zwzw, s3, r1, r3
mul_pp r1.w, r1, r2
mul r0.y, v0.x, c9.x
mul r0.x, r0.y, r0.y
add_pp r4.xyz, r4, -r2
mul_sat r0.x, r0, r0.y
mad_pp r2.xyz, r0.x, r4, r2
mul r4.xy, v6.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
rcp r2.w, v4.w
mul r0.xy, v6.zxzw, c15.x
mad_pp r6, r0.z, r7, r6
texld r7, r0, s5
add_pp r7, r7, -r6
mad_pp r6, r0.w, r7, r6
mul_pp r3, r1, r6
mad r6.xy, v4, r2.w, c6
mad r7.xy, v4, r2.w, c5
texld r6.x, r6, s8
texld r7.x, r7, s8
mov r7.z, r7.x
mad r7.xy, v4, r2.w, c3
mov r7.w, r6.x
mad r6.xy, v4, r2.w, c4
texld r7.x, r7, s8
texld r6.x, r6, s8
mov r7.y, r6.x
mad r6, -v4.z, r2.w, r7
mov r4.z, c2.x
cmp r6, r6, c16.y, r4.z
dp4_pp r4.z, r6, c21.x
dp4 r2.w, c1, c1
rsq r2.w, r2.w
mul r7.xyz, r2.w, c1
dp3_sat r6.w, v5, r7
rcp r2.w, v3.w
mad r7.xy, v3, r2.w, c20.y
texld r2.w, r7, s6
cmp r5.z, -v3, c16.x, c16.y
mul_pp r2.w, r5.z, r2
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
mul_pp r2.w, r2, r6.x
mul_pp r2.w, r2, r4.z
mul_pp r4.w, r6, c7
mul_pp r4.z, r2.w, r4.w
mov r4.w, c13.x
add_pp r7.xyz, r3, -r2
texld r5, r5, s4
mul_pp_sat r4.z, r4, c21.w
add r6.xyz, c7, r4.w
mad_sat r6.xyz, r6, r4.z, c0
mul_pp r3.xyz, r6, v7.x
mad_pp r6.xyz, r3.w, r7, r2
mul r2.xyz, r3, c14.x
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r0.x, r6.w, c20.w
mul_pp r3.w, r0.x, c7
add_pp r5, r5, -r4
mad_pp r0, r0.w, r5, r4
mul_pp r0, r1, r0
mad_pp r2.xyz, r6, c8, r2
mul_pp r2.w, r3, r2
mul_pp_sat r1.x, r2.w, c21.y
add_pp r1.w, -r1.x, c16.y
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 220 used size, 13 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
Float 216 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 148 instructions, 7 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 5 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncimggkiooaonnpmmocjjlibglhidcjkabaaaaaabibgaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefclabeaaaaeaaaaaaacmafaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaoaaaaahhcaabaaaacaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaa
aaaaaaaidcaabaaaafaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaabaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaiaaaaaaaagabaaa
aaaaaaaaaaaaaaaidcaabaaaagaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaa
acaaaaaaefaaaaajpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaiaaaaaa
aagabaaaaaaaaaaadgaaaaafccaabaaaafaaaaaaakaabaaaagaaaaaaaaaaaaai
dcaabaaaagaaaaaaegaabaaaacaaaaaaegiacaaaaaaaaaaaadaaaaaaefaaaaaj
pcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaa
dgaaaaafecaabaaaafaaaaaaakaabaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaa
egaabaaaacaaaaaaegiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaagaaaaaa
egaabaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadgaaaaaficaabaaa
afaaaaaaakaabaaaagaaaaaadbaaaaahpcaabaaaacaaaaaaegaobaaaafaaaaaa
kgakbaaaacaaaaaadhaaaaanpcaabaaaacaaaaaaegaobaaaacaaaaaaagiacaaa
acaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaak
bcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiado
aaaaiadoaoaaaaahgcaabaaaacaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakgcaabaaaacaaaaaafgagbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaacaaaaaadkaabaaaafaaaaaabkaabaaaacaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaajccaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaa
acaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaa
afaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaajaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaajaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
pnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaa
acaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
ncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaa
aeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaafaaaaaa
diaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_MainTexHandoverDist]
Float 10 [_DetailScale]
Float 11 [_DetailVertScale]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 155 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c21, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c21.z
mad_sat r1.w, r0, c22.x, c22.y
mul r5.xy, v6, c15.x
mul r0.xy, v6.zyzw, c11.x
mul r1.xy, v6.zyzw, c10.x
abs r3.zw, v6.xyxy
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r1.xyz, r1.w, r1, r0
max r2.x, r3.z, r0.w
rcp r0.x, r2.x
min r0.y, r3.z, r0.w
mul r2.w, r0.y, r0.x
mul r0.xy, v6, c11.x
mul r2.xy, v6, c10.x
mul r3.x, r2.w, r2.w
texld r6, r5, s5
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.w, r2, r0
mad r2.x, r3, c18.y, c18.z
mad r3.y, r2.x, r3.x, c18.w
add_pp r1.xyz, r1, -r0
mad_pp r2.xyz, r3.z, r1, r0
mad r3.y, r3, r3.x, c19.x
mul r0.xy, v6.zxzw, c11.x
mul r1.xy, v6.zxzw, c10.x
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r1.w, r1, r0
add_pp r0.xyz, r0, -r2
mad r3.y, r3, r3.x, c19
mad r1.x, r3.y, r3, c19.z
mul r1.y, r1.x, r2.w
mul r1.w, v0.x, c12.x
dsx r3.xy, v6
mad_pp r0.xyz, r3.w, r0, r2
rcp r2.w, v4.w
add r1.z, r3, -r0.w
add r1.x, -r1.y, c19.w
cmp r2.y, -r1.z, r1, r1.x
add r2.x, -r2.y, c17.w
add_pp r1.xyz, -r0, c16.y
mul_sat r1.w, r1, c17.z
mad_pp r0.xyz, r1.w, r1, r0
abs r1.z, v6.y
cmp r2.x, v6.z, r2.y, r2
cmp r1.x, v6, r2, -r2
mul r2.xyz, v1, r0
mad r0.z, r1.x, c20.x, c20.y
add r0.x, -r0.w, c16.y
mad r0.y, r0.w, c16.z, c16.w
mad r0.y, r0.w, r0, c17.x
mad r0.y, r0.w, r0, c17
add r1.x, -r1.z, c16.y
mad r1.y, r1.z, c16.z, c16.w
mad r1.y, r1, r1.z, c17.x
mad r1.y, r1, r1.z, c17
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v6.z, c16.x, c16.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c17.z, r0.y
mad r0.x, r0.w, c17.w, r0
mul r1.y, r1, r1.x
cmp r1.z, v6.y, c16.x, c16.y
mul r1.x, r1.z, r1.y
mad r0.y, -r1.x, c17.z, r1
mad r0.y, r1.z, c17.w, r0
mul r0.x, r0, c18
mul r0.w, r0.y, c18.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
dsy r1.zw, v6.xyxy
mul r1.zw, r1, r1
dsy r1.y, r0.x
dsx r0.y, r0.x
add r0.x, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.z, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r0.x, r1.z, c20
mul r1.x, r1, c20
texldd r4.xyz, r0.zwzw, s0, r0, r1
mul r1.w, v0.x, c9.x
mul r1.z, r1.w, r1.w
add_pp r4.xyz, r4, -r2
mul_sat r1.z, r1, r1.w
mad_pp r2.xyz, r1.z, r4, r2
mul r4.xy, v6.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
add r1.z, v1.w, c20
frc r1.w, r1.z
texldd r0, r0.zwzw, s3, r0, r1
add_sat r1.z, r1, -r1.w
mul_pp r1.w, r0, r1.z
mad_pp r6, r3.z, r7, r6
mul r3.xy, v6.zxzw, c15.x
texld r7, r3, s5
add_pp r7, r7, -r6
mad_pp r6, r3.w, r7, r6
mov_pp r1.xyz, r0
mul_pp r0, r1, r6
mad r7.xyz, v4, r2.w, c6
texld r6.x, r7, s8
mad r7.xyz, v4, r2.w, c5
mov_pp r6.w, r6.x
texld r6.x, r7, s8
mad r7.xyz, v4, r2.w, c4
mov_pp r6.z, r6.x
texld r6.x, r7, s8
mad r7.xyz, v4, r2.w, c3
mov_pp r6.y, r6.x
mov r2.w, c2.x
add r4.z, c16.y, -r2.w
texld r6.x, r7, s8
mad r6, r6, r4.z, c2.x
dp4_pp r4.z, r6, c21.x
dp4 r4.w, c1, c1
rsq r2.w, r4.w
mul r7.xyz, r2.w, c1
dp3_sat r6.w, v5, r7
rcp r2.w, v3.w
mad r7.xy, v3, r2.w, c20.y
texld r2.w, r7, s6
cmp r5.z, -v3, c16.x, c16.y
mul_pp r2.w, r5.z, r2
dp3 r6.x, v3, v3
texld r6.x, r6.x, s7
mul_pp r2.w, r2, r6.x
mul_pp r2.w, r2, r4.z
mul_pp r4.w, r6, c7
mul_pp r4.z, r2.w, r4.w
mov r4.w, c13.x
add_pp r7.xyz, r0, -r2
texld r5, r5, s4
mul_pp_sat r4.z, r4, c21.w
add r6.xyz, c7, r4.w
mad_sat r6.xyz, r6, r4.z, c0
mul_pp r0.xyz, r6, v7.x
mad_pp r6.xyz, r0.w, r7, r2
mul r2.xyz, r0, c14.x
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r3.z, r4, r5
texld r5, r3, s4
add_pp r0.w, r6, c20
add_pp r5, r5, -r4
mul_pp r0.w, r0, c7
mad_pp r3, r3.w, r5, r4
mul_pp r0.w, r0, r2
mul_pp_sat r0.w, r0, c21.y
mul_pp r1, r1, r3
mad_pp r2.xyz, r6, c8, r2
mad_pp r1.xyz, -r2, r0, r1
add_pp r0.w, -r0, c16.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 220 used size, 13 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_MainTexHandoverDist]
Float 196 [_DetailScale]
Float 200 [_DetailVertScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_Albedo]
Float 216 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 145 instructions, 7 temp regs, 0 temp arrays:
// ALU 117 float, 0 int, 5 uint
// TEX 14 (0 load, 4 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpncgjgjnbdechhenekdoinlppcojliebabaaaaaapibfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaaaiaiaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcjabeaaaaeaaaaaaaceafaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaaffffaaaafibiaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadicbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaajbcaabaaaacaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaa
abeaaaaaaaaaiadpaoaaaaahocaabaaaacaaaaaaagbjbaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaaihcaabaaaafaaaaaajgahbaaaacaaaaaaegiccaaaaaaaaaaa
abaaaaaaehaaaaalbcaabaaaafaaaaaaegaabaaaafaaaaaaaghabaaaaiaaaaaa
aagabaaaaaaaaaaackaabaaaafaaaaaaaaaaaaaihcaabaaaagaaaaaajgahbaaa
acaaaaaaegiccaaaaaaaaaaaacaaaaaaehaaaaalccaabaaaafaaaaaaegaabaaa
agaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaaagaaaaaaaaaaaaai
hcaabaaaagaaaaaajgahbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaai
ocaabaaaacaaaaaafgaobaaaacaaaaaaagijcaaaaaaaaaaaaeaaaaaaehaaaaal
icaabaaaafaaaaaajgafbaaaacaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaa
dkaabaaaacaaaaaaehaaaaalecaabaaaafaaaaaaegaabaaaagaaaaaaaghabaaa
aiaaaaaaaagabaaaaaaaaaaackaabaaaagaaaaaadcaaaaakpcaabaaaacaaaaaa
egaobaaaafaaaaaaagaabaaaacaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaak
bcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiado
aaaaiadoaoaaaaahgcaabaaaacaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaa
aaaaaaakgcaabaaaacaaaaaafgagbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaefaaaaajpcaabaaaafaaaaaajgafbaaaacaaaaaaeghobaaa
agaaaaaaaagabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckbabaaaadaaaaaaabaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaacaaaaaadkaabaaaafaaaaaabkaabaaaacaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaakgakbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaa
diaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaafaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaajccaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaa
acaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaa
afaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaajaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaajaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
pnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaa
acaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
ncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaa
aeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaafaaaaaa
diaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 154 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c21, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.y
mad_sat r2.w, r0, c20.z, c20
add r4.w, v1, c17.z
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r6.zw, v6.xyxy
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
mad r3.y, r3, r3.x, c16.x
mul r1.xy, v6, c8.x
mul r0.xy, v6, c7.x
mad r3.y, r3, r3.x, c16
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.w, r0, r2
mad r1.x, r3.y, r3, c16.z
mul r1.y, r1.x, r1.w
add r1.x, r6.z, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
add_pp r1.xyz, -r0, c13.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c14.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
mad r5.x, r0, c17, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mul r1.xyz, v1, r1
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.w, -r2.x, c14.z, r1
mad r0.z, r0.w, c14.w, r1.w
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
mul r0.w, v0.x, c6.x
mul r1.w, r0, r0
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.xyz, r5, s0, r3.zwzw, r3
add_pp r0.xyz, r0, -r1
mul_sat r0.w, r1, r0
mad_pp r4.xyz, r0.w, r0, r1
mul r8.xy, v6, c12.x
mul r7.xy, v6.zyzw, c12.x
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
mul r6.xy, v6.zxzw, c12.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r2, r6.w, r0, r1
texldd r0, r5, s3, r3.zwzw, r3
frc r5.z, r4.w
add_sat r1.x, r4.w, -r5.z
mul_pp r1.w, r0, r1.x
mov_pp r1.xyz, r0
mul_pp r2, r1, r2
add_pp r2.xyz, r2, -r4
add r3.xyz, v4, c18.xyyw
texld r0, r3, s6
dp4 r5.w, r0, c19
mad_pp r4.xyz, r2.w, r2, r4
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r5.z, r0, c19
add r3.xyz, v4, c18.yyxw
texld r3, r3, s6
dp4 r5.y, r3, c19
dp3 r0.w, v4, v4
rsq r3.x, r0.w
add r0.xyz, v4, c18.x
texld r0, r0, s6
dp4 r5.x, r0, c19
rcp r3.x, r3.x
mul r0.x, r3, c2.w
dp4 r3.x, c1, c1
mad r0, -r0.x, c18.z, r5
mov r3.y, c3.x
cmp r0, r0, c13.y, r3.y
dp4_pp r0.y, r0, c18.w
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_sat r4.w, v5, r3
mul_pp r0.z, r4.w, c4.w
dp3 r0.x, v3, v3
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r0.z
add_pp r4.w, r4, c17
mul_pp r4.w, r4, c4
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.x
mul_pp_sat r3.x, r0.y, c21
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v7.x
mul r5.xyz, r0, c11.x
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 145 instructions, 7 temp regs, 0 temp arrays:
// ALU 118 float, 0 int, 4 uint
// TEX 17 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednidjcgophmjhnfmdobcealeniokcfdojabaaaaaapibfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcjabeaaaaeaaaaaaaceafaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadicbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
ahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaa
fgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaah
bcaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ccaabaaaacaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahbcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaaidcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahicaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
acaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaa
ogakbaaaacaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaafaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
acaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
acaaaaaakgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
diaaaaahmcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaap
mcaabaaaafaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaacaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaa
adaaaaaaagabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaa
ckaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaan
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaaeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaa
aaaaaaaaakbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaacaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaa
acaaaaaaakaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaomfbhidpaaaaaaakocaabaaaacaaaaaa
agbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaadmaaaaaadmaaaaaadmefaaaaaj
pcaabaaaafaaaaaajgahbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaa
bbaaaaakbcaabaaaafaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaalmaaaaaalmaaaaaadmefaaaaajpcaabaaaagaaaaaajgahbaaa
acaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaafaaaaaa
egaobaaaagaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
ocaabaaaacaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaadm
aaaaaalmefaaaaajpcaabaaaagaaaaaajgahbaaaacaaaaaaeghobaaaahaaaaaa
aagabaaaaaaaaaaabbaaaaakecaabaaaafaaaaaaegaobaaaagaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaadmaaaaaalmaaaaaalmefaaaaajpcaabaaa
agaaaaaajgahbaaaacaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaak
icaabaaaafaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbdbaaaaahpcaabaaaacaaaaaaegaobaaaafaaaaaaagaabaaaacaaaaaa
dhaaaaanpcaabaaaacaaaaaaegaobaaaacaaaaaaagiacaaaacaaaaaabiaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakbcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaah
ccaabaaaacaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaafgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaabbaaaaajccaabaaa
acaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaa
acaaaaaaagijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaa
afaaaaaajgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaa
dkiacaaaaaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
pnekibeadicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaa
acaaaaaabkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaa
afaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaak
ncaabaaaacaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaa
aeaaaaaadiaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaadaaaaaa
diaaaaaihcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaa
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaa
agaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaa
fgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaaj
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_MainTexHandoverDist]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 155 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c21, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
dcl_texcoord7 v7.x
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.y
mad_sat r2.w, r0, c20.z, c20
add r4.w, v1, c17.z
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
abs r6.zw, v6.xyxy
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
mad r3.y, r3, r3.x, c16.x
mul r1.xy, v6, c8.x
mul r0.xy, v6, c7.x
mad r3.y, r3, r3.x, c16
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v6.zxzw, c8.x
mul r0.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.w, r0, r2
mad r1.x, r3.y, r3, c16.z
mul r1.y, r1.x, r1.w
add r1.x, r6.z, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
add_pp r1.xyz, -r0, c13.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c9.x
mul_sat r2.x, r2.y, c14.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
mad r5.x, r0, c17, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mul r1.xyz, v1, r1
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.w, -r2.x, c14.z, r1
mad r0.z, r0.w, c14.w, r1.w
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
mul r0.w, v0.x, c6.x
mul r1.w, r0, r0
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.xyz, r5, s0, r3.zwzw, r3
add_pp r0.xyz, r0, -r1
mul_sat r0.w, r1, r0
mad_pp r4.xyz, r0.w, r0, r1
mul r8.xy, v6, c12.x
mul r7.xy, v6.zyzw, c12.x
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
mul r6.xy, v6.zxzw, c12.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r2, r6.w, r0, r1
texldd r0, r5, s3, r3.zwzw, r3
frc r5.z, r4.w
add_sat r1.x, r4.w, -r5.z
mul_pp r1.w, r0, r1.x
mov_pp r1.xyz, r0
mul_pp r2, r1, r2
add_pp r2.xyz, r2, -r4
add r3.xyz, v4, c18.xyyw
texld r0, r3, s6
dp4 r5.w, r0, c19
mad_pp r4.xyz, r2.w, r2, r4
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r5.z, r0, c19
add r3.xyz, v4, c18.yyxw
texld r3, r3, s6
dp4 r5.y, r3, c19
add r0.xyz, v4, c18.x
texld r0, r0, s6
dp3 r3.x, v4, v4
dp4 r5.x, r0, c19
rsq r3.x, r3.x
rcp r0.x, r3.x
dp4 r3.x, c1, c1
mul r0.x, r0, c2.w
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_sat r4.w, v5, r3
mad r0, -r0.x, c18.z, r5
mov r3.w, c3.x
cmp r0, r0, c13.y, r3.w
dp4_pp r0.y, r0, c18.w
mul_pp r0.z, r4.w, c4.w
dp3 r0.x, v3, v3
add_pp r4.w, r4, c17
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.y, r0.w, r0.z
mul_pp r4.w, r4, c4
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c20.x
mul_pp_sat r3.x, r0.y, c21
mov r0.x, c10
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mul_pp r0.xyz, r0, v7.x
mul r5.xyz, r0, c11.x
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r4.xyz, r4, c5, r5
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 156 used size, 12 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_MainTexHandoverDist]
Float 132 [_DetailScale]
Float 136 [_DetailVertScale]
Float 140 [_DetailDist]
Float 144 [_MinLight]
Float 148 [_Albedo]
Float 152 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 147 instructions, 7 temp regs, 0 temp arrays:
// ALU 119 float, 0 int, 4 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhhepkkjbdjojhkgnhnalphhmelpfkphlabaaaaaafebgaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaaahaaaaaaaaaaaaaa
adaaaaaaadaaaaaaaiaiaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcombeaaaaeaaaaaaadlafaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaaaiaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaafidaaaae
aahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
icbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaafgikcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaakgikcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajicaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajbcaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaaabeaaaaaochgdidodcaaaaajbcaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaadiphhpdpdiaaaaahbcaabaaa
acaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajccaabaaa
acaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
bcaabaaaacaaaaaabkaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaai
dcaabaaaacaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
icaabaaaabaaaaaabkaabaaaacaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaddaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaacaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaacaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaacaaaaaaogakbaaa
acaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaacaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaacaaaaaa
kgaobaaaacaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaacaaaaaakgaobaaaacaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaaeaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaaeaaaaaakgaobaaaaeaaaaaadiaaaaah
mcaabaaaafaaaaaakgaobaaaacaaaaaakgaobaaaaeaaaaaadcaaaaapmcaabaaa
afaaaaaakgaobaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaacaaaaaa
egaabaaaacaaaaaaogakbaaaafaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaa
acaaaaaaogakbaaaaeaaaaaaegaabaaaacaaaaaadiaaaaakgcaabaaaadaaaaaa
agabbaaaacaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaaeaaaaaackaabaaaadaaaaaaamaaaaafccaabaaaafaaaaaackaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaaeaaaaaaegaabaaaafaaaaaaejaaaaanpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
aeaaaaaaegaabaaaafaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaiaebaaaaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaiicaabaaaaaaaaaaa
akbabaaaabaaaaaaakiacaaaaaaaaaaaaiaaaaaadiaaaaahicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaa
agaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaa
aeaaaaaaggbcbaaaagaaaaaakgikcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaacaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaacaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaa
aaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaaibcaabaaaacaaaaaa
akaabaaaacaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaomfbhidpaaaaaaakocaabaaaacaaaaaaagbjbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaadmaaaaaadmaaaaaadmefaaaaajpcaabaaa
afaaaaaajgahbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaak
bcaabaaaafaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaalmaaaaaalmaaaaaadmefaaaaajpcaabaaaagaaaaaajgahbaaaacaaaaaa
eghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaafaaaaaaegaobaaa
agaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakocaabaaa
acaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaadmaaaaaalm
efaaaaajpcaabaaaagaaaaaajgahbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaa
aaaaaaaabbaaaaakecaabaaaafaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhimpinfdbaaaaaaakocaabaaaacaaaaaaagbjbaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaadmaaaaaalmaaaaaalmefaaaaajpcaabaaaagaaaaaa
jgahbaaaacaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaa
afaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
dbaaaaahpcaabaaaacaaaaaaegaobaaaafaaaaaaagaabaaaacaaaaaadhaaaaan
pcaabaaaacaaaaaaegaobaaaacaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakbcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahccaabaaa
acaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
fgafbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
agaaaaaaegbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaadiaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaabbaaaaajccaabaaaacaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaa
acaaaaaabkaabaaaacaaaaaadiaaaaaiocaabaaaacaaaaaafgafbaaaacaaaaaa
agijcaaaabaaaaaaaaaaaaaabacaaaahccaabaaaacaaaaaaegbcbaaaafaaaaaa
jgahbaaaacaaaaaadiaaaaaiecaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaa
aaaaaaaaafaaaaaaaaaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aknhcdlmdiaaaaaiccaabaaaacaaaaaabkaabaaaacaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaapnekibea
dicaaaahccaabaaaacaaaaaaakaabaaaacaaaaaabkaabaaaacaaaaaadiaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaaacaaaaaadicaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaiccaabaaaacaaaaaa
bkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajhcaabaaaafaaaaaa
egiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaaajaaaaaadccaaaakncaabaaa
acaaaaaaagajbaaaafaaaaaaagaabaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaa
diaaaaahncaabaaaacaaaaaaagaobaaaacaaaaaapgbpbaaaadaaaaaadiaaaaai
hcaabaaaafaaaaaaigadbaaaacaaaaaafgifcaaaaaaaaaaaajaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
afaaaaaadiaaaaahhcaabaaaaaaaaaaaigadbaaaacaaaaaaegacbaaaaaaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
ahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaa
egaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaaaadaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 192

	
		}
		
		Pass {
            Tags {"LightMode" = "ForwardAdd"} 
            Blend One One                                      
            Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 10 to 19
//   d3d9 - ALU: 12 to 21
//   d3d11 - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 9 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
"!!ARBvp1.0
# 10 ALU
PARAM c[10] = { program.local[0],
		state.matrix.mvp,
		program.local[5..9] };
TEMP R0;
MOV R0, c[9];
DP4 result.texcoord[2].z, R0, c[7];
DP4 result.texcoord[2].y, R0, c[6];
DP4 result.texcoord[2].x, R0, c[5];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 10 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"vs_2_0
; 12 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c6
dp4 oT2.z, c8, r0
mov r0, c5
mov r1, c4
dp4 oT2.y, c8, r0
dp4 oT2.x, c8, r1
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhlffamgibkghgdhcndobnoaidcnlmladabaaaaaafiadaaaaadaaaaaa
cmaaaaaalmaaaaaafmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
jiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
peabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaaaaaaaaaaabaaaaaafjaaaaae
egiocaaaabaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaa
aeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaaaaaaaaaaaaaaaaaegiccaaa
abaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabaaaaaaa
agiacaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaabaaaaaabcaaaaaakgikcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegiccaaaabaaaaaabdaaaaaapgipcaaaaaaaaaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"agal_vs
[bc]
aaaaaaaaaaaaapacagaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c6
bdaaaaaaacaaaeaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c8, r0
aaaaaaaaaaaaapacafaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c5
aaaaaaaaabaaapacaeaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c4
bdaaaaaaacaaacaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c8, r0
bdaaaaaaacaaabaeaiaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c8, r1
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedjnmaggkionlfmiffnkeilonkceebjlmlabaaaaaaliaeaaaaaeaaaaaa
daaaaaaaimabaaaaiiadaaaabiaeaaaaebgpgodjfeabaaaafeabaaaaaaacpopp
aiabaaaaemaaaaaaadaaceaaaaaaeiaaaaaaeiaaaaaaceaaabaaeiaaaaaaaaaa
abaaabaaaaaaaaaaabaaaaaaaeaaacaaaaaaaaaaabaabaaaaeaaagaaaaaaaaaa
aaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabiaabaaapja
bpaaaaacafaaaciaacaaapjaabaaaaacaaaaapiaabaaoekaafaaaaadabaaahia
aaaaffiaahaaoekaaeaaaaaeabaaahiaagaaoekaaaaaaaiaabaaoeiaaeaaaaae
aaaaahiaaiaaoekaaaaakkiaabaaoeiaaeaaaaaeabaaahoaajaaoekaaaaappia
aaaaoeiaafaaaaadaaaaapiaaaaaffjaadaaoekaaeaaaaaeaaaaapiaacaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaeaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaafaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaac
adaaapoaabaaoejappppaaaafdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaae
egiocaaaaaaaaaaaabaaaaaafjaaaaaeegiocaaaabaaaaaabeaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaaaaaaaaaaaaaaaaaegiccaaaabaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaabaaaaaabaaaaaaaagiacaaaaaaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabcaaaaaakgikcaaa
aaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
abaaaaaabdaaaaaapgipcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaa
abaaaaaadoaaaaabejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
hoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdejfeejepeo
aaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheojiaaaaaa
afaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
imaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 332
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 336
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    #line 340
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 344
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = 1.0;
    #line 348
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 352
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 19 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 19 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 21 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.w, r0, c15
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddiemkimndippbbnjeipihbehkfmhcbkpabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadpccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaiaeaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 v3.w, r0, c15
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedeikidmidnabnlgbjbikkomfoibegjdckabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaapiaaaaaffiaacaaoeka
aeaaaaaeabaaapiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeabaaapiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaapoaaeaaoekaaaaappiaabaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
aeaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 344
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 348
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 353
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 357
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 361
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 365
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 336
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 340
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 345
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 349
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 353
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 357
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 16 ALU
PARAM c[18] = { program.local[0],
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
MOV R0, c[17];
DP4 result.texcoord[2].z, R0, c[11];
DP4 result.texcoord[2].y, R0, c[10];
DP4 result.texcoord[2].x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 16 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 18 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 oT2.z, c16, r0
mov r0, c9
dp4 oT2.y, c16, r0
mov r1, c8
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 oT2.x, c16, r1
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddmhacdconjpjameeinopjabeejblfbnhabaaaaaalmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefceaadaaaaeaaaabaa
naaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaak
mccabaaaabaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
bdaaaaaaacaaabaebaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c16, r1
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfdghapkdldpokkagfeafamaifeehnmmfabaaaaaamaagaaaaaeaaaaaa
daaaaaaadaacaaaahiafaaaaaiagaaaaebgpgodjpiabaaaapiabaaaaaaacpopp
kaabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaaiaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
abaaahoabbaaoekaaaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaalaaoeka
aeaaaaaeaaaaapiaakaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaad
abaaadiaaaaaffiaacaaobkaaeaaaaaeaaaaadiaabaaobkaaaaaaaiaabaaoeia
aeaaaaaeaaaaadiaadaaobkaaaaakkiaaaaaoeiaaeaaaaaeaaaaamoaaeaabeka
aaaappiaaaaaeeiaafaaaaadaaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapia
agaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoeja
abaaaaacadaaapoaabaaoejappppaaaafdeieefceaadaaaaeaaaabaanaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
acaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaa
aaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakmccabaaa
abaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaaaaaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 8 to 17, TEX: 0 to 2
//   d3d9 - ALU: 9 to 17, TEX: 1 to 2
//   d3d11 - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
//   d3d11_9x - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 12 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
texld r0, r0, s0
mul_pp r0.x, r0, c1
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbioionpndiclbpbkjhaodjppefcaogpfabaaaaaammacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckmabaaaa
eaaaaaaaglaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaaaaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r0, r0.xyyy, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedalemgnichmemlepajpfbeadidmiehekdabaaaaaapaadaaaaaeaaaaaa
daaaaaaafaabaaaaaeadaaaalmadaaaaebgpgodjbiabaaaabiabaaaaaaacpppp
oeaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaac
aaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaiaaeaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaaeaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaaiaaaaadaaaaaiiaadaaoelaadaaoelaabaaaaacabaaadia
aaaappiaecaaaaadabaacpiaabaaoeiaaaaioekaacaaaaadaaaaaiiaabaaaaia
abaaaaiaafaaaaadaaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaappla
abaaaaacaaaicpiaaaaaoeiappppaaaafdeieefckmabaaaaeaaaaaaaglaaaaaa
fjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaabejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
adaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"!!ARBfp1.0
# 8 ALU, 0 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.w, fragment.texcoord[1], R0;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, c[1].x;
MOV result.color.w, fragment.texcoord[5];
END
# 8 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"ps_2_0
; 9 ALU
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t5
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r0.xyz, r0.x, t2
dp3_pp_sat r0.x, t1, r0
mul r1.xyz, t5, c0
mul r0.xyz, r1, r0.x
mul r0.xyz, r0, c1.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedloieipnbkbffnjnmagdbeekmebefinkdabaaaaaadaacaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcciabaaaaeaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaaaaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r0.xyz, r0.x, v2
bcaaaaaaaaaaabacabaaaaoeaeaaaaaaaaaaaakeacaaaaaa dp3 r0.x, v1, r0.xyzz
bgaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r0.x, r0.x
adaaaaaaabaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r1.xyz, v5, c0
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
adaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaaaaabaaaaaa mul r0.xyz, r0.xyzz, c1.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedhmbgndkhekjafmbnlllfoeplpaliaonaabaaaaaapmacaaaaaeaaaaaa
daaaaaaapiaaaaaaciacaaaamiacaaaaebgpgodjmaaaaaaamaaaaaaaaaacpppp
jaaaaaaadaaaaaaaabaaceaaaaaadaaaaaaadaaaaaaaceaaaaaadaaaaaaaacaa
abaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaacplaceaaaaacaaaaahiaabaaoelaaiaaaaad
aaaadbiaacaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaad
aaaaahiaaaaaaaiaaaaabliaacaaaaadaaaachiaaaaaoeiaaaaaoeiaabaaaaac
aaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcciabaaaa
eaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaa
aeaaaaaadoaaaaabejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
imaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaaafaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"!!ARBfp1.0
# 17 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 0, 0.5, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.z, fragment.texcoord[3], fragment.texcoord[3];
RCP R0.x, fragment.texcoord[3].w;
MAD R0.xy, fragment.texcoord[3], R0.x, c[1].y;
SLT R2.x, c[1], fragment.texcoord[3].z;
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0, texture[0], 2D;
TEX R1.w, R0.z, texture[1], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1].z;
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 17 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"ps_2_0
; 17 ALU, 2 TEX
dcl_2d s0
dcl_2d s1
def c1, 0.50000000, 0.00000000, 1.00000000, 2.00000000
dcl t2.xyz
dcl t1.xyz
dcl t3
dcl t5
rcp r1.x, t3.w
mad r2.xy, t3, r1.x, c1.x
dp3 r0.x, t3, t3
mov r1.xy, r0.x
texld r0, r2, s0
texld r2, r1, s1
cmp r0.x, -t3.z, c1.y, c1.z
mul_pp r0.x, r0, r0.w
mul_pp r0.x, r0, r2
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
mul_pp r0.x, r0, c1.w
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednbeijpebpeecdfmohlgldkeeefgcibieabaaaaaakeadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieacaaaa
eaaaaaaakbaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaa
egbabaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaa
aaaaaaaaagaabaaaabaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaa
aaaaaaaaegbcbaaaadaaaaaajgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagajbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"agal_ps
c1 0.5 0.0 1.0 2.0
[bc]
afaaaaaaabaaabacadaaaappaeaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, v3.w
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
adaaaaaaabaaadacadaaaaoeaeaaaaaaabaaaaaaacaaaaaa mul r1.xy, v3, r1.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaaaaabaaaaaa add r1.xy, r1.xyyy, c1.x
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacabaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r1.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacaaaaaafeacaaaaaaabaaaaaaafaababb tex r0, r0.xyyy, s1 <2d wrap linear point>
bfaaaaaaacaaaiacadaaaakkaeaaaaaaaaaaaaaaaaaaaaaa neg r2.w, v3.z
ckaaaaaaaaaaabacacaaaappacaaaaaaabaaaaffabaaaaaa slt r0.x, r2.w, c1.y
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappacaaaaaa mul r0.x, r0.x, r1.w
adaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaappacaaaaaa mul r0.x, r0.x, r0.w
bcaaaaaaabaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r1.x, v2, v2
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappabaaaaaa mul r0.x, r0.x, c1.w
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecediebbibeaffknnoffjkdbkppjakhalgobabaaaaaaeeafaaaaaeaaaaaa
daaaaaaammabaaaafiaeaaaabaafaaaaebgpgodjjeabaaaajeabaaaaaaacpppp
fmabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaaaaaaaaa
abababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppfbaaaaafabaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaaaplabpaaaaacaaaaaaiaaeaacplabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkaagaaaaacaaaaaiiaadaappla
aeaaaaaeaaaaadiaadaaoelaaaaappiaabaaaakaaiaaaaadabaaaiiaadaaoela
adaaoelaabaaaaacabaaadiaabaappiaecaaaaadaaaacpiaaaaaoeiaaaaioeka
ecaaaaadabaacpiaabaaoeiaabaioekaafaaaaadaaaacbiaaaaappiaabaaaaia
fiaaaaaeaaaacbiaadaakklbabaaffkaaaaaaaiaacaaaaadaaaaabiaaaaaaaia
aaaaaaiaceaaaaacabaaahiaabaaoelaaiaaaaadaaaadciaacaaoelaabaaoeia
afaaaaadabaaahiaaeaaoelaaaaaoekaafaaaaadaaaaaoiaaaaaffiaabaablia
afaaaaadaaaachiaaaaaaaiaaaaabliaabaaaaacaaaaciiaaeaapplaabaaaaac
aaaicpiaaaaaoeiappppaaaafdeieefcieacaaaaeaaaaaaakbaaaaaafjaaaaae
egiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaaaaaaaaaaagaabaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
jgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegbcbaaaafaaaaaaegiccaaa
aaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"!!ARBfp1.0
# 13 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R1.w, fragment.texcoord[3], texture[1], CUBE;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"ps_2_0
; 13 ALU, 2 TEX
dcl_2d s0
dcl_cube s1
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
texld r2, r0, s0
texld r0, t3, s1
dp3 r0.x, t2, t2
rsq r1.x, r0.x
mul r1.xyz, r1.x, t2
mul r0.x, r2, r0.w
mul_pp r0.x, r0, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmibmaanhegfhgebjgfckekinpiclngbeabaaaaaaamadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomabaaaa
eaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaa
bacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r0.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaabaaaaaaafbababb tex r0, v3, s1 <cube wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r0.x
adaaaaaaaaaaabacabaaaappacaaaaaaaaaaaappacaaaaaa mul r0.x, r1.w, r0.w
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.x, c1
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedllanjeideokngnjhhgonjfkkfphknfmoabaaaaaagaaeaaaaaeaaaaaa
daaaaaaaiaabaaaaheadaaaacmaeaaaaebgpgodjeiabaaaaeiabaaaaaaacpppp
baabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaabaaaaaa
aaababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaia
aeaacplabpaaaaacaaaaaajiaaaiapkabpaaaaacaaaaaajaabaiapkaaiaaaaad
aaaaaiiaadaaoelaadaaoelaabaaaaacaaaaadiaaaaappiaecaaaaadaaaaapia
aaaaoeiaabaioekaecaaaaadabaaapiaadaaoelaaaaioekaafaaaaadaaaacbia
aaaaaaiaabaappiaacaaaaadaaaaabiaaaaaaaiaaaaaaaiaceaaaaacabaaahia
abaaoelaaiaaaaadaaaadciaacaaoelaabaaoeiaafaaaaadabaaahiaaeaaoela
aaaaoekaafaaaaadaaaaaoiaaaaaffiaabaabliaafaaaaadaaaachiaaaaaaaia
aaaabliaabaaaaacaaaaciiaaeaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcomabaaaaeaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
pcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaa
agaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 10 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R0.w, fragment.texcoord[3], texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, fragment.texcoord[5];
END
# 10 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 10 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xy
dcl t5
texld r0, t3, s0
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r1.xyz, r0.x, t2
mul_pp r0.x, r0.w, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddlagaeffgggjojnblaiknbdlaooljhknabaaaaaalaacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaabaaaa
eaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadmcbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaaaaaaaaaafaababb tex r0, v3, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefieceddjfbacnndndbchhbkadbfkdckhdefnbcabaaaaaameadaaaaaeaaaaaa
daaaaaaaeaabaaaaniacaaaajaadaaaaebgpgodjaiabaaaaaiabaaaaaaacpppp
neaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaahlabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaabaaaaacabaaadiaaaaabllaecaaaaadabaacpiaabaaoeia
aaaioekaacaaaaadaaaaaiiaabaappiaabaappiaafaaaaadaaaachiaaaaappia
aaaaoeiaabaaaaacaaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcjaabaaaaeaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
mcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaa
aaaaaaaaagaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaa
aaaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaaeaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaabaaaaaaamamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
acaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}

#LINE 253

        }
	} 
	
	FallBack "VertexLit"
}
